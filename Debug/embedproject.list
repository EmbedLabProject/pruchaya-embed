
embedproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004138  08004138  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  0800419c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800419c  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ffb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b61  00000000  00000000  0002a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000677  00000000  00000000  0002c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001629f  00000000  00000000  0002cb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b24e  00000000  00000000  00042db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ffdf  00000000  00000000  0004e004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026d0  00000000  00000000  000ddfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e06b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004094 	.word	0x08004094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004094 	.word	0x08004094

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0c6      	sub	sp, #280	; 0x118
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fbef 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f881 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9d9 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 800059e:	f000 f9b7 	bl	8000910 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f98b 	bl	80008bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8e3 	bl	8000770 <MX_ADC1_Init>
  int dutycycle1 = 0;
  int dutycycle2 = 0;
  int dutycycle3 = 0;
  int dutycycle4 = 0;
  */
  int maxLightSensor = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  int minLightSensor = 10000000;
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <main+0xf8>)
 80005b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  int maxHumidSensor = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  int minHumidSensor = 10000000;
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <main+0xf8>)
 80005be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		  adcval = HAL_ADC_GetValue(&hadc1);
		  sprintf (buf, "%d\r\n" , adcval);
		  HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
	  }
	  */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) resultDMA, channelCount);
 80005c2:	2304      	movs	r3, #4
 80005c4:	461a      	mov	r2, r3
 80005c6:	4930      	ldr	r1, [pc, #192]	; (8000688 <main+0xfc>)
 80005c8:	4830      	ldr	r0, [pc, #192]	; (800068c <main+0x100>)
 80005ca:	f000 fcad 	bl	8000f28 <HAL_ADC_Start_DMA>
	  while (conversionComplete == 0) {
 80005ce:	bf00      	nop
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <main+0x104>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0fb      	beq.n	80005d0 <main+0x44>

	  }
	  conversionComplete = 0;
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <main+0x104>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	  //sprintf (buf, "s1 = %d ,s2 = %d ,s3 = %d ,s4 = %d \r\n" , resultDMA[0], resultDMA[1], resultDMA[2], resultDMA[3]);
	  //sprintf (buf, "light = %d ,humid = %d \r\n" , resultDMA[0], resultDMA[1]);
	  if (minLightSensor >= resultDMA[0]) {
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <main+0xfc>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80005ea:	4293      	cmp	r3, r2
 80005ec:	db04      	blt.n	80005f8 <main+0x6c>
		  minLightSensor = resultDMA[0];
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0xfc>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  }
	  if (maxLightSensor < resultDMA[0]) {
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <main+0xfc>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000604:	4293      	cmp	r3, r2
 8000606:	da04      	bge.n	8000612 <main+0x86>
	  		  maxLightSensor = resultDMA[0];
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <main+0xfc>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	b29b      	uxth	r3, r3
 800060e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  }
	  if (minHumidSensor >= resultDMA[1]) {
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <main+0xfc>)
 8000614:	885b      	ldrh	r3, [r3, #2]
 8000616:	b29b      	uxth	r3, r3
 8000618:	461a      	mov	r2, r3
 800061a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800061e:	4293      	cmp	r3, r2
 8000620:	db04      	blt.n	800062c <main+0xa0>
		  minHumidSensor = resultDMA[1];
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <main+0xfc>)
 8000624:	885b      	ldrh	r3, [r3, #2]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  }
	  if (maxHumidSensor < resultDMA[1]) {
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <main+0xfc>)
 800062e:	885b      	ldrh	r3, [r3, #2]
 8000630:	b29b      	uxth	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000638:	4293      	cmp	r3, r2
 800063a:	da04      	bge.n	8000646 <main+0xba>
	  	  maxHumidSensor = resultDMA[1];
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <main+0xfc>)
 800063e:	885b      	ldrh	r3, [r3, #2]
 8000640:	b29b      	uxth	r3, r3
 8000642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  }
	  sprintf (buf, "minL = %d, maxL = %d, minH = %d ,maxH = %d\r\n" , minLightSensor, maxLightSensor, minHumidSensor, maxHumidSensor);
 8000646:	4638      	mov	r0, r7
 8000648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000658:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800065c:	490d      	ldr	r1, [pc, #52]	; (8000694 <main+0x108>)
 800065e:	f003 f875 	bl	800374c <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 8000662:	463b      	mov	r3, r7
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fdbb 	bl	80001e0 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	4639      	mov	r1, r7
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <main+0x10c>)
 8000676:	f002 fcad 	bl	8002fd4 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f000 fbec 	bl	8000e58 <HAL_Delay>
  {
 8000680:	e79f      	b.n	80005c2 <main+0x36>
 8000682:	bf00      	nop
 8000684:	00989680 	.word	0x00989680
 8000688:	20000168 	.word	0x20000168
 800068c:	20000078 	.word	0x20000078
 8000690:	20000170 	.word	0x20000170
 8000694:	080040ac 	.word	0x080040ac
 8000698:	20000120 	.word	0x20000120

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f86e 	bl	800378c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	; (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f001 ff6e 	bl	8002604 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072e:	f000 f98d 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f9d0 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 f977 	bl	8000a4c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2220      	movs	r2, #32
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fffe 	bl	800378c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <MX_ADC1_Init+0x13c>)
 8000792:	4a47      	ldr	r2, [pc, #284]	; (80008b0 <MX_ADC1_Init+0x140>)
 8000794:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <MX_ADC1_Init+0x13c>)
 8000798:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079e:	4b43      	ldr	r3, [pc, #268]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b40      	ldr	r3, [pc, #256]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007c0:	4a3c      	ldr	r2, [pc, #240]	; (80008b4 <MX_ADC1_Init+0x144>)
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <MX_ADC1_Init+0x13c>)
 80007e0:	f000 fb5e 	bl	8000ea0 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80007ea:	f000 f92f 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4619      	mov	r1, r3
 8000800:	482a      	ldr	r0, [pc, #168]	; (80008ac <MX_ADC1_Init+0x13c>)
 8000802:	f000 fc95 	bl	8001130 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800080c:	f000 f91e 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4619      	mov	r1, r3
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_ADC1_Init+0x13c>)
 8000820:	f000 fc86 	bl	8001130 <HAL_ADC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800082a:	f000 f90f 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800082e:	2304      	movs	r3, #4
 8000830:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8000832:	2303      	movs	r3, #3
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4619      	mov	r1, r3
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_ADC1_Init+0x13c>)
 800083e:	f000 fc77 	bl	8001130 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000848:	f000 f900 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800084c:	2306      	movs	r3, #6
 800084e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_ADC1_Init+0x13c>)
 800085c:	f000 fc68 	bl	8001130 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000866:	f000 f8f1 	bl	8000a4c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ADC1_Init+0x148>)
 8000880:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_ADC1_Init+0x13c>)
 8000894:	f000 fefc 	bl	8001690 <HAL_ADCEx_InjectedConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800089e:	f000 f8d5 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000078 	.word	0x20000078
 80008b0:	40012000 	.word	0x40012000
 80008b4:	0f000001 	.word	0x0f000001
 80008b8:	000f0001 	.word	0x000f0001

080008bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART2_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f002 fb1e 	bl	8002f34 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f8a5 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000120 	.word	0x20000120
 800090c:	40004400 	.word	0x40004400

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_DMA_Init+0x3c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <MX_DMA_Init+0x3c>)
 8000920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_DMA_Init+0x3c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2038      	movs	r0, #56	; 0x38
 8000938:	f001 f91f 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800093c:	2038      	movs	r0, #56	; 0x38
 800093e:	f001 f938 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a2c      	ldr	r2, [pc, #176]	; (8000a20 <MX_GPIO_Init+0xd0>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <MX_GPIO_Init+0xd0>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_GPIO_Init+0xd0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <MX_GPIO_Init+0xd0>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <MX_GPIO_Init+0xd0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_GPIO_Init+0xd4>)
 80009dc:	f001 fdf8 	bl	80025d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_GPIO_Init+0xd8>)
 80009f8:	f001 fc66 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fc:	2320      	movs	r3, #32
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0xd4>)
 8000a14:	f001 fc58 	bl	80022c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020800 	.word	0x40020800

08000a2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	conversionComplete = 1;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000170 	.word	0x20000170

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <HAL_ADC_MspInit+0xdc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d157      	bne.n	8000b7a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <HAL_ADC_MspInit+0xe0>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <HAL_ADC_MspInit+0xe0>)
 8000ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_ADC_MspInit+0xe0>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_ADC_MspInit+0xe0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_ADC_MspInit+0xe0>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_ADC_MspInit+0xe0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8000b02:	2353      	movs	r3, #83	; 0x53
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	481d      	ldr	r0, [pc, #116]	; (8000b8c <HAL_ADC_MspInit+0xe4>)
 8000b16:	f001 fbd7 	bl	80022c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <HAL_ADC_MspInit+0xec>)
 8000b1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b60:	f001 f842 	bl	8001be8 <HAL_DMA_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b6a:	f7ff ff6f 	bl	8000a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_ADC_MspInit+0xe8>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012000 	.word	0x40012000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	200000c0 	.word	0x200000c0
 8000b94:	40026410 	.word	0x40026410

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12b      	bne.n	8000c12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c02:	2307      	movs	r3, #7
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_UART_MspInit+0x8c>)
 8000c0e:	f001 fb5b 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f8d0 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA2_Stream0_IRQHandler+0x10>)
 8000c82:	f001 f8b7 	bl	8001df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000c0 	.word	0x200000c0

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f002 fd6c 	bl	800379c <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000174 	.word	0x20000174
 8000cf8:	200002c8 	.word	0x200002c8

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d24:	f7ff ffea 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 fd2b 	bl	80037a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc1b 	bl	800058c <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d64:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 8000d68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d6c:	200002c4 	.word	0x200002c4

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fee1 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe56 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fef9 	bl	8001bce <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 fec1 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000178 	.word	0x20000178

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000178 	.word	0x20000178

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e033      	b.n	8000f1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fdf2 	bl	8000aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	f043 0202 	orr.w	r2, r3, #2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 fa4e 	bl	8001394 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f023 0303 	bic.w	r3, r3, #3
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0e:	e001      	b.n	8000f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start_DMA+0x1e>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e0ce      	b.n	80010e4 <HAL_ADC_Start_DMA+0x1bc>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d018      	beq.n	8000f8e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6c:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <HAL_ADC_Start_DMA+0x1c4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a5f      	ldr	r2, [pc, #380]	; (80010f0 <HAL_ADC_Start_DMA+0x1c8>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9a      	lsrs	r2, r3, #18
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f9c:	d107      	bne.n	8000fae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f040 8086 	bne.w	80010ca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ffc:	d106      	bne.n	800100c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f023 0206 	bic.w	r2, r3, #6
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
 800100a:	e002      	b.n	8001012 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_ADC_Start_DMA+0x1cc>)
 800101c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001022:	4a35      	ldr	r2, [pc, #212]	; (80010f8 <HAL_ADC_Start_DMA+0x1d0>)
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <HAL_ADC_Start_DMA+0x1d4>)
 800102c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001032:	4a33      	ldr	r2, [pc, #204]	; (8001100 <HAL_ADC_Start_DMA+0x1d8>)
 8001034:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800103e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800104e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800105e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	334c      	adds	r3, #76	; 0x4c
 800106a:	4619      	mov	r1, r3
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f000 fe68 	bl	8001d44 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10f      	bne.n	80010a0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d129      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e020      	b.n	80010e2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_ADC_Start_DMA+0x1dc>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d11b      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x1ba>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d114      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	e00b      	b.n	80010e2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f043 0210 	orr.w	r2, r3, #16
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	431bde83 	.word	0x431bde83
 80010f4:	40012300 	.word	0x40012300
 80010f8:	0800158d 	.word	0x0800158d
 80010fc:	08001647 	.word	0x08001647
 8001100:	08001663 	.word	0x08001663
 8001104:	40012000 	.word	0x40012000

08001108 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1c>
 8001148:	2302      	movs	r3, #2
 800114a:	e113      	b.n	8001374 <HAL_ADC_ConfigChannel+0x244>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d925      	bls.n	80011a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68d9      	ldr	r1, [r3, #12]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	3b1e      	subs	r3, #30
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43da      	mvns	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	400a      	ands	r2, r1
 8001180:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68d9      	ldr	r1, [r3, #12]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	4603      	mov	r3, r0
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4403      	add	r3, r0
 800119a:	3b1e      	subs	r3, #30
 800119c:	409a      	lsls	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	e022      	b.n	80011ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	2207      	movs	r2, #7
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4403      	add	r3, r0
 80011e4:	409a      	lsls	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d824      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	221f      	movs	r2, #31
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	3b05      	subs	r3, #5
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e04c      	b.n	80012da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d824      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	221f      	movs	r2, #31
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43da      	mvns	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b23      	subs	r3, #35	; 0x23
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	e023      	b.n	80012da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	221f      	movs	r2, #31
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	400a      	ands	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	3b41      	subs	r3, #65	; 0x41
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_ADC_ConfigChannel+0x250>)
 80012dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a28      	ldr	r2, [pc, #160]	; (8001384 <HAL_ADC_ConfigChannel+0x254>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d10f      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1d8>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_ADC_ConfigChannel+0x254>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12b      	bne.n	800136a <HAL_ADC_ConfigChannel+0x23a>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_ADC_ConfigChannel+0x258>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_ADC_ConfigChannel+0x1f4>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b11      	cmp	r3, #17
 8001322:	d122      	bne.n	800136a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_ADC_ConfigChannel+0x258>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d111      	bne.n	800136a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_ADC_ConfigChannel+0x25c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_ADC_ConfigChannel+0x260>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9a      	lsrs	r2, r3, #18
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800135c:	e002      	b.n	8001364 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40012300 	.word	0x40012300
 8001384:	40012000 	.word	0x40012000
 8001388:	10000012 	.word	0x10000012
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83

08001394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	4b79      	ldr	r3, [pc, #484]	; (8001584 <ADC_Init+0x1f0>)
 800139e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6859      	ldr	r1, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	021a      	lsls	r2, r3, #8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	4a58      	ldr	r2, [pc, #352]	; (8001588 <ADC_Init+0x1f4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d022      	beq.n	8001472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6899      	ldr	r1, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800145c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6899      	ldr	r1, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e00f      	b.n	8001492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001490:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0202 	bic.w	r2, r2, #2
 80014a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6899      	ldr	r1, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
 80014ac:	005a      	lsls	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01b      	beq.n	80014f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	3b01      	subs	r3, #1
 80014ec:	035a      	lsls	r2, r3, #13
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e007      	b.n	8001508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	3b01      	subs	r3, #1
 8001524:	051a      	lsls	r2, r3, #20
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800153c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154a:	025a      	lsls	r2, r3, #9
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	029a      	lsls	r2, r3, #10
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40012300 	.word	0x40012300
 8001588:	0f000001 	.word	0x0f000001

0800158c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001598:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d13c      	bne.n	8001620 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d12b      	bne.n	8001618 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d127      	bne.n	8001618 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d119      	bne.n	8001618 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0220 	bic.w	r2, r2, #32
 80015f2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff fa07 	bl	8000a2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800161e:	e00e      	b.n	800163e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fd75 	bl	800111c <HAL_ADC_ErrorCallback>
}
 8001632:	e004      	b.n	800163e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fd57 	bl	8001108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f043 0204 	orr.w	r2, r3, #4
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fd4a 	bl	800111c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e17e      	b.n	80019a6 <HAL_ADCEx_InjectedConfigChannel+0x316>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d925      	bls.n	8001704 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68d9      	ldr	r1, [r3, #12]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68d9      	ldr	r1, [r3, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4403      	add	r3, r0
 80016f6:	3b1e      	subs	r3, #30
 80016f8:	409a      	lsls	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	e022      	b.n	800174a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6919      	ldr	r1, [r3, #16]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	4603      	mov	r3, r0
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4403      	add	r3, r0
 8001740:	409a      	lsls	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001758:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	3b01      	subs	r3, #1
 8001766:	051a      	lsls	r2, r3, #20
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3303      	adds	r3, #3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	221f      	movs	r2, #31
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43da      	mvns	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	400a      	ands	r2, r1
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3303      	adds	r3, #3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a75      	ldr	r2, [pc, #468]	; (80019b4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d022      	beq.n	8001828 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001812:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	e00f      	b.n	8001848 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001846:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	7d5b      	ldrb	r3, [r3, #21]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e007      	b.n	8001872 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001870:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	7d1b      	ldrb	r3, [r3, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e007      	b.n	800189c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800189a:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d02e      	beq.n	8001902 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d840      	bhi.n	800192a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d002      	beq.n	80018b2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d014      	beq.n	80018da <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80018b0:	e03b      	b.n	800192a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018c0:	f023 030f 	bic.w	r3, r3, #15
 80018c4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6959      	ldr	r1, [r3, #20]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	615a      	str	r2, [r3, #20]
      break;
 80018d8:	e03b      	b.n	8001952 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018e8:	f023 030f 	bic.w	r3, r3, #15
 80018ec:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6999      	ldr	r1, [r3, #24]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	619a      	str	r2, [r3, #24]
      break;
 8001900:	e027      	b.n	8001952 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001910:	f023 030f 	bic.w	r3, r3, #15
 8001914:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69d9      	ldr	r1, [r3, #28]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	61da      	str	r2, [r3, #28]
      break;
 8001928:	e013      	b.n	8001952 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a19      	ldr	r1, [r3, #32]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	621a      	str	r2, [r3, #32]
      break;
 8001950:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d109      	bne.n	8001974 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d105      	bne.n	8001974 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10e      	bne.n	800199c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d003      	beq.n	8001990 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b11      	cmp	r3, #17
 800198e:	d105      	bne.n	800199c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	000f0001 	.word	0x000f0001
 80019b8:	40012300 	.word	0x40012300
 80019bc:	40012000 	.word	0x40012000
 80019c0:	10000012 	.word	0x10000012

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff f924 	bl	8000e40 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e099      	b.n	8001d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	e00f      	b.n	8001c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c26:	f7ff f90b 	bl	8000e40 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d908      	bls.n	8001c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e078      	b.n	8001d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e8      	bne.n	8001c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_DMA_Init+0x158>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f023 0307 	bic.w	r3, r3, #7
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d117      	bne.n	8001d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00e      	beq.n	8001d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fa6f 	bl	80021d0 <DMA_CheckFifoParam>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d06:	2301      	movs	r3, #1
 8001d08:	e016      	b.n	8001d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fa26 	bl	8002164 <DMA_CalcBaseAndBitshift>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	223f      	movs	r2, #63	; 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	f010803f 	.word	0xf010803f

08001d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_DMA_Start_IT+0x26>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e040      	b.n	8001dec <HAL_DMA_Start_IT+0xa8>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d12f      	bne.n	8001dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f9b8 	bl	8002108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	223f      	movs	r2, #63	; 0x3f
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0216 	orr.w	r2, r2, #22
 8001db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0208 	orr.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e005      	b.n	8001dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e00:	4b8e      	ldr	r3, [pc, #568]	; (800203c <HAL_DMA_IRQHandler+0x248>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <HAL_DMA_IRQHandler+0x24c>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0a9b      	lsrs	r3, r3, #10
 8001e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2208      	movs	r2, #8
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01a      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f043 0202 	orr.w	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d012      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2204      	movs	r2, #4
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d043      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03c      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2210      	movs	r2, #16
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e01f      	b.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0208 	bic.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2220      	movs	r2, #32
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 808f 	beq.w	8002094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8087 	beq.w	8002094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d136      	bne.n	800200c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0216 	bic.w	r2, r2, #22
 8001fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_DMA_IRQHandler+0x1da>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0208 	bic.w	r2, r2, #8
 8001fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	223f      	movs	r2, #63	; 0x3f
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d07e      	beq.n	8002100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
        }
        return;
 800200a:	e079      	b.n	8002100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01d      	beq.n	8002056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	2b00      	cmp	r3, #0
 800202e:	d031      	beq.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e02c      	b.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e01e      	b.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10f      	bne.n	8002084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0210 	bic.w	r2, r2, #16
 8002072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	2b00      	cmp	r3, #0
 800209a:	d032      	beq.n	8002102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2205      	movs	r2, #5
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d307      	bcc.n	80020dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f2      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x2cc>
 80020da:	e000      	b.n	80020de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e000      	b.n	8002102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002100:	bf00      	nop
    }
  }
}
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	d108      	bne.n	8002148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002146:	e007      	b.n	8002158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3b10      	subs	r3, #16
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <DMA_CalcBaseAndBitshift+0x68>)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d909      	bls.n	80021a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	659a      	str	r2, [r3, #88]	; 0x58
 80021a4:	e007      	b.n	80021b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	aaaaaaab 	.word	0xaaaaaaab
 80021cc:	080040f4 	.word	0x080040f4

080021d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11f      	bne.n	800222a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d856      	bhi.n	800229e <DMA_CheckFifoParam+0xce>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <DMA_CheckFifoParam+0x28>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800221b 	.word	0x0800221b
 8002200:	08002209 	.word	0x08002209
 8002204:	0800229f 	.word	0x0800229f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d046      	beq.n	80022a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e043      	b.n	80022a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002222:	d140      	bne.n	80022a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002228:	e03d      	b.n	80022a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002232:	d121      	bne.n	8002278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d837      	bhi.n	80022aa <DMA_CheckFifoParam+0xda>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <DMA_CheckFifoParam+0x70>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002251 	.word	0x08002251
 8002244:	08002257 	.word	0x08002257
 8002248:	08002251 	.word	0x08002251
 800224c:	08002269 	.word	0x08002269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e030      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002266:	e022      	b.n	80022ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002270:	d11f      	bne.n	80022b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002276:	e01c      	b.n	80022b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d903      	bls.n	8002286 <DMA_CheckFifoParam+0xb6>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d003      	beq.n	800228c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002284:	e018      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      break;
 800228a:	e015      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e00b      	b.n	80022b6 <DMA_CheckFifoParam+0xe6>
      break;
 800229e:	bf00      	nop
 80022a0:	e00a      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e008      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e006      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
    }
  } 
  
  return status; 
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e159      	b.n	8002598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8148 	bne.w	8002592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d130      	bne.n	800237c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 0201 	and.w	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d017      	beq.n	80023b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a2 	beq.w	8002592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x202>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x1fe>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x1fa>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a46      	ldr	r2, [pc, #280]	; (80025c4 <HAL_GPIO_Init+0x2fc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x1f6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a45      	ldr	r2, [pc, #276]	; (80025c8 <HAL_GPIO_Init+0x300>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x1f2>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_GPIO_Init+0x304>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800250e:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_GPIO_Init+0x304>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002562:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_GPIO_Init+0x304>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_GPIO_Init+0x304>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f aea2 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ec:	e003      	b.n	80025f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	619a      	str	r2, [r3, #24]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e267      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d075      	beq.n	800270e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002622:	4b88      	ldr	r3, [pc, #544]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b04      	cmp	r3, #4
 800262c:	d00c      	beq.n	8002648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b85      	ldr	r3, [pc, #532]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	2b08      	cmp	r3, #8
 8002638:	d112      	bne.n	8002660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002646:	d10b      	bne.n	8002660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d05b      	beq.n	800270c <HAL_RCC_OscConfig+0x108>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d157      	bne.n	800270c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e242      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d106      	bne.n	8002678 <HAL_RCC_OscConfig+0x74>
 800266a:	4b76      	ldr	r3, [pc, #472]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a75      	ldr	r2, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e01d      	b.n	80026b4 <HAL_RCC_OscConfig+0xb0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x98>
 8002682:	4b70      	ldr	r3, [pc, #448]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6f      	ldr	r2, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6c      	ldr	r2, [pc, #432]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xb0>
 800269c:	4b69      	ldr	r3, [pc, #420]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a68      	ldr	r2, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b66      	ldr	r3, [pc, #408]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a65      	ldr	r2, [pc, #404]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80026ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fbc0 	bl	8000e40 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fbbc 	bl	8000e40 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e207      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0xc0>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fbac 	bl	8000e40 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fba8 	bl	8000e40 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1f3      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0xe8>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271a:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	2b08      	cmp	r3, #8
 8002730:	d11c      	bne.n	800276c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x152>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1c7      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4937      	ldr	r1, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	e03a      	b.n	80027e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCC_OscConfig+0x244>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fb61 	bl	8000e40 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe fb5d 	bl	8000e40 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1a8      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4925      	ldr	r1, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e015      	b.n	80027e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_OscConfig+0x244>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fb40 	bl	8000e40 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c4:	f7fe fb3c 	bl	8000e40 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e187      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d036      	beq.n	800285c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_RCC_OscConfig+0x248>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fb20 	bl	8000e40 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fb1c 	bl	8000e40 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e167      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x240>)
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x200>
 8002822:	e01b      	b.n	800285c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x248>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282a:	f7fe fb09 	bl	8000e40 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	e00e      	b.n	8002850 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002832:	f7fe fb05 	bl	8000e40 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d907      	bls.n	8002850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e150      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
 8002844:	40023800 	.word	0x40023800
 8002848:	42470000 	.word	0x42470000
 800284c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ea      	bne.n	8002832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8097 	beq.w	8002998 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a7c      	ldr	r2, [pc, #496]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b7a      	ldr	r3, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b77      	ldr	r3, [pc, #476]	; (8002a78 <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b74      	ldr	r3, [pc, #464]	; (8002a78 <HAL_RCC_OscConfig+0x474>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a73      	ldr	r2, [pc, #460]	; (8002a78 <HAL_RCC_OscConfig+0x474>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fac5 	bl	8000e40 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7fe fac1 	bl	8000e40 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e10c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCC_OscConfig+0x474>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x2ea>
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a63      	ldr	r2, [pc, #396]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	e01c      	b.n	8002928 <HAL_RCC_OscConfig+0x324>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x30c>
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5e      	ldr	r2, [pc, #376]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x324>
 8002910:	4b58      	ldr	r3, [pc, #352]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a54      	ldr	r2, [pc, #336]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fa86 	bl	8000e40 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fa82 	bl	8000e40 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0cb      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ee      	beq.n	8002938 <HAL_RCC_OscConfig+0x334>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fa70 	bl	8000e40 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fa6c 	bl	8000e40 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e0b5      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ee      	bne.n	8002964 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	4a38      	ldr	r2, [pc, #224]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a1 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d05c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d141      	bne.n	8002a3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <HAL_RCC_OscConfig+0x478>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fa40 	bl	8000e40 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fa3c 	bl	8000e40 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e087      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	3b01      	subs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	491b      	ldr	r1, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x478>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fa15 	bl	8000e40 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fa11 	bl	8000e40 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e05c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x416>
 8002a38:	e054      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_OscConfig+0x478>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe f9fe 	bl	8000e40 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe f9fa 	bl	8000e40 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e045      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x444>
 8002a66:	e03d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e038      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x4ec>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d028      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d121      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d11a      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d111      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cc      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d90c      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	494d      	ldr	r1, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d044      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e067      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe f92c 	bl	8000e40 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe f928 	bl	8000e40 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d20c      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e032      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7a:	f000 f821 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	5ccb      	ldrb	r3, [r1, r3]
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f88c 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023c00 	.word	0x40023c00
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	080040dc 	.word	0x080040dc
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc4:	b094      	sub	sp, #80	; 0x50
 8002cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ccc:	2300      	movs	r3, #0
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd8:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d00d      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	f200 80e1 	bhi.w	8002eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf2:	e0db      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cf8:	e0db      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfe:	e0d8      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d00:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	099b      	lsrs	r3, r3, #6
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d32:	4622      	mov	r2, r4
 8002d34:	462b      	mov	r3, r5
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	0159      	lsls	r1, r3, #5
 8002d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d44:	0150      	lsls	r0, r2, #5
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	1a51      	subs	r1, r2, r1
 8002d4e:	6139      	str	r1, [r7, #16]
 8002d50:	4629      	mov	r1, r5
 8002d52:	eb63 0301 	sbc.w	r3, r3, r1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d64:	4659      	mov	r1, fp
 8002d66:	018b      	lsls	r3, r1, #6
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6e:	4651      	mov	r1, sl
 8002d70:	018a      	lsls	r2, r1, #6
 8002d72:	4651      	mov	r1, sl
 8002d74:	ebb2 0801 	subs.w	r8, r2, r1
 8002d78:	4659      	mov	r1, fp
 8002d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d92:	4690      	mov	r8, r2
 8002d94:	4699      	mov	r9, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	eb18 0303 	adds.w	r3, r8, r3
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	462b      	mov	r3, r5
 8002da0:	eb49 0303 	adc.w	r3, r9, r3
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002db2:	4629      	mov	r1, r5
 8002db4:	024b      	lsls	r3, r1, #9
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	024a      	lsls	r2, r1, #9
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd0:	f7fd fa5e 	bl	8000290 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ddc:	e058      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	2200      	movs	r2, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	4611      	mov	r1, r2
 8002dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dee:	623b      	str	r3, [r7, #32]
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0159      	lsls	r1, r3, #5
 8002e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0a:	0150      	lsls	r0, r2, #5
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4641      	mov	r1, r8
 8002e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e16:	4649      	mov	r1, r9
 8002e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e30:	ebb2 040a 	subs.w	r4, r2, sl
 8002e34:	eb63 050b 	sbc.w	r5, r3, fp
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	00eb      	lsls	r3, r5, #3
 8002e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e46:	00e2      	lsls	r2, r4, #3
 8002e48:	4614      	mov	r4, r2
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	18e3      	adds	r3, r4, r3
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	464b      	mov	r3, r9
 8002e54:	eb45 0303 	adc.w	r3, r5, r3
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e66:	4629      	mov	r1, r5
 8002e68:	028b      	lsls	r3, r1, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e70:	4621      	mov	r1, r4
 8002e72:	028a      	lsls	r2, r1, #10
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	61fa      	str	r2, [r7, #28]
 8002e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e84:	f7fd fa04 	bl	8000290 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3750      	adds	r7, #80	; 0x50
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	007a1200 	.word	0x007a1200

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ee8:	f7ff fff0 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0a9b      	lsrs	r3, r3, #10
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	080040ec 	.word	0x080040ec

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f10:	f7ff ffdc 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0b5b      	lsrs	r3, r3, #13
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	080040ec 	.word	0x080040ec

08002f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e042      	b.n	8002fcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fe1c 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f973 	bl	8003264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d175      	bne.n	80030e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Transmit+0x2c>
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e06e      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	; 0x21
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fd ff15 	bl	8000e40 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003048:	e02e      	b.n	80030a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f848 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e03a      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3302      	adds	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e007      	b.n	800309a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1cb      	bne.n	800304a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f814 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e006      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	e03b      	b.n	8003174 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d037      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fd fe9c 	bl	8000e40 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	6a3a      	ldr	r2, [r7, #32]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <UART_WaitOnFlagUntilTimeout+0x30>
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e03a      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d023      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x8a>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d020      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d01d      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b08      	cmp	r3, #8
 8003144:	d116      	bne.n	8003174 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f81d 	bl	800319c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2208      	movs	r2, #8
 8003166:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e00f      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	d0b4      	beq.n	80030fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b095      	sub	sp, #84	; 0x54
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c4:	643a      	str	r2, [r7, #64]	; 0x40
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3314      	adds	r3, #20
 80031f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2b01      	cmp	r3, #1
 8003212:	d119      	bne.n	8003248 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	60bb      	str	r3, [r7, #8]
   return(result);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f023 0310 	bic.w	r3, r3, #16
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003234:	61ba      	str	r2, [r7, #24]
 8003236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6979      	ldr	r1, [r7, #20]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	613b      	str	r3, [r7, #16]
   return(result);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e5      	bne.n	8003214 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003256:	bf00      	nop
 8003258:	3754      	adds	r7, #84	; 0x54
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003268:	b0c0      	sub	sp, #256	; 0x100
 800326a:	af00      	add	r7, sp, #0
 800326c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	ea40 0301 	orr.w	r3, r0, r1
 800328c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032bc:	f021 010c 	bic.w	r1, r1, #12
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ca:	430b      	orrs	r3, r1
 80032cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	6999      	ldr	r1, [r3, #24]
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	ea40 0301 	orr.w	r3, r0, r1
 80032ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <UART_SetConfig+0x2cc>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d005      	beq.n	8003304 <UART_SetConfig+0xa0>
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b8d      	ldr	r3, [pc, #564]	; (8003534 <UART_SetConfig+0x2d0>)
 8003300:	429a      	cmp	r2, r3
 8003302:	d104      	bne.n	800330e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7ff fe02 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8003308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800330c:	e003      	b.n	8003316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800330e:	f7ff fde9 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003320:	f040 810c 	bne.w	800353c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800332e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003336:	4622      	mov	r2, r4
 8003338:	462b      	mov	r3, r5
 800333a:	1891      	adds	r1, r2, r2
 800333c:	65b9      	str	r1, [r7, #88]	; 0x58
 800333e:	415b      	adcs	r3, r3
 8003340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003346:	4621      	mov	r1, r4
 8003348:	eb12 0801 	adds.w	r8, r2, r1
 800334c:	4629      	mov	r1, r5
 800334e:	eb43 0901 	adc.w	r9, r3, r1
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003366:	4690      	mov	r8, r2
 8003368:	4699      	mov	r9, r3
 800336a:	4623      	mov	r3, r4
 800336c:	eb18 0303 	adds.w	r3, r8, r3
 8003370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003374:	462b      	mov	r3, r5
 8003376:	eb49 0303 	adc.w	r3, r9, r3
 800337a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800338a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800338e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003392:	460b      	mov	r3, r1
 8003394:	18db      	adds	r3, r3, r3
 8003396:	653b      	str	r3, [r7, #80]	; 0x50
 8003398:	4613      	mov	r3, r2
 800339a:	eb42 0303 	adc.w	r3, r2, r3
 800339e:	657b      	str	r3, [r7, #84]	; 0x54
 80033a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033a8:	f7fc ff72 	bl	8000290 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <UART_SetConfig+0x2d4>)
 80033b2:	fba3 2302 	umull	r2, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	011c      	lsls	r4, r3, #4
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80033d4:	415b      	adcs	r3, r3
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033dc:	4641      	mov	r1, r8
 80033de:	eb12 0a01 	adds.w	sl, r2, r1
 80033e2:	4649      	mov	r1, r9
 80033e4:	eb43 0b01 	adc.w	fp, r3, r1
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fc:	4692      	mov	sl, r2
 80033fe:	469b      	mov	fp, r3
 8003400:	4643      	mov	r3, r8
 8003402:	eb1a 0303 	adds.w	r3, sl, r3
 8003406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800340a:	464b      	mov	r3, r9
 800340c:	eb4b 0303 	adc.w	r3, fp, r3
 8003410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003428:	460b      	mov	r3, r1
 800342a:	18db      	adds	r3, r3, r3
 800342c:	643b      	str	r3, [r7, #64]	; 0x40
 800342e:	4613      	mov	r3, r2
 8003430:	eb42 0303 	adc.w	r3, r2, r3
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
 8003436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800343a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800343e:	f7fc ff27 	bl	8000290 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4611      	mov	r1, r2
 8003448:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <UART_SetConfig+0x2d4>)
 800344a:	fba3 2301 	umull	r2, r3, r3, r1
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2264      	movs	r2, #100	; 0x64
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	1acb      	subs	r3, r1, r3
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800345e:	4b36      	ldr	r3, [pc, #216]	; (8003538 <UART_SetConfig+0x2d4>)
 8003460:	fba3 2302 	umull	r2, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800346c:	441c      	add	r4, r3
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800347c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	63b9      	str	r1, [r7, #56]	; 0x38
 8003488:	415b      	adcs	r3, r3
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6339      	str	r1, [r7, #48]	; 0x30
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034e4:	460b      	mov	r3, r1
 80034e6:	18db      	adds	r3, r3, r3
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ea:	4613      	mov	r3, r2
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034fa:	f7fc fec9 	bl	8000290 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <UART_SetConfig+0x2d4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <UART_SetConfig+0x2d4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 0207 	and.w	r2, r3, #7
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4422      	add	r2, r4
 800352a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800352c:	e106      	b.n	800373c <UART_SetConfig+0x4d8>
 800352e:	bf00      	nop
 8003530:	40011000 	.word	0x40011000
 8003534:	40011400 	.word	0x40011400
 8003538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800353c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800354a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800354e:	4642      	mov	r2, r8
 8003550:	464b      	mov	r3, r9
 8003552:	1891      	adds	r1, r2, r2
 8003554:	6239      	str	r1, [r7, #32]
 8003556:	415b      	adcs	r3, r3
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800355e:	4641      	mov	r1, r8
 8003560:	1854      	adds	r4, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb43 0501 	adc.w	r5, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	00eb      	lsls	r3, r5, #3
 8003572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003576:	00e2      	lsls	r2, r4, #3
 8003578:	4614      	mov	r4, r2
 800357a:	461d      	mov	r5, r3
 800357c:	4643      	mov	r3, r8
 800357e:	18e3      	adds	r3, r4, r3
 8003580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003584:	464b      	mov	r3, r9
 8003586:	eb45 0303 	adc.w	r3, r5, r3
 800358a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800359a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035aa:	4629      	mov	r1, r5
 80035ac:	008b      	lsls	r3, r1, #2
 80035ae:	4621      	mov	r1, r4
 80035b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b4:	4621      	mov	r1, r4
 80035b6:	008a      	lsls	r2, r1, #2
 80035b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035bc:	f7fc fe68 	bl	8000290 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4b60      	ldr	r3, [pc, #384]	; (8003748 <UART_SetConfig+0x4e4>)
 80035c6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	011c      	lsls	r4, r3, #4
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	61b9      	str	r1, [r7, #24]
 80035e8:	415b      	adcs	r3, r3
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6139      	str	r1, [r7, #16]
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003624:	464b      	mov	r3, r9
 8003626:	460a      	mov	r2, r1
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	67bb      	str	r3, [r7, #120]	; 0x78
 800363a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003648:	4649      	mov	r1, r9
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	4641      	mov	r1, r8
 800364e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003652:	4641      	mov	r1, r8
 8003654:	008a      	lsls	r2, r1, #2
 8003656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800365a:	f7fc fe19 	bl	8000290 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4611      	mov	r1, r2
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <UART_SetConfig+0x4e4>)
 8003666:	fba3 2301 	umull	r2, r3, r3, r1
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2264      	movs	r2, #100	; 0x64
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	1acb      	subs	r3, r1, r3
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	3332      	adds	r3, #50	; 0x32
 8003678:	4a33      	ldr	r2, [pc, #204]	; (8003748 <UART_SetConfig+0x4e4>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003684:	441c      	add	r4, r3
 8003686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368a:	2200      	movs	r2, #0
 800368c:	673b      	str	r3, [r7, #112]	; 0x70
 800368e:	677a      	str	r2, [r7, #116]	; 0x74
 8003690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003694:	4642      	mov	r2, r8
 8003696:	464b      	mov	r3, r9
 8003698:	1891      	adds	r1, r2, r2
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	415b      	adcs	r3, r3
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a4:	4641      	mov	r1, r8
 80036a6:	1851      	adds	r1, r2, r1
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	4649      	mov	r1, r9
 80036ac:	414b      	adcs	r3, r1
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036bc:	4659      	mov	r1, fp
 80036be:	00cb      	lsls	r3, r1, #3
 80036c0:	4651      	mov	r1, sl
 80036c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c6:	4651      	mov	r1, sl
 80036c8:	00ca      	lsls	r2, r1, #3
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	4642      	mov	r2, r8
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d6:	464b      	mov	r3, r9
 80036d8:	460a      	mov	r2, r1
 80036da:	eb42 0303 	adc.w	r3, r2, r3
 80036de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	663b      	str	r3, [r7, #96]	; 0x60
 80036ea:	667a      	str	r2, [r7, #100]	; 0x64
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036f8:	4649      	mov	r1, r9
 80036fa:	008b      	lsls	r3, r1, #2
 80036fc:	4641      	mov	r1, r8
 80036fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003702:	4641      	mov	r1, r8
 8003704:	008a      	lsls	r2, r1, #2
 8003706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800370a:	f7fc fdc1 	bl	8000290 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <UART_SetConfig+0x4e4>)
 8003714:	fba3 1302 	umull	r1, r3, r3, r2
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	2164      	movs	r1, #100	; 0x64
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	3332      	adds	r3, #50	; 0x32
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <UART_SetConfig+0x4e4>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4422      	add	r2, r4
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003742:	46bd      	mov	sp, r7
 8003744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003748:	51eb851f 	.word	0x51eb851f

0800374c <siprintf>:
 800374c:	b40e      	push	{r1, r2, r3}
 800374e:	b500      	push	{lr}
 8003750:	b09c      	sub	sp, #112	; 0x70
 8003752:	ab1d      	add	r3, sp, #116	; 0x74
 8003754:	9002      	str	r0, [sp, #8]
 8003756:	9006      	str	r0, [sp, #24]
 8003758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800375c:	4809      	ldr	r0, [pc, #36]	; (8003784 <siprintf+0x38>)
 800375e:	9107      	str	r1, [sp, #28]
 8003760:	9104      	str	r1, [sp, #16]
 8003762:	4909      	ldr	r1, [pc, #36]	; (8003788 <siprintf+0x3c>)
 8003764:	f853 2b04 	ldr.w	r2, [r3], #4
 8003768:	9105      	str	r1, [sp, #20]
 800376a:	6800      	ldr	r0, [r0, #0]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	a902      	add	r1, sp, #8
 8003770:	f000 f992 	bl	8003a98 <_svfiprintf_r>
 8003774:	9b02      	ldr	r3, [sp, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	b01c      	add	sp, #112	; 0x70
 800377c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003780:	b003      	add	sp, #12
 8003782:	4770      	bx	lr
 8003784:	20000058 	.word	0x20000058
 8003788:	ffff0208 	.word	0xffff0208

0800378c <memset>:
 800378c:	4402      	add	r2, r0
 800378e:	4603      	mov	r3, r0
 8003790:	4293      	cmp	r3, r2
 8003792:	d100      	bne.n	8003796 <memset+0xa>
 8003794:	4770      	bx	lr
 8003796:	f803 1b01 	strb.w	r1, [r3], #1
 800379a:	e7f9      	b.n	8003790 <memset+0x4>

0800379c <__errno>:
 800379c:	4b01      	ldr	r3, [pc, #4]	; (80037a4 <__errno+0x8>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000058 	.word	0x20000058

080037a8 <__libc_init_array>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	4d0d      	ldr	r5, [pc, #52]	; (80037e0 <__libc_init_array+0x38>)
 80037ac:	4c0d      	ldr	r4, [pc, #52]	; (80037e4 <__libc_init_array+0x3c>)
 80037ae:	1b64      	subs	r4, r4, r5
 80037b0:	10a4      	asrs	r4, r4, #2
 80037b2:	2600      	movs	r6, #0
 80037b4:	42a6      	cmp	r6, r4
 80037b6:	d109      	bne.n	80037cc <__libc_init_array+0x24>
 80037b8:	4d0b      	ldr	r5, [pc, #44]	; (80037e8 <__libc_init_array+0x40>)
 80037ba:	4c0c      	ldr	r4, [pc, #48]	; (80037ec <__libc_init_array+0x44>)
 80037bc:	f000 fc6a 	bl	8004094 <_init>
 80037c0:	1b64      	subs	r4, r4, r5
 80037c2:	10a4      	asrs	r4, r4, #2
 80037c4:	2600      	movs	r6, #0
 80037c6:	42a6      	cmp	r6, r4
 80037c8:	d105      	bne.n	80037d6 <__libc_init_array+0x2e>
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d0:	4798      	blx	r3
 80037d2:	3601      	adds	r6, #1
 80037d4:	e7ee      	b.n	80037b4 <__libc_init_array+0xc>
 80037d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037da:	4798      	blx	r3
 80037dc:	3601      	adds	r6, #1
 80037de:	e7f2      	b.n	80037c6 <__libc_init_array+0x1e>
 80037e0:	08004138 	.word	0x08004138
 80037e4:	08004138 	.word	0x08004138
 80037e8:	08004138 	.word	0x08004138
 80037ec:	0800413c 	.word	0x0800413c

080037f0 <__retarget_lock_acquire_recursive>:
 80037f0:	4770      	bx	lr

080037f2 <__retarget_lock_release_recursive>:
 80037f2:	4770      	bx	lr

080037f4 <_free_r>:
 80037f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037f6:	2900      	cmp	r1, #0
 80037f8:	d044      	beq.n	8003884 <_free_r+0x90>
 80037fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fe:	9001      	str	r0, [sp, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f1a1 0404 	sub.w	r4, r1, #4
 8003806:	bfb8      	it	lt
 8003808:	18e4      	addlt	r4, r4, r3
 800380a:	f000 f8df 	bl	80039cc <__malloc_lock>
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <_free_r+0x94>)
 8003810:	9801      	ldr	r0, [sp, #4]
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	b933      	cbnz	r3, 8003824 <_free_r+0x30>
 8003816:	6063      	str	r3, [r4, #4]
 8003818:	6014      	str	r4, [r2, #0]
 800381a:	b003      	add	sp, #12
 800381c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003820:	f000 b8da 	b.w	80039d8 <__malloc_unlock>
 8003824:	42a3      	cmp	r3, r4
 8003826:	d908      	bls.n	800383a <_free_r+0x46>
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	1961      	adds	r1, r4, r5
 800382c:	428b      	cmp	r3, r1
 800382e:	bf01      	itttt	eq
 8003830:	6819      	ldreq	r1, [r3, #0]
 8003832:	685b      	ldreq	r3, [r3, #4]
 8003834:	1949      	addeq	r1, r1, r5
 8003836:	6021      	streq	r1, [r4, #0]
 8003838:	e7ed      	b.n	8003816 <_free_r+0x22>
 800383a:	461a      	mov	r2, r3
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b10b      	cbz	r3, 8003844 <_free_r+0x50>
 8003840:	42a3      	cmp	r3, r4
 8003842:	d9fa      	bls.n	800383a <_free_r+0x46>
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	1855      	adds	r5, r2, r1
 8003848:	42a5      	cmp	r5, r4
 800384a:	d10b      	bne.n	8003864 <_free_r+0x70>
 800384c:	6824      	ldr	r4, [r4, #0]
 800384e:	4421      	add	r1, r4
 8003850:	1854      	adds	r4, r2, r1
 8003852:	42a3      	cmp	r3, r4
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	d1e0      	bne.n	800381a <_free_r+0x26>
 8003858:	681c      	ldr	r4, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	440c      	add	r4, r1
 8003860:	6014      	str	r4, [r2, #0]
 8003862:	e7da      	b.n	800381a <_free_r+0x26>
 8003864:	d902      	bls.n	800386c <_free_r+0x78>
 8003866:	230c      	movs	r3, #12
 8003868:	6003      	str	r3, [r0, #0]
 800386a:	e7d6      	b.n	800381a <_free_r+0x26>
 800386c:	6825      	ldr	r5, [r4, #0]
 800386e:	1961      	adds	r1, r4, r5
 8003870:	428b      	cmp	r3, r1
 8003872:	bf04      	itt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	bf04      	itt	eq
 800387c:	1949      	addeq	r1, r1, r5
 800387e:	6021      	streq	r1, [r4, #0]
 8003880:	6054      	str	r4, [r2, #4]
 8003882:	e7ca      	b.n	800381a <_free_r+0x26>
 8003884:	b003      	add	sp, #12
 8003886:	bd30      	pop	{r4, r5, pc}
 8003888:	200002bc 	.word	0x200002bc

0800388c <sbrk_aligned>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4e0e      	ldr	r6, [pc, #56]	; (80038c8 <sbrk_aligned+0x3c>)
 8003890:	460c      	mov	r4, r1
 8003892:	6831      	ldr	r1, [r6, #0]
 8003894:	4605      	mov	r5, r0
 8003896:	b911      	cbnz	r1, 800389e <sbrk_aligned+0x12>
 8003898:	f000 fba6 	bl	8003fe8 <_sbrk_r>
 800389c:	6030      	str	r0, [r6, #0]
 800389e:	4621      	mov	r1, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 fba1 	bl	8003fe8 <_sbrk_r>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	d00a      	beq.n	80038c0 <sbrk_aligned+0x34>
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d007      	beq.n	80038c4 <sbrk_aligned+0x38>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 fb96 	bl	8003fe8 <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d101      	bne.n	80038c4 <sbrk_aligned+0x38>
 80038c0:	f04f 34ff 	mov.w	r4, #4294967295
 80038c4:	4620      	mov	r0, r4
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	200002c0 	.word	0x200002c0

080038cc <_malloc_r>:
 80038cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d0:	1ccd      	adds	r5, r1, #3
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	2d00      	cmp	r5, #0
 80038e0:	4607      	mov	r7, r0
 80038e2:	db01      	blt.n	80038e8 <_malloc_r+0x1c>
 80038e4:	42a9      	cmp	r1, r5
 80038e6:	d905      	bls.n	80038f4 <_malloc_r+0x28>
 80038e8:	230c      	movs	r3, #12
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	2600      	movs	r6, #0
 80038ee:	4630      	mov	r0, r6
 80038f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039c8 <_malloc_r+0xfc>
 80038f8:	f000 f868 	bl	80039cc <__malloc_lock>
 80038fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003900:	461c      	mov	r4, r3
 8003902:	bb5c      	cbnz	r4, 800395c <_malloc_r+0x90>
 8003904:	4629      	mov	r1, r5
 8003906:	4638      	mov	r0, r7
 8003908:	f7ff ffc0 	bl	800388c <sbrk_aligned>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	4604      	mov	r4, r0
 8003910:	d155      	bne.n	80039be <_malloc_r+0xf2>
 8003912:	f8d8 4000 	ldr.w	r4, [r8]
 8003916:	4626      	mov	r6, r4
 8003918:	2e00      	cmp	r6, #0
 800391a:	d145      	bne.n	80039a8 <_malloc_r+0xdc>
 800391c:	2c00      	cmp	r4, #0
 800391e:	d048      	beq.n	80039b2 <_malloc_r+0xe6>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	4631      	mov	r1, r6
 8003924:	4638      	mov	r0, r7
 8003926:	eb04 0903 	add.w	r9, r4, r3
 800392a:	f000 fb5d 	bl	8003fe8 <_sbrk_r>
 800392e:	4581      	cmp	r9, r0
 8003930:	d13f      	bne.n	80039b2 <_malloc_r+0xe6>
 8003932:	6821      	ldr	r1, [r4, #0]
 8003934:	1a6d      	subs	r5, r5, r1
 8003936:	4629      	mov	r1, r5
 8003938:	4638      	mov	r0, r7
 800393a:	f7ff ffa7 	bl	800388c <sbrk_aligned>
 800393e:	3001      	adds	r0, #1
 8003940:	d037      	beq.n	80039b2 <_malloc_r+0xe6>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	442b      	add	r3, r5
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	f8d8 3000 	ldr.w	r3, [r8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d038      	beq.n	80039c2 <_malloc_r+0xf6>
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	42a2      	cmp	r2, r4
 8003954:	d12b      	bne.n	80039ae <_malloc_r+0xe2>
 8003956:	2200      	movs	r2, #0
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e00f      	b.n	800397c <_malloc_r+0xb0>
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	1b52      	subs	r2, r2, r5
 8003960:	d41f      	bmi.n	80039a2 <_malloc_r+0xd6>
 8003962:	2a0b      	cmp	r2, #11
 8003964:	d917      	bls.n	8003996 <_malloc_r+0xca>
 8003966:	1961      	adds	r1, r4, r5
 8003968:	42a3      	cmp	r3, r4
 800396a:	6025      	str	r5, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	6059      	strne	r1, [r3, #4]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	bf08      	it	eq
 8003974:	f8c8 1000 	streq.w	r1, [r8]
 8003978:	5162      	str	r2, [r4, r5]
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	4638      	mov	r0, r7
 800397e:	f104 060b 	add.w	r6, r4, #11
 8003982:	f000 f829 	bl	80039d8 <__malloc_unlock>
 8003986:	f026 0607 	bic.w	r6, r6, #7
 800398a:	1d23      	adds	r3, r4, #4
 800398c:	1af2      	subs	r2, r6, r3
 800398e:	d0ae      	beq.n	80038ee <_malloc_r+0x22>
 8003990:	1b9b      	subs	r3, r3, r6
 8003992:	50a3      	str	r3, [r4, r2]
 8003994:	e7ab      	b.n	80038ee <_malloc_r+0x22>
 8003996:	42a3      	cmp	r3, r4
 8003998:	6862      	ldr	r2, [r4, #4]
 800399a:	d1dd      	bne.n	8003958 <_malloc_r+0x8c>
 800399c:	f8c8 2000 	str.w	r2, [r8]
 80039a0:	e7ec      	b.n	800397c <_malloc_r+0xb0>
 80039a2:	4623      	mov	r3, r4
 80039a4:	6864      	ldr	r4, [r4, #4]
 80039a6:	e7ac      	b.n	8003902 <_malloc_r+0x36>
 80039a8:	4634      	mov	r4, r6
 80039aa:	6876      	ldr	r6, [r6, #4]
 80039ac:	e7b4      	b.n	8003918 <_malloc_r+0x4c>
 80039ae:	4613      	mov	r3, r2
 80039b0:	e7cc      	b.n	800394c <_malloc_r+0x80>
 80039b2:	230c      	movs	r3, #12
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4638      	mov	r0, r7
 80039b8:	f000 f80e 	bl	80039d8 <__malloc_unlock>
 80039bc:	e797      	b.n	80038ee <_malloc_r+0x22>
 80039be:	6025      	str	r5, [r4, #0]
 80039c0:	e7dc      	b.n	800397c <_malloc_r+0xb0>
 80039c2:	605b      	str	r3, [r3, #4]
 80039c4:	deff      	udf	#255	; 0xff
 80039c6:	bf00      	nop
 80039c8:	200002bc 	.word	0x200002bc

080039cc <__malloc_lock>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__malloc_lock+0x8>)
 80039ce:	f7ff bf0f 	b.w	80037f0 <__retarget_lock_acquire_recursive>
 80039d2:	bf00      	nop
 80039d4:	200002b8 	.word	0x200002b8

080039d8 <__malloc_unlock>:
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <__malloc_unlock+0x8>)
 80039da:	f7ff bf0a 	b.w	80037f2 <__retarget_lock_release_recursive>
 80039de:	bf00      	nop
 80039e0:	200002b8 	.word	0x200002b8

080039e4 <__ssputs_r>:
 80039e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e8:	688e      	ldr	r6, [r1, #8]
 80039ea:	461f      	mov	r7, r3
 80039ec:	42be      	cmp	r6, r7
 80039ee:	680b      	ldr	r3, [r1, #0]
 80039f0:	4682      	mov	sl, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	4690      	mov	r8, r2
 80039f6:	d82c      	bhi.n	8003a52 <__ssputs_r+0x6e>
 80039f8:	898a      	ldrh	r2, [r1, #12]
 80039fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039fe:	d026      	beq.n	8003a4e <__ssputs_r+0x6a>
 8003a00:	6965      	ldr	r5, [r4, #20]
 8003a02:	6909      	ldr	r1, [r1, #16]
 8003a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a08:	eba3 0901 	sub.w	r9, r3, r1
 8003a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a10:	1c7b      	adds	r3, r7, #1
 8003a12:	444b      	add	r3, r9
 8003a14:	106d      	asrs	r5, r5, #1
 8003a16:	429d      	cmp	r5, r3
 8003a18:	bf38      	it	cc
 8003a1a:	461d      	movcc	r5, r3
 8003a1c:	0553      	lsls	r3, r2, #21
 8003a1e:	d527      	bpl.n	8003a70 <__ssputs_r+0x8c>
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7ff ff53 	bl	80038cc <_malloc_r>
 8003a26:	4606      	mov	r6, r0
 8003a28:	b360      	cbz	r0, 8003a84 <__ssputs_r+0xa0>
 8003a2a:	6921      	ldr	r1, [r4, #16]
 8003a2c:	464a      	mov	r2, r9
 8003a2e:	f000 faeb 	bl	8004008 <memcpy>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	6126      	str	r6, [r4, #16]
 8003a40:	6165      	str	r5, [r4, #20]
 8003a42:	444e      	add	r6, r9
 8003a44:	eba5 0509 	sub.w	r5, r5, r9
 8003a48:	6026      	str	r6, [r4, #0]
 8003a4a:	60a5      	str	r5, [r4, #8]
 8003a4c:	463e      	mov	r6, r7
 8003a4e:	42be      	cmp	r6, r7
 8003a50:	d900      	bls.n	8003a54 <__ssputs_r+0x70>
 8003a52:	463e      	mov	r6, r7
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	4632      	mov	r2, r6
 8003a58:	4641      	mov	r1, r8
 8003a5a:	f000 faab 	bl	8003fb4 <memmove>
 8003a5e:	68a3      	ldr	r3, [r4, #8]
 8003a60:	1b9b      	subs	r3, r3, r6
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	4433      	add	r3, r6
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	462a      	mov	r2, r5
 8003a72:	f000 fad7 	bl	8004024 <_realloc_r>
 8003a76:	4606      	mov	r6, r0
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d1e0      	bne.n	8003a3e <__ssputs_r+0x5a>
 8003a7c:	6921      	ldr	r1, [r4, #16]
 8003a7e:	4650      	mov	r0, sl
 8003a80:	f7ff feb8 	bl	80037f4 <_free_r>
 8003a84:	230c      	movs	r3, #12
 8003a86:	f8ca 3000 	str.w	r3, [sl]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295
 8003a96:	e7e9      	b.n	8003a6c <__ssputs_r+0x88>

08003a98 <_svfiprintf_r>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	4698      	mov	r8, r3
 8003a9e:	898b      	ldrh	r3, [r1, #12]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	b09d      	sub	sp, #116	; 0x74
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	d50e      	bpl.n	8003aca <_svfiprintf_r+0x32>
 8003aac:	690b      	ldr	r3, [r1, #16]
 8003aae:	b963      	cbnz	r3, 8003aca <_svfiprintf_r+0x32>
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	f7ff ff0b 	bl	80038cc <_malloc_r>
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	6128      	str	r0, [r5, #16]
 8003aba:	b920      	cbnz	r0, 8003ac6 <_svfiprintf_r+0x2e>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e0d0      	b.n	8003c68 <_svfiprintf_r+0x1d0>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	616b      	str	r3, [r5, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ace:	2320      	movs	r3, #32
 8003ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad8:	2330      	movs	r3, #48	; 0x30
 8003ada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c80 <_svfiprintf_r+0x1e8>
 8003ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ae2:	f04f 0901 	mov.w	r9, #1
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	469a      	mov	sl, r3
 8003aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aee:	b10a      	cbz	r2, 8003af4 <_svfiprintf_r+0x5c>
 8003af0:	2a25      	cmp	r2, #37	; 0x25
 8003af2:	d1f9      	bne.n	8003ae8 <_svfiprintf_r+0x50>
 8003af4:	ebba 0b04 	subs.w	fp, sl, r4
 8003af8:	d00b      	beq.n	8003b12 <_svfiprintf_r+0x7a>
 8003afa:	465b      	mov	r3, fp
 8003afc:	4622      	mov	r2, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	4638      	mov	r0, r7
 8003b02:	f7ff ff6f 	bl	80039e4 <__ssputs_r>
 8003b06:	3001      	adds	r0, #1
 8003b08:	f000 80a9 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b0e:	445a      	add	r2, fp
 8003b10:	9209      	str	r2, [sp, #36]	; 0x24
 8003b12:	f89a 3000 	ldrb.w	r3, [sl]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80a1 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b26:	f10a 0a01 	add.w	sl, sl, #1
 8003b2a:	9304      	str	r3, [sp, #16]
 8003b2c:	9307      	str	r3, [sp, #28]
 8003b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b32:	931a      	str	r3, [sp, #104]	; 0x68
 8003b34:	4654      	mov	r4, sl
 8003b36:	2205      	movs	r2, #5
 8003b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3c:	4850      	ldr	r0, [pc, #320]	; (8003c80 <_svfiprintf_r+0x1e8>)
 8003b3e:	f7fc fb57 	bl	80001f0 <memchr>
 8003b42:	9a04      	ldr	r2, [sp, #16]
 8003b44:	b9d8      	cbnz	r0, 8003b7e <_svfiprintf_r+0xe6>
 8003b46:	06d0      	lsls	r0, r2, #27
 8003b48:	bf44      	itt	mi
 8003b4a:	2320      	movmi	r3, #32
 8003b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b50:	0711      	lsls	r1, r2, #28
 8003b52:	bf44      	itt	mi
 8003b54:	232b      	movmi	r3, #43	; 0x2b
 8003b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b60:	d015      	beq.n	8003b8e <_svfiprintf_r+0xf6>
 8003b62:	9a07      	ldr	r2, [sp, #28]
 8003b64:	4654      	mov	r4, sl
 8003b66:	2000      	movs	r0, #0
 8003b68:	f04f 0c0a 	mov.w	ip, #10
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b72:	3b30      	subs	r3, #48	; 0x30
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d94d      	bls.n	8003c14 <_svfiprintf_r+0x17c>
 8003b78:	b1b0      	cbz	r0, 8003ba8 <_svfiprintf_r+0x110>
 8003b7a:	9207      	str	r2, [sp, #28]
 8003b7c:	e014      	b.n	8003ba8 <_svfiprintf_r+0x110>
 8003b7e:	eba0 0308 	sub.w	r3, r0, r8
 8003b82:	fa09 f303 	lsl.w	r3, r9, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	46a2      	mov	sl, r4
 8003b8c:	e7d2      	b.n	8003b34 <_svfiprintf_r+0x9c>
 8003b8e:	9b03      	ldr	r3, [sp, #12]
 8003b90:	1d19      	adds	r1, r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	9103      	str	r1, [sp, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfbb      	ittet	lt
 8003b9a:	425b      	neglt	r3, r3
 8003b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba0:	9307      	strge	r3, [sp, #28]
 8003ba2:	9307      	strlt	r3, [sp, #28]
 8003ba4:	bfb8      	it	lt
 8003ba6:	9204      	strlt	r2, [sp, #16]
 8003ba8:	7823      	ldrb	r3, [r4, #0]
 8003baa:	2b2e      	cmp	r3, #46	; 0x2e
 8003bac:	d10c      	bne.n	8003bc8 <_svfiprintf_r+0x130>
 8003bae:	7863      	ldrb	r3, [r4, #1]
 8003bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb2:	d134      	bne.n	8003c1e <_svfiprintf_r+0x186>
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	9203      	str	r2, [sp, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bfb8      	it	lt
 8003bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bc4:	3402      	adds	r4, #2
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c90 <_svfiprintf_r+0x1f8>
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	2203      	movs	r2, #3
 8003bd0:	4650      	mov	r0, sl
 8003bd2:	f7fc fb0d 	bl	80001f0 <memchr>
 8003bd6:	b138      	cbz	r0, 8003be8 <_svfiprintf_r+0x150>
 8003bd8:	9b04      	ldr	r3, [sp, #16]
 8003bda:	eba0 000a 	sub.w	r0, r0, sl
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	4082      	lsls	r2, r0
 8003be2:	4313      	orrs	r3, r2
 8003be4:	3401      	adds	r4, #1
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bec:	4825      	ldr	r0, [pc, #148]	; (8003c84 <_svfiprintf_r+0x1ec>)
 8003bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf2:	2206      	movs	r2, #6
 8003bf4:	f7fc fafc 	bl	80001f0 <memchr>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d038      	beq.n	8003c6e <_svfiprintf_r+0x1d6>
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <_svfiprintf_r+0x1f0>)
 8003bfe:	bb1b      	cbnz	r3, 8003c48 <_svfiprintf_r+0x1b0>
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	3307      	adds	r3, #7
 8003c04:	f023 0307 	bic.w	r3, r3, #7
 8003c08:	3308      	adds	r3, #8
 8003c0a:	9303      	str	r3, [sp, #12]
 8003c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0e:	4433      	add	r3, r6
 8003c10:	9309      	str	r3, [sp, #36]	; 0x24
 8003c12:	e768      	b.n	8003ae6 <_svfiprintf_r+0x4e>
 8003c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c18:	460c      	mov	r4, r1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	e7a6      	b.n	8003b6c <_svfiprintf_r+0xd4>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	3401      	adds	r4, #1
 8003c22:	9305      	str	r3, [sp, #20]
 8003c24:	4619      	mov	r1, r3
 8003c26:	f04f 0c0a 	mov.w	ip, #10
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c30:	3a30      	subs	r2, #48	; 0x30
 8003c32:	2a09      	cmp	r2, #9
 8003c34:	d903      	bls.n	8003c3e <_svfiprintf_r+0x1a6>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c6      	beq.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3a:	9105      	str	r1, [sp, #20]
 8003c3c:	e7c4      	b.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c42:	4604      	mov	r4, r0
 8003c44:	2301      	movs	r3, #1
 8003c46:	e7f0      	b.n	8003c2a <_svfiprintf_r+0x192>
 8003c48:	ab03      	add	r3, sp, #12
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <_svfiprintf_r+0x1f4>)
 8003c50:	a904      	add	r1, sp, #16
 8003c52:	4638      	mov	r0, r7
 8003c54:	f3af 8000 	nop.w
 8003c58:	1c42      	adds	r2, r0, #1
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	d1d6      	bne.n	8003c0c <_svfiprintf_r+0x174>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	065b      	lsls	r3, r3, #25
 8003c62:	f53f af2d 	bmi.w	8003ac0 <_svfiprintf_r+0x28>
 8003c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c68:	b01d      	add	sp, #116	; 0x74
 8003c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6e:	ab03      	add	r3, sp, #12
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	462a      	mov	r2, r5
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <_svfiprintf_r+0x1f4>)
 8003c76:	a904      	add	r1, sp, #16
 8003c78:	4638      	mov	r0, r7
 8003c7a:	f000 f879 	bl	8003d70 <_printf_i>
 8003c7e:	e7eb      	b.n	8003c58 <_svfiprintf_r+0x1c0>
 8003c80:	080040fc 	.word	0x080040fc
 8003c84:	08004106 	.word	0x08004106
 8003c88:	00000000 	.word	0x00000000
 8003c8c:	080039e5 	.word	0x080039e5
 8003c90:	08004102 	.word	0x08004102

08003c94 <_printf_common>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	4616      	mov	r6, r2
 8003c9a:	4699      	mov	r9, r3
 8003c9c:	688a      	ldr	r2, [r1, #8]
 8003c9e:	690b      	ldr	r3, [r1, #16]
 8003ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bfb8      	it	lt
 8003ca8:	4613      	movlt	r3, r2
 8003caa:	6033      	str	r3, [r6, #0]
 8003cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	b10a      	cbz	r2, 8003cba <_printf_common+0x26>
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	0699      	lsls	r1, r3, #26
 8003cbe:	bf42      	ittt	mi
 8003cc0:	6833      	ldrmi	r3, [r6, #0]
 8003cc2:	3302      	addmi	r3, #2
 8003cc4:	6033      	strmi	r3, [r6, #0]
 8003cc6:	6825      	ldr	r5, [r4, #0]
 8003cc8:	f015 0506 	ands.w	r5, r5, #6
 8003ccc:	d106      	bne.n	8003cdc <_printf_common+0x48>
 8003cce:	f104 0a19 	add.w	sl, r4, #25
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	6832      	ldr	r2, [r6, #0]
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	42ab      	cmp	r3, r5
 8003cda:	dc26      	bgt.n	8003d2a <_printf_common+0x96>
 8003cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ce0:	1e13      	subs	r3, r2, #0
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	bf18      	it	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	0692      	lsls	r2, r2, #26
 8003cea:	d42b      	bmi.n	8003d44 <_printf_common+0xb0>
 8003cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c0      	blx	r8
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d01e      	beq.n	8003d38 <_printf_common+0xa4>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	6922      	ldr	r2, [r4, #16]
 8003cfe:	f003 0306 	and.w	r3, r3, #6
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	bf02      	ittt	eq
 8003d06:	68e5      	ldreq	r5, [r4, #12]
 8003d08:	6833      	ldreq	r3, [r6, #0]
 8003d0a:	1aed      	subeq	r5, r5, r3
 8003d0c:	68a3      	ldr	r3, [r4, #8]
 8003d0e:	bf0c      	ite	eq
 8003d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d14:	2500      	movne	r5, #0
 8003d16:	4293      	cmp	r3, r2
 8003d18:	bfc4      	itt	gt
 8003d1a:	1a9b      	subgt	r3, r3, r2
 8003d1c:	18ed      	addgt	r5, r5, r3
 8003d1e:	2600      	movs	r6, #0
 8003d20:	341a      	adds	r4, #26
 8003d22:	42b5      	cmp	r5, r6
 8003d24:	d11a      	bne.n	8003d5c <_printf_common+0xc8>
 8003d26:	2000      	movs	r0, #0
 8003d28:	e008      	b.n	8003d3c <_printf_common+0xa8>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	4649      	mov	r1, r9
 8003d30:	4638      	mov	r0, r7
 8003d32:	47c0      	blx	r8
 8003d34:	3001      	adds	r0, #1
 8003d36:	d103      	bne.n	8003d40 <_printf_common+0xac>
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d40:	3501      	adds	r5, #1
 8003d42:	e7c6      	b.n	8003cd2 <_printf_common+0x3e>
 8003d44:	18e1      	adds	r1, r4, r3
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	2030      	movs	r0, #48	; 0x30
 8003d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d4e:	4422      	add	r2, r4
 8003d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d58:	3302      	adds	r3, #2
 8003d5a:	e7c7      	b.n	8003cec <_printf_common+0x58>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	4622      	mov	r2, r4
 8003d60:	4649      	mov	r1, r9
 8003d62:	4638      	mov	r0, r7
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d0e6      	beq.n	8003d38 <_printf_common+0xa4>
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7d9      	b.n	8003d22 <_printf_common+0x8e>
	...

08003d70 <_printf_i>:
 8003d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d74:	7e0f      	ldrb	r7, [r1, #24]
 8003d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d78:	2f78      	cmp	r7, #120	; 0x78
 8003d7a:	4691      	mov	r9, r2
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	469a      	mov	sl, r3
 8003d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d86:	d807      	bhi.n	8003d98 <_printf_i+0x28>
 8003d88:	2f62      	cmp	r7, #98	; 0x62
 8003d8a:	d80a      	bhi.n	8003da2 <_printf_i+0x32>
 8003d8c:	2f00      	cmp	r7, #0
 8003d8e:	f000 80d4 	beq.w	8003f3a <_printf_i+0x1ca>
 8003d92:	2f58      	cmp	r7, #88	; 0x58
 8003d94:	f000 80c0 	beq.w	8003f18 <_printf_i+0x1a8>
 8003d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003da0:	e03a      	b.n	8003e18 <_printf_i+0xa8>
 8003da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003da6:	2b15      	cmp	r3, #21
 8003da8:	d8f6      	bhi.n	8003d98 <_printf_i+0x28>
 8003daa:	a101      	add	r1, pc, #4	; (adr r1, 8003db0 <_printf_i+0x40>)
 8003dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e1d 	.word	0x08003e1d
 8003db8:	08003d99 	.word	0x08003d99
 8003dbc:	08003d99 	.word	0x08003d99
 8003dc0:	08003d99 	.word	0x08003d99
 8003dc4:	08003d99 	.word	0x08003d99
 8003dc8:	08003e1d 	.word	0x08003e1d
 8003dcc:	08003d99 	.word	0x08003d99
 8003dd0:	08003d99 	.word	0x08003d99
 8003dd4:	08003d99 	.word	0x08003d99
 8003dd8:	08003d99 	.word	0x08003d99
 8003ddc:	08003f21 	.word	0x08003f21
 8003de0:	08003e49 	.word	0x08003e49
 8003de4:	08003edb 	.word	0x08003edb
 8003de8:	08003d99 	.word	0x08003d99
 8003dec:	08003d99 	.word	0x08003d99
 8003df0:	08003f43 	.word	0x08003f43
 8003df4:	08003d99 	.word	0x08003d99
 8003df8:	08003e49 	.word	0x08003e49
 8003dfc:	08003d99 	.word	0x08003d99
 8003e00:	08003d99 	.word	0x08003d99
 8003e04:	08003ee3 	.word	0x08003ee3
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	602a      	str	r2, [r5, #0]
 8003e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e09f      	b.n	8003f5c <_printf_i+0x1ec>
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	0607      	lsls	r7, r0, #24
 8003e22:	f103 0104 	add.w	r1, r3, #4
 8003e26:	6029      	str	r1, [r5, #0]
 8003e28:	d501      	bpl.n	8003e2e <_printf_i+0xbe>
 8003e2a:	681e      	ldr	r6, [r3, #0]
 8003e2c:	e003      	b.n	8003e36 <_printf_i+0xc6>
 8003e2e:	0646      	lsls	r6, r0, #25
 8003e30:	d5fb      	bpl.n	8003e2a <_printf_i+0xba>
 8003e32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e36:	2e00      	cmp	r6, #0
 8003e38:	da03      	bge.n	8003e42 <_printf_i+0xd2>
 8003e3a:	232d      	movs	r3, #45	; 0x2d
 8003e3c:	4276      	negs	r6, r6
 8003e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e42:	485a      	ldr	r0, [pc, #360]	; (8003fac <_printf_i+0x23c>)
 8003e44:	230a      	movs	r3, #10
 8003e46:	e012      	b.n	8003e6e <_printf_i+0xfe>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	1d19      	adds	r1, r3, #4
 8003e4e:	6029      	str	r1, [r5, #0]
 8003e50:	0605      	lsls	r5, r0, #24
 8003e52:	d501      	bpl.n	8003e58 <_printf_i+0xe8>
 8003e54:	681e      	ldr	r6, [r3, #0]
 8003e56:	e002      	b.n	8003e5e <_printf_i+0xee>
 8003e58:	0641      	lsls	r1, r0, #25
 8003e5a:	d5fb      	bpl.n	8003e54 <_printf_i+0xe4>
 8003e5c:	881e      	ldrh	r6, [r3, #0]
 8003e5e:	4853      	ldr	r0, [pc, #332]	; (8003fac <_printf_i+0x23c>)
 8003e60:	2f6f      	cmp	r7, #111	; 0x6f
 8003e62:	bf0c      	ite	eq
 8003e64:	2308      	moveq	r3, #8
 8003e66:	230a      	movne	r3, #10
 8003e68:	2100      	movs	r1, #0
 8003e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e6e:	6865      	ldr	r5, [r4, #4]
 8003e70:	60a5      	str	r5, [r4, #8]
 8003e72:	2d00      	cmp	r5, #0
 8003e74:	bfa2      	ittt	ge
 8003e76:	6821      	ldrge	r1, [r4, #0]
 8003e78:	f021 0104 	bicge.w	r1, r1, #4
 8003e7c:	6021      	strge	r1, [r4, #0]
 8003e7e:	b90e      	cbnz	r6, 8003e84 <_printf_i+0x114>
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	d04b      	beq.n	8003f1c <_printf_i+0x1ac>
 8003e84:	4615      	mov	r5, r2
 8003e86:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e8a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e8e:	5dc7      	ldrb	r7, [r0, r7]
 8003e90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e94:	4637      	mov	r7, r6
 8003e96:	42bb      	cmp	r3, r7
 8003e98:	460e      	mov	r6, r1
 8003e9a:	d9f4      	bls.n	8003e86 <_printf_i+0x116>
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d10b      	bne.n	8003eb8 <_printf_i+0x148>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	07de      	lsls	r6, r3, #31
 8003ea4:	d508      	bpl.n	8003eb8 <_printf_i+0x148>
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	6861      	ldr	r1, [r4, #4]
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	bfde      	ittt	le
 8003eae:	2330      	movle	r3, #48	; 0x30
 8003eb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003eb8:	1b52      	subs	r2, r2, r5
 8003eba:	6122      	str	r2, [r4, #16]
 8003ebc:	f8cd a000 	str.w	sl, [sp]
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	aa03      	add	r2, sp, #12
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	f7ff fee4 	bl	8003c94 <_printf_common>
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d14a      	bne.n	8003f66 <_printf_i+0x1f6>
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	b004      	add	sp, #16
 8003ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f043 0320 	orr.w	r3, r3, #32
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	4833      	ldr	r0, [pc, #204]	; (8003fb0 <_printf_i+0x240>)
 8003ee4:	2778      	movs	r7, #120	; 0x78
 8003ee6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	6829      	ldr	r1, [r5, #0]
 8003eee:	061f      	lsls	r7, r3, #24
 8003ef0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ef4:	d402      	bmi.n	8003efc <_printf_i+0x18c>
 8003ef6:	065f      	lsls	r7, r3, #25
 8003ef8:	bf48      	it	mi
 8003efa:	b2b6      	uxthmi	r6, r6
 8003efc:	07df      	lsls	r7, r3, #31
 8003efe:	bf48      	it	mi
 8003f00:	f043 0320 	orrmi.w	r3, r3, #32
 8003f04:	6029      	str	r1, [r5, #0]
 8003f06:	bf48      	it	mi
 8003f08:	6023      	strmi	r3, [r4, #0]
 8003f0a:	b91e      	cbnz	r6, 8003f14 <_printf_i+0x1a4>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	f023 0320 	bic.w	r3, r3, #32
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	2310      	movs	r3, #16
 8003f16:	e7a7      	b.n	8003e68 <_printf_i+0xf8>
 8003f18:	4824      	ldr	r0, [pc, #144]	; (8003fac <_printf_i+0x23c>)
 8003f1a:	e7e4      	b.n	8003ee6 <_printf_i+0x176>
 8003f1c:	4615      	mov	r5, r2
 8003f1e:	e7bd      	b.n	8003e9c <_printf_i+0x12c>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	6826      	ldr	r6, [r4, #0]
 8003f24:	6961      	ldr	r1, [r4, #20]
 8003f26:	1d18      	adds	r0, r3, #4
 8003f28:	6028      	str	r0, [r5, #0]
 8003f2a:	0635      	lsls	r5, r6, #24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	d501      	bpl.n	8003f34 <_printf_i+0x1c4>
 8003f30:	6019      	str	r1, [r3, #0]
 8003f32:	e002      	b.n	8003f3a <_printf_i+0x1ca>
 8003f34:	0670      	lsls	r0, r6, #25
 8003f36:	d5fb      	bpl.n	8003f30 <_printf_i+0x1c0>
 8003f38:	8019      	strh	r1, [r3, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6123      	str	r3, [r4, #16]
 8003f3e:	4615      	mov	r5, r2
 8003f40:	e7bc      	b.n	8003ebc <_printf_i+0x14c>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	1d1a      	adds	r2, r3, #4
 8003f46:	602a      	str	r2, [r5, #0]
 8003f48:	681d      	ldr	r5, [r3, #0]
 8003f4a:	6862      	ldr	r2, [r4, #4]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f7fc f94e 	bl	80001f0 <memchr>
 8003f54:	b108      	cbz	r0, 8003f5a <_printf_i+0x1ea>
 8003f56:	1b40      	subs	r0, r0, r5
 8003f58:	6060      	str	r0, [r4, #4]
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f64:	e7aa      	b.n	8003ebc <_printf_i+0x14c>
 8003f66:	6923      	ldr	r3, [r4, #16]
 8003f68:	462a      	mov	r2, r5
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	47d0      	blx	sl
 8003f70:	3001      	adds	r0, #1
 8003f72:	d0ad      	beq.n	8003ed0 <_printf_i+0x160>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	079b      	lsls	r3, r3, #30
 8003f78:	d413      	bmi.n	8003fa2 <_printf_i+0x232>
 8003f7a:	68e0      	ldr	r0, [r4, #12]
 8003f7c:	9b03      	ldr	r3, [sp, #12]
 8003f7e:	4298      	cmp	r0, r3
 8003f80:	bfb8      	it	lt
 8003f82:	4618      	movlt	r0, r3
 8003f84:	e7a6      	b.n	8003ed4 <_printf_i+0x164>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4632      	mov	r2, r6
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	47d0      	blx	sl
 8003f90:	3001      	adds	r0, #1
 8003f92:	d09d      	beq.n	8003ed0 <_printf_i+0x160>
 8003f94:	3501      	adds	r5, #1
 8003f96:	68e3      	ldr	r3, [r4, #12]
 8003f98:	9903      	ldr	r1, [sp, #12]
 8003f9a:	1a5b      	subs	r3, r3, r1
 8003f9c:	42ab      	cmp	r3, r5
 8003f9e:	dcf2      	bgt.n	8003f86 <_printf_i+0x216>
 8003fa0:	e7eb      	b.n	8003f7a <_printf_i+0x20a>
 8003fa2:	2500      	movs	r5, #0
 8003fa4:	f104 0619 	add.w	r6, r4, #25
 8003fa8:	e7f5      	b.n	8003f96 <_printf_i+0x226>
 8003faa:	bf00      	nop
 8003fac:	0800410d 	.word	0x0800410d
 8003fb0:	0800411e 	.word	0x0800411e

08003fb4 <memmove>:
 8003fb4:	4288      	cmp	r0, r1
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	eb01 0402 	add.w	r4, r1, r2
 8003fbc:	d902      	bls.n	8003fc4 <memmove+0x10>
 8003fbe:	4284      	cmp	r4, r0
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	d807      	bhi.n	8003fd4 <memmove+0x20>
 8003fc4:	1e43      	subs	r3, r0, #1
 8003fc6:	42a1      	cmp	r1, r4
 8003fc8:	d008      	beq.n	8003fdc <memmove+0x28>
 8003fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fd2:	e7f8      	b.n	8003fc6 <memmove+0x12>
 8003fd4:	4402      	add	r2, r0
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	428a      	cmp	r2, r1
 8003fda:	d100      	bne.n	8003fde <memmove+0x2a>
 8003fdc:	bd10      	pop	{r4, pc}
 8003fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fe6:	e7f7      	b.n	8003fd8 <memmove+0x24>

08003fe8 <_sbrk_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4d06      	ldr	r5, [pc, #24]	; (8004004 <_sbrk_r+0x1c>)
 8003fec:	2300      	movs	r3, #0
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fc fe4c 	bl	8000c90 <_sbrk>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_sbrk_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_sbrk_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	200002b4 	.word	0x200002b4

08004008 <memcpy>:
 8004008:	440a      	add	r2, r1
 800400a:	4291      	cmp	r1, r2
 800400c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004010:	d100      	bne.n	8004014 <memcpy+0xc>
 8004012:	4770      	bx	lr
 8004014:	b510      	push	{r4, lr}
 8004016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800401e:	4291      	cmp	r1, r2
 8004020:	d1f9      	bne.n	8004016 <memcpy+0xe>
 8004022:	bd10      	pop	{r4, pc}

08004024 <_realloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	4680      	mov	r8, r0
 800402a:	4614      	mov	r4, r2
 800402c:	460e      	mov	r6, r1
 800402e:	b921      	cbnz	r1, 800403a <_realloc_r+0x16>
 8004030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004034:	4611      	mov	r1, r2
 8004036:	f7ff bc49 	b.w	80038cc <_malloc_r>
 800403a:	b92a      	cbnz	r2, 8004048 <_realloc_r+0x24>
 800403c:	f7ff fbda 	bl	80037f4 <_free_r>
 8004040:	4625      	mov	r5, r4
 8004042:	4628      	mov	r0, r5
 8004044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004048:	f000 f81b 	bl	8004082 <_malloc_usable_size_r>
 800404c:	4284      	cmp	r4, r0
 800404e:	4607      	mov	r7, r0
 8004050:	d802      	bhi.n	8004058 <_realloc_r+0x34>
 8004052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004056:	d812      	bhi.n	800407e <_realloc_r+0x5a>
 8004058:	4621      	mov	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fc36 	bl	80038cc <_malloc_r>
 8004060:	4605      	mov	r5, r0
 8004062:	2800      	cmp	r0, #0
 8004064:	d0ed      	beq.n	8004042 <_realloc_r+0x1e>
 8004066:	42bc      	cmp	r4, r7
 8004068:	4622      	mov	r2, r4
 800406a:	4631      	mov	r1, r6
 800406c:	bf28      	it	cs
 800406e:	463a      	movcs	r2, r7
 8004070:	f7ff ffca 	bl	8004008 <memcpy>
 8004074:	4631      	mov	r1, r6
 8004076:	4640      	mov	r0, r8
 8004078:	f7ff fbbc 	bl	80037f4 <_free_r>
 800407c:	e7e1      	b.n	8004042 <_realloc_r+0x1e>
 800407e:	4635      	mov	r5, r6
 8004080:	e7df      	b.n	8004042 <_realloc_r+0x1e>

08004082 <_malloc_usable_size_r>:
 8004082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004086:	1f18      	subs	r0, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	bfbc      	itt	lt
 800408c:	580b      	ldrlt	r3, [r1, r0]
 800408e:	18c0      	addlt	r0, r0, r3
 8004090:	4770      	bx	lr
	...

08004094 <_init>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr

080040a0 <_fini>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr
