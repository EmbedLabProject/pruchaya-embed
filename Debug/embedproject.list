
embedproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08004a30  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004a30  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a075  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b61  00000000  00000000  0002a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000677  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001629f  00000000  00000000  0002cb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b252  00000000  00000000  00042e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090017  00000000  00000000  0004e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027f0  00000000  00000000  000de098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e0888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004938 	.word	0x08004938

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004938 	.word	0x08004938

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0d6      	sub	sp, #344	; 0x158
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fc4b 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f8dd 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 fa35 	bl	80011f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8a:	f000 fa13 	bl	80011b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d8e:	f000 f9e7 	bl	8001160 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d92:	f000 f93f 	bl	8001014 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char buf[256];
  double maxLight = 4000;
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	4b61      	ldr	r3, [pc, #388]	; (8000f20 <main+0x1a8>)
 8000d9c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  double minLight = 0;
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  double maxHumid = 1350;
 8000dac:	a35a      	add	r3, pc, #360	; (adr r3, 8000f18 <main+0x1a0>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  double minHumid = 0;
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  int dutycycleLight = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  int dutycycleHumid = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  int dutycycle3 = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int dutycycle4 = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  double cLight;
  double pLight = maxLight - minLight;
 8000dda:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000dde:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8000de2:	f7ff fa59 	bl	8000298 <__aeabi_dsub>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  double cHumid;
  double pHumid = maxHumid -  minHumid;
 8000dee:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000df2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8000df6:	f7ff fa4f 	bl	8000298 <__aeabi_dsub>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) resultDMA, channelCount);
 8000e02:	2304      	movs	r3, #4
 8000e04:	461a      	mov	r2, r3
 8000e06:	4947      	ldr	r1, [pc, #284]	; (8000f24 <main+0x1ac>)
 8000e08:	4847      	ldr	r0, [pc, #284]	; (8000f28 <main+0x1b0>)
 8000e0a:	f000 fcdf 	bl	80017cc <HAL_ADC_Start_DMA>
	  while (conversionComplete == 0) { //do something while current data is not recieve from sensor
 8000e0e:	bf00      	nop
 8000e10:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <main+0x1b4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0fb      	beq.n	8000e10 <main+0x98>

	  }
	  conversionComplete = 0;
 8000e18:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <main+0x1b4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
	  cLight = maxLight - resultDMA[0];
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <main+0x1ac>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb85 	bl	8000534 <__aeabi_i2d>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8000e32:	f7ff fa31 	bl	8000298 <__aeabi_dsub>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	  dutycycleLight = (1 - cLight/pLight)*100;
 8000e3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000e42:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000e46:	f7ff fd09 	bl	800085c <__aeabi_ddiv>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	f04f 0000 	mov.w	r0, #0
 8000e52:	4937      	ldr	r1, [pc, #220]	; (8000f30 <main+0x1b8>)
 8000e54:	f7ff fa20 	bl	8000298 <__aeabi_dsub>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <main+0x1bc>)
 8000e66:	f7ff fbcf 	bl	8000608 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fddb 	bl	8000a2c <__aeabi_d2iz>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  cHumid = maxHumid - resultDMA[1];
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <main+0x1ac>)
 8000e7e:	885b      	ldrh	r3, [r3, #2]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb56 	bl	8000534 <__aeabi_i2d>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8000e90:	f7ff fa02 	bl	8000298 <__aeabi_dsub>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	  dutycycleHumid = (1- cHumid/pHumid)*100;
 8000e9c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000ea0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8000ea4:	f7ff fcda 	bl	800085c <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	f04f 0000 	mov.w	r0, #0
 8000eb0:	491f      	ldr	r1, [pc, #124]	; (8000f30 <main+0x1b8>)
 8000eb2:	f7ff f9f1 	bl	8000298 <__aeabi_dsub>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <main+0x1bc>)
 8000ec4:	f7ff fba0 	bl	8000608 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fdac 	bl	8000a2c <__aeabi_d2iz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  sprintf(buf, "light = %d %c,humid = %d %c \r\n" , dutycycleLight, '%',dutycycleHumid, '%');
 8000eda:	4638      	mov	r0, r7
 8000edc:	2325      	movs	r3, #37	; 0x25
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2325      	movs	r3, #37	; 0x25
 8000ee8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000eec:	4912      	ldr	r1, [pc, #72]	; (8000f38 <main+0x1c0>)
 8000eee:	f003 f87f 	bl	8003ff0 <siprintf>
	  if (maxHumidSensor < resultDMA[1]) {
	  	  maxHumidSensor = resultDMA[1];
	  }
	  sprintf (buf, "minL = %d, maxL = %d, minH = %d ,maxH = %d\r\n" , minLightSensor, maxLightSensor, minHumidSensor, maxHumidSensor);
	  */
	  HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f973 	bl	80001e0 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4639      	mov	r1, r7
 8000f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <main+0x1c4>)
 8000f06:	f002 fcb7 	bl	8003878 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	; 0x64
 8000f0c:	f000 fbf6 	bl	80016fc <HAL_Delay>
  {
 8000f10:	e777      	b.n	8000e02 <main+0x8a>
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40951800 	.word	0x40951800
 8000f20:	40af4000 	.word	0x40af4000
 8000f24:	20000168 	.word	0x20000168
 8000f28:	20000078 	.word	0x20000078
 8000f2c:	20000170 	.word	0x20000170
 8000f30:	3ff00000 	.word	0x3ff00000
 8000f34:	40590000 	.word	0x40590000
 8000f38:	08004950 	.word	0x08004950
 8000f3c:	20000120 	.word	0x20000120

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f86e 	bl	8004030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <SystemClock_Config+0xd0>)
 8000f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 ff6e 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fd2:	f000 f98d 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 f9d0 	bl	8003398 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ffe:	f000 f977 	bl	80012f0 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001028:	463b      	mov	r3, r7
 800102a:	2220      	movs	r2, #32
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f002 fffe 	bl	8004030 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001036:	4a47      	ldr	r2, [pc, #284]	; (8001154 <MX_ADC1_Init+0x140>)
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <MX_ADC1_Init+0x13c>)
 800103c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001040:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <MX_ADC1_Init+0x13c>)
 800104a:	2201      	movs	r2, #1
 800104c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <MX_ADC1_Init+0x13c>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001064:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <MX_ADC1_Init+0x144>)
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b39      	ldr	r3, [pc, #228]	; (8001150 <MX_ADC1_Init+0x13c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001070:	2204      	movs	r2, #4
 8001072:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b36      	ldr	r3, [pc, #216]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b34      	ldr	r3, [pc, #208]	; (8001150 <MX_ADC1_Init+0x13c>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001084:	f000 fb5e 	bl	8001744 <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800108e:	f000 f92f 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4619      	mov	r1, r3
 80010a4:	482a      	ldr	r0, [pc, #168]	; (8001150 <MX_ADC1_Init+0x13c>)
 80010a6:	f000 fc95 	bl	80019d4 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80010b0:	f000 f91e 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4619      	mov	r1, r3
 80010c2:	4823      	ldr	r0, [pc, #140]	; (8001150 <MX_ADC1_Init+0x13c>)
 80010c4:	f000 fc86 	bl	80019d4 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010ce:	f000 f90f 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80010d6:	2303      	movs	r3, #3
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4619      	mov	r1, r3
 80010e0:	481b      	ldr	r0, [pc, #108]	; (8001150 <MX_ADC1_Init+0x13c>)
 80010e2:	f000 fc77 	bl	80019d4 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80010ec:	f000 f900 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010f0:	2306      	movs	r3, #6
 80010f2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001100:	f000 fc68 	bl	80019d4 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800110a:	f000 f8f1 	bl	80012f0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_ADC1_Init+0x148>)
 8001124:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_ADC1_Init+0x13c>)
 8001138:	f000 fefc 	bl	8001f34 <HAL_ADCEx_InjectedConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001142:	f000 f8d5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000078 	.word	0x20000078
 8001154:	40012000 	.word	0x40012000
 8001158:	0f000001 	.word	0x0f000001
 800115c:	000f0001 	.word	0x000f0001

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f002 fb1e 	bl	80037d8 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f8a5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000120 	.word	0x20000120
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_DMA_Init+0x3c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <MX_DMA_Init+0x3c>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_DMA_Init+0x3c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2038      	movs	r0, #56	; 0x38
 80011dc:	f001 f91f 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011e0:	2038      	movs	r0, #56	; 0x38
 80011e2:	f001 f938 	bl	8002456 <HAL_NVIC_EnableIRQ>

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a2c      	ldr	r2, [pc, #176]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <MX_GPIO_Init+0xd0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_GPIO_Init+0xd0>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_GPIO_Init+0xd0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	4812      	ldr	r0, [pc, #72]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001280:	f001 fdf8 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_GPIO_Init+0xd8>)
 800129c:	f001 fc66 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012a0:	2320      	movs	r3, #32
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_GPIO_Init+0xd4>)
 80012b8:	f001 fc58 	bl	8002b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020800 	.word	0x40020800

080012d0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	conversionComplete = 1;
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <HAL_ADC_ConvCpltCallback+0x1c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000170 	.word	0x20000170

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <HAL_ADC_MspInit+0xdc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d157      	bne.n	800141e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_ADC_MspInit+0xe0>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <HAL_ADC_MspInit+0xe0>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_ADC_MspInit+0xe0>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_ADC_MspInit+0xe0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_ADC_MspInit+0xe0>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_ADC_MspInit+0xe0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 80013a6:	2353      	movs	r3, #83	; 0x53
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <HAL_ADC_MspInit+0xe4>)
 80013ba:	f001 fbd7 	bl	8002b6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_ADC_MspInit+0xec>)
 80013c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 8001404:	f001 f842 	bl	800248c <HAL_DMA_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800140e:	f7ff ff6f 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40012000 	.word	0x40012000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	200000c0 	.word	0x200000c0
 8001438:	40026410 	.word	0x40026410

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_UART_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12b      	bne.n	80014b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_UART_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001496:	230c      	movs	r3, #12
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a6:	2307      	movs	r3, #7
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <HAL_UART_MspInit+0x8c>)
 80014b2:	f001 fb5b 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40004400 	.word	0x40004400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f8d0 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA2_Stream0_IRQHandler+0x10>)
 8001526:	f001 f8b7 	bl	8002698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000c0 	.word	0x200000c0

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f002 fd6c 	bl	8004040 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000174 	.word	0x20000174
 800159c:	200002c8 	.word	0x200002c8

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f002 fd2b 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fbbf 	bl	8000d78 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001608:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 800160c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001610:	200002c4 	.word	0x200002c4

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 fee1 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe56 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fef9 	bl	8002472 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 fec1 	bl	800241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000178 	.word	0x20000178

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000178 	.word	0x20000178

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e033      	b.n	80017c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fdf2 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178a:	f023 0302 	bic.w	r3, r3, #2
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fa4e 	bl	8001c38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
 80017b2:	e001      	b.n	80017b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Start_DMA+0x1e>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0ce      	b.n	8001988 <HAL_ADC_Start_DMA+0x1bc>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d018      	beq.n	8001832 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001810:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_ADC_Start_DMA+0x1c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a5f      	ldr	r2, [pc, #380]	; (8001994 <HAL_ADC_Start_DMA+0x1c8>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9a      	lsrs	r2, r3, #18
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	3b01      	subs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001840:	d107      	bne.n	8001852 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001850:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b01      	cmp	r3, #1
 800185e:	f040 8086 	bne.w	800196e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800188c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a0:	d106      	bne.n	80018b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f023 0206 	bic.w	r2, r3, #6
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44
 80018ae:	e002      	b.n	80018b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_ADC_Start_DMA+0x1cc>)
 80018c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	4a35      	ldr	r2, [pc, #212]	; (800199c <HAL_ADC_Start_DMA+0x1d0>)
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <HAL_ADC_Start_DMA+0x1d4>)
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	4a33      	ldr	r2, [pc, #204]	; (80019a4 <HAL_ADC_Start_DMA+0x1d8>)
 80018d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001902:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	334c      	adds	r3, #76	; 0x4c
 800190e:	4619      	mov	r1, r3
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f000 fe68 	bl	80025e8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10f      	bne.n	8001944 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d129      	bne.n	8001986 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	e020      	b.n	8001986 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_ADC_Start_DMA+0x1dc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11b      	bne.n	8001986 <HAL_ADC_Start_DMA+0x1ba>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d114      	bne.n	8001986 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e00b      	b.n	8001986 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	431bde83 	.word	0x431bde83
 8001998:	40012300 	.word	0x40012300
 800199c:	08001e31 	.word	0x08001e31
 80019a0:	08001eeb 	.word	0x08001eeb
 80019a4:	08001f07 	.word	0x08001f07
 80019a8:	40012000 	.word	0x40012000

080019ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1c>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e113      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x244>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d925      	bls.n	8001a4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68d9      	ldr	r1, [r3, #12]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	3b1e      	subs	r3, #30
 8001a16:	2207      	movs	r2, #7
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	400a      	ands	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	4603      	mov	r3, r0
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4403      	add	r3, r0
 8001a3e:	3b1e      	subs	r3, #30
 8001a40:	409a      	lsls	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	e022      	b.n	8001a92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6919      	ldr	r1, [r3, #16]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	2207      	movs	r2, #7
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6919      	ldr	r1, [r3, #16]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4403      	add	r3, r0
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d824      	bhi.n	8001ae4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b05      	subs	r3, #5
 8001aac:	221f      	movs	r2, #31
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	400a      	ands	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b05      	subs	r3, #5
 8001ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae2:	e04c      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	d824      	bhi.n	8001b36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b23      	subs	r3, #35	; 0x23
 8001afe:	221f      	movs	r2, #31
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43da      	mvns	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b23      	subs	r3, #35	; 0x23
 8001b28:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
 8001b34:	e023      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b41      	subs	r3, #65	; 0x41
 8001b48:	221f      	movs	r2, #31
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	400a      	ands	r2, r1
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b41      	subs	r3, #65	; 0x41
 8001b72:	fa00 f203 	lsl.w	r2, r0, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_ADC_ConfigChannel+0x250>)
 8001b80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <HAL_ADC_ConfigChannel+0x254>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d10f      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1d8>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b12      	cmp	r3, #18
 8001b92:	d10b      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_ADC_ConfigChannel+0x254>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x23a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_ADC_ConfigChannel+0x258>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x1f4>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b11      	cmp	r3, #17
 8001bc6:	d122      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_ADC_ConfigChannel+0x258>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d111      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_ADC_ConfigChannel+0x25c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_ADC_ConfigChannel+0x260>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	0c9a      	lsrs	r2, r3, #18
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40012300 	.word	0x40012300
 8001c28:	40012000 	.word	0x40012000
 8001c2c:	10000012 	.word	0x10000012
 8001c30:	20000000 	.word	0x20000000
 8001c34:	431bde83 	.word	0x431bde83

08001c38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c40:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <ADC_Init+0x1f0>)
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	021a      	lsls	r2, r3, #8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <ADC_Init+0x1f4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d022      	beq.n	8001d16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	e00f      	b.n	8001d36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0202 	bic.w	r2, r2, #2
 8001d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6899      	ldr	r1, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e1b      	ldrb	r3, [r3, #24]
 8001d50:	005a      	lsls	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	035a      	lsls	r2, r3, #13
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e007      	b.n	8001dac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001daa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	051a      	lsls	r2, r3, #20
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6899      	ldr	r1, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dee:	025a      	lsls	r2, r3, #9
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	029a      	lsls	r2, r3, #10
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40012300 	.word	0x40012300
 8001e2c:	0f000001 	.word	0x0f000001

08001e30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d13c      	bne.n	8001ec4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d12b      	bne.n	8001ebc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d127      	bne.n	8001ebc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d119      	bne.n	8001ebc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0220 	bic.w	r2, r2, #32
 8001e96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fa07 	bl	80012d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ec2:	e00e      	b.n	8001ee2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fd75 	bl	80019c0 <HAL_ADC_ErrorCallback>
}
 8001ed6:	e004      	b.n	8001ee2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff fd57 	bl	80019ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f043 0204 	orr.w	r2, r3, #4
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff fd4a 	bl	80019c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e17e      	b.n	800224a <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d925      	bls.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	3b1e      	subs	r3, #30
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	e022      	b.n	8001fee <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4403      	add	r3, r0
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	3b01      	subs	r3, #1
 800200a:	051a      	lsls	r2, r3, #20
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3303      	adds	r3, #3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	221f      	movs	r2, #31
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43da      	mvns	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	400a      	ands	r2, r1
 8002044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	4618      	mov	r0, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3303      	adds	r3, #3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	fa00 f203 	lsl.w	r2, r0, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a75      	ldr	r2, [pc, #468]	; (8002258 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d022      	beq.n	80020cc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6899      	ldr	r1, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	e00f      	b.n	80020ec <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80020da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020ea:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	7d5b      	ldrb	r3, [r3, #21]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	e007      	b.n	8002116 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	7d1b      	ldrb	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	e007      	b.n	8002140 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213e:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d02e      	beq.n	80021a6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002148:	2b03      	cmp	r3, #3
 800214a:	d840      	bhi.n	80021ce <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800214c:	2b01      	cmp	r3, #1
 800214e:	d002      	beq.n	8002156 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002150:	2b02      	cmp	r3, #2
 8002152:	d014      	beq.n	800217e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002154:	e03b      	b.n	80021ce <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6959      	ldr	r1, [r3, #20]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	615a      	str	r2, [r3, #20]
      break;
 800217c:	e03b      	b.n	80021f6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800218c:	f023 030f 	bic.w	r3, r3, #15
 8002190:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6999      	ldr	r1, [r3, #24]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	619a      	str	r2, [r3, #24]
      break;
 80021a4:	e027      	b.n	80021f6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021b4:	f023 030f 	bic.w	r3, r3, #15
 80021b8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69d9      	ldr	r1, [r3, #28]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	61da      	str	r2, [r3, #28]
      break;
 80021cc:	e013      	b.n	80021f6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021dc:	f023 030f 	bic.w	r3, r3, #15
 80021e0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a19      	ldr	r1, [r3, #32]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	621a      	str	r2, [r3, #32]
      break;
 80021f4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b12      	cmp	r3, #18
 800220a:	d105      	bne.n	8002218 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a10      	ldr	r2, [pc, #64]	; (8002260 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10e      	bne.n	8002240 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b11      	cmp	r3, #17
 8002232:	d105      	bne.n	8002240 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	000f0001 	.word	0x000f0001
 800225c:	40012300 	.word	0x40012300
 8002260:	40012000 	.word	0x40012000
 8002264:	10000012 	.word	0x10000012

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff8e 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff29 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff3e 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff8e 	bl	800235c <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff31 	bl	80022cc <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa2 	bl	80023c4 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff f924 	bl	80016e4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e099      	b.n	80025dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c8:	e00f      	b.n	80024ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ca:	f7ff f90b 	bl	80016e4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d908      	bls.n	80024ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e078      	b.n	80025dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e8      	bne.n	80024ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_DMA_Init+0x158>)
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2b04      	cmp	r3, #4
 8002542:	d107      	bne.n	8002554 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4313      	orrs	r3, r2
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2b04      	cmp	r3, #4
 800257c:	d117      	bne.n	80025ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fa6f 	bl	8002a74 <DMA_CheckFifoParam>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025aa:	2301      	movs	r3, #1
 80025ac:	e016      	b.n	80025dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa26 	bl	8002a08 <DMA_CalcBaseAndBitshift>
 80025bc:	4603      	mov	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	223f      	movs	r2, #63	; 0x3f
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	f010803f 	.word	0xf010803f

080025e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_DMA_Start_IT+0x26>
 800260a:	2302      	movs	r3, #2
 800260c:	e040      	b.n	8002690 <HAL_DMA_Start_IT+0xa8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d12f      	bne.n	8002682 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f9b8 	bl	80029ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	223f      	movs	r2, #63	; 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0216 	orr.w	r2, r2, #22
 8002656:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0208 	orr.w	r2, r2, #8
 800266e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e005      	b.n	800268e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026a4:	4b8e      	ldr	r3, [pc, #568]	; (80028e0 <HAL_DMA_IRQHandler+0x248>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a8e      	ldr	r2, [pc, #568]	; (80028e4 <HAL_DMA_IRQHandler+0x24c>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0a9b      	lsrs	r3, r3, #10
 80026b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	2208      	movs	r2, #8
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01a      	beq.n	8002704 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2208      	movs	r2, #8
 80026f2:	409a      	lsls	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	2201      	movs	r2, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d012      	beq.n	800273a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	2201      	movs	r2, #1
 8002728:	409a      	lsls	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	2204      	movs	r2, #4
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d012      	beq.n	8002770 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2204      	movs	r2, #4
 800275e:	409a      	lsls	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	2210      	movs	r2, #16
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d043      	beq.n	8002808 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d03c      	beq.n	8002808 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2210      	movs	r2, #16
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d018      	beq.n	80027da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d024      	beq.n	8002808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
 80027c6:	e01f      	b.n	8002808 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
 80027d8:	e016      	b.n	8002808 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0208 	bic.w	r2, r2, #8
 80027f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	2220      	movs	r2, #32
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 808f 	beq.w	8002938 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8087 	beq.w	8002938 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2220      	movs	r2, #32
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b05      	cmp	r3, #5
 8002840:	d136      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0216 	bic.w	r2, r2, #22
 8002850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002860:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <HAL_DMA_IRQHandler+0x1da>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0208 	bic.w	r2, r2, #8
 8002880:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	223f      	movs	r2, #63	; 0x3f
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d07e      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
        }
        return;
 80028ae:	e079      	b.n	80029a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01d      	beq.n	80028fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d031      	beq.n	8002938 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e02c      	b.n	8002938 <HAL_DMA_IRQHandler+0x2a0>
 80028de:	bf00      	nop
 80028e0:	20000000 	.word	0x20000000
 80028e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e01e      	b.n	8002938 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0210 	bic.w	r2, r2, #16
 8002916:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	2b00      	cmp	r3, #0
 800293e:	d032      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d022      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2205      	movs	r2, #5
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	3301      	adds	r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	d307      	bcc.n	8002980 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f2      	bne.n	8002964 <HAL_DMA_IRQHandler+0x2cc>
 800297e:	e000      	b.n	8002982 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002980:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
 80029a2:	e000      	b.n	80029a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029a4:	bf00      	nop
    }
  }
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d108      	bne.n	80029ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ea:	e007      	b.n	80029fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3b10      	subs	r3, #16
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <DMA_CalcBaseAndBitshift+0x64>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <DMA_CalcBaseAndBitshift+0x68>)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d909      	bls.n	8002a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	1d1a      	adds	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	659a      	str	r2, [r3, #88]	; 0x58
 8002a48:	e007      	b.n	8002a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	aaaaaaab 	.word	0xaaaaaaab
 8002a70:	08004988 	.word	0x08004988

08002a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11f      	bne.n	8002ace <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d856      	bhi.n	8002b42 <DMA_CheckFifoParam+0xce>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <DMA_CheckFifoParam+0x28>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002abf 	.word	0x08002abf
 8002aa4:	08002aad 	.word	0x08002aad
 8002aa8:	08002b43 	.word	0x08002b43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d046      	beq.n	8002b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abc:	e043      	b.n	8002b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac6:	d140      	bne.n	8002b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e03d      	b.n	8002b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad6:	d121      	bne.n	8002b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d837      	bhi.n	8002b4e <DMA_CheckFifoParam+0xda>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <DMA_CheckFifoParam+0x70>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002afb 	.word	0x08002afb
 8002aec:	08002af5 	.word	0x08002af5
 8002af0:	08002b0d 	.word	0x08002b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      break;
 8002af8:	e030      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d025      	beq.n	8002b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0a:	e022      	b.n	8002b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b14:	d11f      	bne.n	8002b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b1a:	e01c      	b.n	8002b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d903      	bls.n	8002b2a <DMA_CheckFifoParam+0xb6>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d003      	beq.n	8002b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b28:	e018      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2e:	e015      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00e      	beq.n	8002b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e00b      	b.n	8002b5a <DMA_CheckFifoParam+0xe6>
      break;
 8002b42:	bf00      	nop
 8002b44:	e00a      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e008      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e006      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e004      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e159      	b.n	8002e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	f040 8148 	bne.w	8002e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d005      	beq.n	8002bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d130      	bne.n	8002c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 0201 	and.w	r2, r3, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d017      	beq.n	8002c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d123      	bne.n	8002cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3208      	adds	r2, #8
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	69b9      	ldr	r1, [r7, #24]
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a2 	beq.w	8002e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d00:	6453      	str	r3, [r2, #68]	; 0x44
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d0e:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_GPIO_Init+0x2ec>)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a49      	ldr	r2, [pc, #292]	; (8002e5c <HAL_GPIO_Init+0x2f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0x202>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a48      	ldr	r2, [pc, #288]	; (8002e60 <HAL_GPIO_Init+0x2f4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_GPIO_Init+0x1fe>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a47      	ldr	r2, [pc, #284]	; (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00d      	beq.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <HAL_GPIO_Init+0x2fc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <HAL_GPIO_Init+0x1f6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a45      	ldr	r2, [pc, #276]	; (8002e6c <HAL_GPIO_Init+0x300>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_GPIO_Init+0x1f2>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e008      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d5e:	2307      	movs	r3, #7
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d80:	4935      	ldr	r1, [pc, #212]	; (8002e58 <HAL_GPIO_Init+0x2ec>)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e06:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e30:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <HAL_GPIO_Init+0x304>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	f67f aea2 	bls.w	8002b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40013c00 	.word	0x40013c00

08002e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e84:	787b      	ldrb	r3, [r7, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e90:	e003      	b.n	8002e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	619a      	str	r2, [r3, #24]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e267      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00c      	beq.n	8002eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d112      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b7e      	ldr	r3, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e242      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x74>
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a75      	ldr	r2, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6c      	ldr	r2, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f40:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a68      	ldr	r2, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe fbc0 	bl	80016e4 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe fbbc 	bl	80016e4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e207      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fbac 	bl	80016e4 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fba8 	bl	80016e4 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1f3      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11c      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1c7      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4937      	ldr	r1, [pc, #220]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e03a      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_OscConfig+0x244>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fb61 	bl	80016e4 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe fb5d 	bl	80016e4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e1a8      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4925      	ldr	r1, [pc, #148]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_OscConfig+0x244>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fb40 	bl	80016e4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003068:	f7fe fb3c 	bl	80016e4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e187      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d036      	beq.n	8003100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x248>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe fb20 	bl	80016e4 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe fb1c 	bl	80016e4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e167      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x200>
 80030c6:	e01b      	b.n	8003100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x248>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fb09 	bl	80016e4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e00e      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe fb05 	bl	80016e4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d907      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e150      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
 80030f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ea      	bne.n	80030d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8097 	beq.w	800323c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b81      	ldr	r3, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	4b7d      	ldr	r3, [pc, #500]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a7c      	ldr	r2, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b77      	ldr	r3, [pc, #476]	; (800331c <HAL_RCC_OscConfig+0x474>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b74      	ldr	r3, [pc, #464]	; (800331c <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a73      	ldr	r2, [pc, #460]	; (800331c <HAL_RCC_OscConfig+0x474>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7fe fac5 	bl	80016e4 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7fe fac1 	bl	80016e4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e10c      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x474>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x2ea>
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e01c      	b.n	80031cc <HAL_RCC_OscConfig+0x324>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x30c>
 800319a:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5b      	ldr	r2, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x324>
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a57      	ldr	r2, [pc, #348]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fa86 	bl	80016e4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe fa82 	bl	80016e4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0cb      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ee      	beq.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7fe fa70 	bl	80016e4 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe fa6c 	bl	80016e4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0b5      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ee      	bne.n	8003208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a1 	beq.w	8003388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	d05c      	beq.n	800330c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d141      	bne.n	80032de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fa40 	bl	80016e4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fa3c 	bl	80016e4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e087      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	3b01      	subs	r3, #1
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	491b      	ldr	r1, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x478>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fa15 	bl	80016e4 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032be:	f7fe fa11 	bl	80016e4 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e05c      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x416>
 80032dc:	e054      	b.n	8003388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe f9fe 	bl	80016e4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe f9fa 	bl	80016e4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e045      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
 800330a:	e03d      	b.n	8003388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e038      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	40007000 	.word	0x40007000
 8003320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4ec>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d028      	beq.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d121      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d11a      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0cc      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d90c      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b65      	ldr	r3, [pc, #404]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800340e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d044      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d119      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d003      	beq.n	8003456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e067      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4934      	ldr	r1, [pc, #208]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7fe f92c 	bl	80016e4 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fe f928 	bl	80016e4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e04f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d20c      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe f88c 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
 8003558:	08004970 	.word	0x08004970
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003568:	b094      	sub	sp, #80	; 0x50
 800356a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	647b      	str	r3, [r7, #68]	; 0x44
 8003570:	2300      	movs	r3, #0
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	2300      	movs	r3, #0
 8003576:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	4b79      	ldr	r3, [pc, #484]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d00d      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003588:	2b08      	cmp	r3, #8
 800358a:	f200 80e1 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x1ec>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x34>
 8003592:	2b04      	cmp	r3, #4
 8003594:	d003      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x3a>
 8003596:	e0db      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800359c:	e0db      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359e:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_GetSysClockFreq+0x208>)
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a2:	e0d8      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a4:	4b6f      	ldr	r3, [pc, #444]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ae:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d063      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	2300      	movs	r3, #0
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
 80035d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035d6:	4622      	mov	r2, r4
 80035d8:	462b      	mov	r3, r5
 80035da:	f04f 0000 	mov.w	r0, #0
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	0159      	lsls	r1, r3, #5
 80035e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e8:	0150      	lsls	r0, r2, #5
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4621      	mov	r1, r4
 80035f0:	1a51      	subs	r1, r2, r1
 80035f2:	6139      	str	r1, [r7, #16]
 80035f4:	4629      	mov	r1, r5
 80035f6:	eb63 0301 	sbc.w	r3, r3, r1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003608:	4659      	mov	r1, fp
 800360a:	018b      	lsls	r3, r1, #6
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003612:	4651      	mov	r1, sl
 8003614:	018a      	lsls	r2, r1, #6
 8003616:	4651      	mov	r1, sl
 8003618:	ebb2 0801 	subs.w	r8, r2, r1
 800361c:	4659      	mov	r1, fp
 800361e:	eb63 0901 	sbc.w	r9, r3, r1
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800362e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003636:	4690      	mov	r8, r2
 8003638:	4699      	mov	r9, r3
 800363a:	4623      	mov	r3, r4
 800363c:	eb18 0303 	adds.w	r3, r8, r3
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	462b      	mov	r3, r5
 8003644:	eb49 0303 	adc.w	r3, r9, r3
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003656:	4629      	mov	r1, r5
 8003658:	024b      	lsls	r3, r1, #9
 800365a:	4621      	mov	r1, r4
 800365c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003660:	4621      	mov	r1, r4
 8003662:	024a      	lsls	r2, r1, #9
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	2200      	movs	r2, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
 800366e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003674:	f7fd fa02 	bl	8000a7c <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003680:	e058      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	2200      	movs	r2, #0
 800368a:	4618      	mov	r0, r3
 800368c:	4611      	mov	r1, r2
 800368e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	2300      	movs	r3, #0
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	f04f 0000 	mov.w	r0, #0
 80036a4:	f04f 0100 	mov.w	r1, #0
 80036a8:	0159      	lsls	r1, r3, #5
 80036aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ae:	0150      	lsls	r0, r2, #5
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4641      	mov	r1, r8
 80036b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ba:	4649      	mov	r1, r9
 80036bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036d4:	ebb2 040a 	subs.w	r4, r2, sl
 80036d8:	eb63 050b 	sbc.w	r5, r3, fp
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	00eb      	lsls	r3, r5, #3
 80036e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ea:	00e2      	lsls	r2, r4, #3
 80036ec:	4614      	mov	r4, r2
 80036ee:	461d      	mov	r5, r3
 80036f0:	4643      	mov	r3, r8
 80036f2:	18e3      	adds	r3, r4, r3
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	464b      	mov	r3, r9
 80036f8:	eb45 0303 	adc.w	r3, r5, r3
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370a:	4629      	mov	r1, r5
 800370c:	028b      	lsls	r3, r1, #10
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003714:	4621      	mov	r1, r4
 8003716:	028a      	lsls	r2, r1, #10
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	61fa      	str	r2, [r7, #28]
 8003724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003728:	f7fd f9a8 	bl	8000a7c <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003758:	4618      	mov	r0, r3
 800375a:	3750      	adds	r7, #80	; 0x50
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0a9b      	lsrs	r3, r3, #10
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08004980 	.word	0x08004980

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b4:	f7ff ffdc 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0b5b      	lsrs	r3, r3, #13
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	08004980 	.word	0x08004980

080037d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e042      	b.n	8003870 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fe1c 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800381a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f973 	bl	8003b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b20      	cmp	r3, #32
 8003896:	d175      	bne.n	8003984 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_UART_Transmit+0x2c>
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e06e      	b.n	8003986 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2221      	movs	r2, #33	; 0x21
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b6:	f7fd ff15 	bl	80016e4 <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	88fa      	ldrh	r2, [r7, #6]
 80038c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d108      	bne.n	80038e4 <HAL_UART_Transmit+0x6c>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e003      	b.n	80038ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038ec:	e02e      	b.n	800394c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f848 	bl	800398e <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e03a      	b.n	8003986 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3302      	adds	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e007      	b.n	800393e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1cb      	bne.n	80038ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2140      	movs	r1, #64	; 0x40
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f814 	bl	800398e <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e006      	b.n	8003986 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399e:	e03b      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d037      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fd fe9c 	bl	80016e4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <UART_WaitOnFlagUntilTimeout+0x30>
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e03a      	b.n	8003a38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d023      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d020      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d01d      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d116      	bne.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f81d 	bl	8003a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e00f      	b.n	8003a38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d0b4      	beq.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b095      	sub	sp, #84	; 0x54
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a68:	643a      	str	r2, [r7, #64]	; 0x40
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e5      	bne.n	8003a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e5      	bne.n	8003a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d119      	bne.n	8003aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad8:	61ba      	str	r2, [r7, #24]
 8003ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6979      	ldr	r1, [r7, #20]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e5      	bne.n	8003ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003afa:	bf00      	nop
 8003afc:	3754      	adds	r7, #84	; 0x54
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b0c:	b0c0      	sub	sp, #256	; 0x100
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	68d9      	ldr	r1, [r3, #12]
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	ea40 0301 	orr.w	r3, r0, r1
 8003b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b60:	f021 010c 	bic.w	r1, r1, #12
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	6999      	ldr	r1, [r3, #24]
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	ea40 0301 	orr.w	r3, r0, r1
 8003b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <UART_SetConfig+0x2cc>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d005      	beq.n	8003ba8 <UART_SetConfig+0xa0>
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <UART_SetConfig+0x2d0>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d104      	bne.n	8003bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba8:	f7ff fe02 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8003bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bb0:	e003      	b.n	8003bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f7ff fde9 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8003bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc4:	f040 810c 	bne.w	8003de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	1891      	adds	r1, r2, r2
 8003be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003be2:	415b      	adcs	r3, r3
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bea:	4621      	mov	r1, r4
 8003bec:	eb12 0801 	adds.w	r8, r2, r1
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb43 0901 	adc.w	r9, r3, r1
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0a:	4690      	mov	r8, r2
 8003c0c:	4699      	mov	r9, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	eb18 0303 	adds.w	r3, r8, r3
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c18:	462b      	mov	r3, r5
 8003c1a:	eb49 0303 	adc.w	r3, r9, r3
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c36:	460b      	mov	r3, r1
 8003c38:	18db      	adds	r3, r3, r3
 8003c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	eb42 0303 	adc.w	r3, r2, r3
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c4c:	f7fc ff16 	bl	8000a7c <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003c56:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	011c      	lsls	r4, r3, #4
 8003c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c80:	4641      	mov	r1, r8
 8003c82:	eb12 0a01 	adds.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb43 0b01 	adc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca0:	4692      	mov	sl, r2
 8003ca2:	469b      	mov	fp, r3
 8003ca4:	4643      	mov	r3, r8
 8003ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8003caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	18db      	adds	r3, r3, r3
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ce2:	f7fc fecb 	bl	8000a7c <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003cee:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2264      	movs	r2, #100	; 0x64
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	1acb      	subs	r3, r1, r3
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003d04:	fba3 2302 	umull	r2, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d10:	441c      	add	r4, r3
 8003d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6339      	str	r1, [r7, #48]	; 0x30
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d68:	464b      	mov	r3, r9
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d88:	460b      	mov	r3, r1
 8003d8a:	18db      	adds	r3, r3, r3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	4613      	mov	r3, r2
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d9e:	f7fc fe6d 	bl	8000a7c <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	; 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 0207 	and.w	r2, r3, #7
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4422      	add	r2, r4
 8003dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dd0:	e106      	b.n	8003fe0 <UART_SetConfig+0x4d8>
 8003dd2:	bf00      	nop
 8003dd4:	40011000 	.word	0x40011000
 8003dd8:	40011400 	.word	0x40011400
 8003ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003df2:	4642      	mov	r2, r8
 8003df4:	464b      	mov	r3, r9
 8003df6:	1891      	adds	r1, r2, r2
 8003df8:	6239      	str	r1, [r7, #32]
 8003dfa:	415b      	adcs	r3, r3
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e02:	4641      	mov	r1, r8
 8003e04:	1854      	adds	r4, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0501 	adc.w	r5, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e28:	464b      	mov	r3, r9
 8003e2a:	eb45 0303 	adc.w	r3, r5, r3
 8003e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e4e:	4629      	mov	r1, r5
 8003e50:	008b      	lsls	r3, r1, #2
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e58:	4621      	mov	r1, r4
 8003e5a:	008a      	lsls	r2, r1, #2
 8003e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e60:	f7fc fe0c 	bl	8000a7c <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4b60      	ldr	r3, [pc, #384]	; (8003fec <UART_SetConfig+0x4e4>)
 8003e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	011c      	lsls	r4, r3, #4
 8003e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	61b9      	str	r1, [r7, #24]
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e94:	4641      	mov	r1, r8
 8003e96:	1851      	adds	r1, r2, r1
 8003e98:	6139      	str	r1, [r7, #16]
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	414b      	adcs	r3, r1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eac:	4659      	mov	r1, fp
 8003eae:	00cb      	lsls	r3, r1, #3
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	00ca      	lsls	r2, r1, #3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec8:	464b      	mov	r3, r9
 8003eca:	460a      	mov	r2, r1
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eec:	4649      	mov	r1, r9
 8003eee:	008b      	lsls	r3, r1, #2
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	008a      	lsls	r2, r1, #2
 8003efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003efe:	f7fc fdbd 	bl	8000a7c <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <UART_SetConfig+0x4e4>)
 8003f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2264      	movs	r2, #100	; 0x64
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	1acb      	subs	r3, r1, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a33      	ldr	r2, [pc, #204]	; (8003fec <UART_SetConfig+0x4e4>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f28:	441c      	add	r4, r3
 8003f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2e:	2200      	movs	r2, #0
 8003f30:	673b      	str	r3, [r7, #112]	; 0x70
 8003f32:	677a      	str	r2, [r7, #116]	; 0x74
 8003f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	1891      	adds	r1, r2, r2
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	415b      	adcs	r3, r3
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f48:	4641      	mov	r1, r8
 8003f4a:	1851      	adds	r1, r2, r1
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	4649      	mov	r1, r9
 8003f50:	414b      	adcs	r3, r1
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f60:	4659      	mov	r1, fp
 8003f62:	00cb      	lsls	r3, r1, #3
 8003f64:	4651      	mov	r1, sl
 8003f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	00ca      	lsls	r2, r1, #3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	4642      	mov	r2, r8
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	460a      	mov	r2, r1
 8003f7e:	eb42 0303 	adc.w	r3, r2, r3
 8003f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f8e:	667a      	str	r2, [r7, #100]	; 0x64
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	008a      	lsls	r2, r1, #2
 8003faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fae:	f7fc fd65 	bl	8000a7c <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <UART_SetConfig+0x4e4>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	; 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	3332      	adds	r3, #50	; 0x32
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <UART_SetConfig+0x4e4>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fec:	51eb851f 	.word	0x51eb851f

08003ff0 <siprintf>:
 8003ff0:	b40e      	push	{r1, r2, r3}
 8003ff2:	b500      	push	{lr}
 8003ff4:	b09c      	sub	sp, #112	; 0x70
 8003ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	9006      	str	r0, [sp, #24]
 8003ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004000:	4809      	ldr	r0, [pc, #36]	; (8004028 <siprintf+0x38>)
 8004002:	9107      	str	r1, [sp, #28]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	4909      	ldr	r1, [pc, #36]	; (800402c <siprintf+0x3c>)
 8004008:	f853 2b04 	ldr.w	r2, [r3], #4
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	a902      	add	r1, sp, #8
 8004014:	f000 f992 	bl	800433c <_svfiprintf_r>
 8004018:	9b02      	ldr	r3, [sp, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	b01c      	add	sp, #112	; 0x70
 8004020:	f85d eb04 	ldr.w	lr, [sp], #4
 8004024:	b003      	add	sp, #12
 8004026:	4770      	bx	lr
 8004028:	20000058 	.word	0x20000058
 800402c:	ffff0208 	.word	0xffff0208

08004030 <memset>:
 8004030:	4402      	add	r2, r0
 8004032:	4603      	mov	r3, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	d100      	bne.n	800403a <memset+0xa>
 8004038:	4770      	bx	lr
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e7f9      	b.n	8004034 <memset+0x4>

08004040 <__errno>:
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <__errno+0x8>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000058 	.word	0x20000058

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4d0d      	ldr	r5, [pc, #52]	; (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2600      	movs	r6, #0
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4d0b      	ldr	r5, [pc, #44]	; (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	; (8004090 <__libc_init_array+0x44>)
 8004060:	f000 fc6a 	bl	8004938 <_init>
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2600      	movs	r6, #0
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f855 3b04 	ldr.w	r3, [r5], #4
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f855 3b04 	ldr.w	r3, [r5], #4
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	080049cc 	.word	0x080049cc
 8004088:	080049cc 	.word	0x080049cc
 800408c:	080049cc 	.word	0x080049cc
 8004090:	080049d0 	.word	0x080049d0

08004094 <__retarget_lock_acquire_recursive>:
 8004094:	4770      	bx	lr

08004096 <__retarget_lock_release_recursive>:
 8004096:	4770      	bx	lr

08004098 <_free_r>:
 8004098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800409a:	2900      	cmp	r1, #0
 800409c:	d044      	beq.n	8004128 <_free_r+0x90>
 800409e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a2:	9001      	str	r0, [sp, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f1a1 0404 	sub.w	r4, r1, #4
 80040aa:	bfb8      	it	lt
 80040ac:	18e4      	addlt	r4, r4, r3
 80040ae:	f000 f8df 	bl	8004270 <__malloc_lock>
 80040b2:	4a1e      	ldr	r2, [pc, #120]	; (800412c <_free_r+0x94>)
 80040b4:	9801      	ldr	r0, [sp, #4]
 80040b6:	6813      	ldr	r3, [r2, #0]
 80040b8:	b933      	cbnz	r3, 80040c8 <_free_r+0x30>
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	6014      	str	r4, [r2, #0]
 80040be:	b003      	add	sp, #12
 80040c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040c4:	f000 b8da 	b.w	800427c <__malloc_unlock>
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	d908      	bls.n	80040de <_free_r+0x46>
 80040cc:	6825      	ldr	r5, [r4, #0]
 80040ce:	1961      	adds	r1, r4, r5
 80040d0:	428b      	cmp	r3, r1
 80040d2:	bf01      	itttt	eq
 80040d4:	6819      	ldreq	r1, [r3, #0]
 80040d6:	685b      	ldreq	r3, [r3, #4]
 80040d8:	1949      	addeq	r1, r1, r5
 80040da:	6021      	streq	r1, [r4, #0]
 80040dc:	e7ed      	b.n	80040ba <_free_r+0x22>
 80040de:	461a      	mov	r2, r3
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	b10b      	cbz	r3, 80040e8 <_free_r+0x50>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d9fa      	bls.n	80040de <_free_r+0x46>
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	1855      	adds	r5, r2, r1
 80040ec:	42a5      	cmp	r5, r4
 80040ee:	d10b      	bne.n	8004108 <_free_r+0x70>
 80040f0:	6824      	ldr	r4, [r4, #0]
 80040f2:	4421      	add	r1, r4
 80040f4:	1854      	adds	r4, r2, r1
 80040f6:	42a3      	cmp	r3, r4
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	d1e0      	bne.n	80040be <_free_r+0x26>
 80040fc:	681c      	ldr	r4, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	6053      	str	r3, [r2, #4]
 8004102:	440c      	add	r4, r1
 8004104:	6014      	str	r4, [r2, #0]
 8004106:	e7da      	b.n	80040be <_free_r+0x26>
 8004108:	d902      	bls.n	8004110 <_free_r+0x78>
 800410a:	230c      	movs	r3, #12
 800410c:	6003      	str	r3, [r0, #0]
 800410e:	e7d6      	b.n	80040be <_free_r+0x26>
 8004110:	6825      	ldr	r5, [r4, #0]
 8004112:	1961      	adds	r1, r4, r5
 8004114:	428b      	cmp	r3, r1
 8004116:	bf04      	itt	eq
 8004118:	6819      	ldreq	r1, [r3, #0]
 800411a:	685b      	ldreq	r3, [r3, #4]
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	bf04      	itt	eq
 8004120:	1949      	addeq	r1, r1, r5
 8004122:	6021      	streq	r1, [r4, #0]
 8004124:	6054      	str	r4, [r2, #4]
 8004126:	e7ca      	b.n	80040be <_free_r+0x26>
 8004128:	b003      	add	sp, #12
 800412a:	bd30      	pop	{r4, r5, pc}
 800412c:	200002bc 	.word	0x200002bc

08004130 <sbrk_aligned>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4e0e      	ldr	r6, [pc, #56]	; (800416c <sbrk_aligned+0x3c>)
 8004134:	460c      	mov	r4, r1
 8004136:	6831      	ldr	r1, [r6, #0]
 8004138:	4605      	mov	r5, r0
 800413a:	b911      	cbnz	r1, 8004142 <sbrk_aligned+0x12>
 800413c:	f000 fba6 	bl	800488c <_sbrk_r>
 8004140:	6030      	str	r0, [r6, #0]
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 fba1 	bl	800488c <_sbrk_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	d00a      	beq.n	8004164 <sbrk_aligned+0x34>
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d007      	beq.n	8004168 <sbrk_aligned+0x38>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fb96 	bl	800488c <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d101      	bne.n	8004168 <sbrk_aligned+0x38>
 8004164:	f04f 34ff 	mov.w	r4, #4294967295
 8004168:	4620      	mov	r0, r4
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	200002c0 	.word	0x200002c0

08004170 <_malloc_r>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	1ccd      	adds	r5, r1, #3
 8004176:	f025 0503 	bic.w	r5, r5, #3
 800417a:	3508      	adds	r5, #8
 800417c:	2d0c      	cmp	r5, #12
 800417e:	bf38      	it	cc
 8004180:	250c      	movcc	r5, #12
 8004182:	2d00      	cmp	r5, #0
 8004184:	4607      	mov	r7, r0
 8004186:	db01      	blt.n	800418c <_malloc_r+0x1c>
 8004188:	42a9      	cmp	r1, r5
 800418a:	d905      	bls.n	8004198 <_malloc_r+0x28>
 800418c:	230c      	movs	r3, #12
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	2600      	movs	r6, #0
 8004192:	4630      	mov	r0, r6
 8004194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800426c <_malloc_r+0xfc>
 800419c:	f000 f868 	bl	8004270 <__malloc_lock>
 80041a0:	f8d8 3000 	ldr.w	r3, [r8]
 80041a4:	461c      	mov	r4, r3
 80041a6:	bb5c      	cbnz	r4, 8004200 <_malloc_r+0x90>
 80041a8:	4629      	mov	r1, r5
 80041aa:	4638      	mov	r0, r7
 80041ac:	f7ff ffc0 	bl	8004130 <sbrk_aligned>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	4604      	mov	r4, r0
 80041b4:	d155      	bne.n	8004262 <_malloc_r+0xf2>
 80041b6:	f8d8 4000 	ldr.w	r4, [r8]
 80041ba:	4626      	mov	r6, r4
 80041bc:	2e00      	cmp	r6, #0
 80041be:	d145      	bne.n	800424c <_malloc_r+0xdc>
 80041c0:	2c00      	cmp	r4, #0
 80041c2:	d048      	beq.n	8004256 <_malloc_r+0xe6>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	4631      	mov	r1, r6
 80041c8:	4638      	mov	r0, r7
 80041ca:	eb04 0903 	add.w	r9, r4, r3
 80041ce:	f000 fb5d 	bl	800488c <_sbrk_r>
 80041d2:	4581      	cmp	r9, r0
 80041d4:	d13f      	bne.n	8004256 <_malloc_r+0xe6>
 80041d6:	6821      	ldr	r1, [r4, #0]
 80041d8:	1a6d      	subs	r5, r5, r1
 80041da:	4629      	mov	r1, r5
 80041dc:	4638      	mov	r0, r7
 80041de:	f7ff ffa7 	bl	8004130 <sbrk_aligned>
 80041e2:	3001      	adds	r0, #1
 80041e4:	d037      	beq.n	8004256 <_malloc_r+0xe6>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	442b      	add	r3, r5
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	f8d8 3000 	ldr.w	r3, [r8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d038      	beq.n	8004266 <_malloc_r+0xf6>
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	42a2      	cmp	r2, r4
 80041f8:	d12b      	bne.n	8004252 <_malloc_r+0xe2>
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	e00f      	b.n	8004220 <_malloc_r+0xb0>
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	1b52      	subs	r2, r2, r5
 8004204:	d41f      	bmi.n	8004246 <_malloc_r+0xd6>
 8004206:	2a0b      	cmp	r2, #11
 8004208:	d917      	bls.n	800423a <_malloc_r+0xca>
 800420a:	1961      	adds	r1, r4, r5
 800420c:	42a3      	cmp	r3, r4
 800420e:	6025      	str	r5, [r4, #0]
 8004210:	bf18      	it	ne
 8004212:	6059      	strne	r1, [r3, #4]
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	bf08      	it	eq
 8004218:	f8c8 1000 	streq.w	r1, [r8]
 800421c:	5162      	str	r2, [r4, r5]
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	4638      	mov	r0, r7
 8004222:	f104 060b 	add.w	r6, r4, #11
 8004226:	f000 f829 	bl	800427c <__malloc_unlock>
 800422a:	f026 0607 	bic.w	r6, r6, #7
 800422e:	1d23      	adds	r3, r4, #4
 8004230:	1af2      	subs	r2, r6, r3
 8004232:	d0ae      	beq.n	8004192 <_malloc_r+0x22>
 8004234:	1b9b      	subs	r3, r3, r6
 8004236:	50a3      	str	r3, [r4, r2]
 8004238:	e7ab      	b.n	8004192 <_malloc_r+0x22>
 800423a:	42a3      	cmp	r3, r4
 800423c:	6862      	ldr	r2, [r4, #4]
 800423e:	d1dd      	bne.n	80041fc <_malloc_r+0x8c>
 8004240:	f8c8 2000 	str.w	r2, [r8]
 8004244:	e7ec      	b.n	8004220 <_malloc_r+0xb0>
 8004246:	4623      	mov	r3, r4
 8004248:	6864      	ldr	r4, [r4, #4]
 800424a:	e7ac      	b.n	80041a6 <_malloc_r+0x36>
 800424c:	4634      	mov	r4, r6
 800424e:	6876      	ldr	r6, [r6, #4]
 8004250:	e7b4      	b.n	80041bc <_malloc_r+0x4c>
 8004252:	4613      	mov	r3, r2
 8004254:	e7cc      	b.n	80041f0 <_malloc_r+0x80>
 8004256:	230c      	movs	r3, #12
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4638      	mov	r0, r7
 800425c:	f000 f80e 	bl	800427c <__malloc_unlock>
 8004260:	e797      	b.n	8004192 <_malloc_r+0x22>
 8004262:	6025      	str	r5, [r4, #0]
 8004264:	e7dc      	b.n	8004220 <_malloc_r+0xb0>
 8004266:	605b      	str	r3, [r3, #4]
 8004268:	deff      	udf	#255	; 0xff
 800426a:	bf00      	nop
 800426c:	200002bc 	.word	0x200002bc

08004270 <__malloc_lock>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__malloc_lock+0x8>)
 8004272:	f7ff bf0f 	b.w	8004094 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	200002b8 	.word	0x200002b8

0800427c <__malloc_unlock>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <__malloc_unlock+0x8>)
 800427e:	f7ff bf0a 	b.w	8004096 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	200002b8 	.word	0x200002b8

08004288 <__ssputs_r>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	688e      	ldr	r6, [r1, #8]
 800428e:	461f      	mov	r7, r3
 8004290:	42be      	cmp	r6, r7
 8004292:	680b      	ldr	r3, [r1, #0]
 8004294:	4682      	mov	sl, r0
 8004296:	460c      	mov	r4, r1
 8004298:	4690      	mov	r8, r2
 800429a:	d82c      	bhi.n	80042f6 <__ssputs_r+0x6e>
 800429c:	898a      	ldrh	r2, [r1, #12]
 800429e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042a2:	d026      	beq.n	80042f2 <__ssputs_r+0x6a>
 80042a4:	6965      	ldr	r5, [r4, #20]
 80042a6:	6909      	ldr	r1, [r1, #16]
 80042a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ac:	eba3 0901 	sub.w	r9, r3, r1
 80042b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042b4:	1c7b      	adds	r3, r7, #1
 80042b6:	444b      	add	r3, r9
 80042b8:	106d      	asrs	r5, r5, #1
 80042ba:	429d      	cmp	r5, r3
 80042bc:	bf38      	it	cc
 80042be:	461d      	movcc	r5, r3
 80042c0:	0553      	lsls	r3, r2, #21
 80042c2:	d527      	bpl.n	8004314 <__ssputs_r+0x8c>
 80042c4:	4629      	mov	r1, r5
 80042c6:	f7ff ff53 	bl	8004170 <_malloc_r>
 80042ca:	4606      	mov	r6, r0
 80042cc:	b360      	cbz	r0, 8004328 <__ssputs_r+0xa0>
 80042ce:	6921      	ldr	r1, [r4, #16]
 80042d0:	464a      	mov	r2, r9
 80042d2:	f000 faeb 	bl	80048ac <memcpy>
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	6126      	str	r6, [r4, #16]
 80042e4:	6165      	str	r5, [r4, #20]
 80042e6:	444e      	add	r6, r9
 80042e8:	eba5 0509 	sub.w	r5, r5, r9
 80042ec:	6026      	str	r6, [r4, #0]
 80042ee:	60a5      	str	r5, [r4, #8]
 80042f0:	463e      	mov	r6, r7
 80042f2:	42be      	cmp	r6, r7
 80042f4:	d900      	bls.n	80042f8 <__ssputs_r+0x70>
 80042f6:	463e      	mov	r6, r7
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	4632      	mov	r2, r6
 80042fc:	4641      	mov	r1, r8
 80042fe:	f000 faab 	bl	8004858 <memmove>
 8004302:	68a3      	ldr	r3, [r4, #8]
 8004304:	1b9b      	subs	r3, r3, r6
 8004306:	60a3      	str	r3, [r4, #8]
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	4433      	add	r3, r6
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2000      	movs	r0, #0
 8004310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004314:	462a      	mov	r2, r5
 8004316:	f000 fad7 	bl	80048c8 <_realloc_r>
 800431a:	4606      	mov	r6, r0
 800431c:	2800      	cmp	r0, #0
 800431e:	d1e0      	bne.n	80042e2 <__ssputs_r+0x5a>
 8004320:	6921      	ldr	r1, [r4, #16]
 8004322:	4650      	mov	r0, sl
 8004324:	f7ff feb8 	bl	8004098 <_free_r>
 8004328:	230c      	movs	r3, #12
 800432a:	f8ca 3000 	str.w	r3, [sl]
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	e7e9      	b.n	8004310 <__ssputs_r+0x88>

0800433c <_svfiprintf_r>:
 800433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004340:	4698      	mov	r8, r3
 8004342:	898b      	ldrh	r3, [r1, #12]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	b09d      	sub	sp, #116	; 0x74
 8004348:	4607      	mov	r7, r0
 800434a:	460d      	mov	r5, r1
 800434c:	4614      	mov	r4, r2
 800434e:	d50e      	bpl.n	800436e <_svfiprintf_r+0x32>
 8004350:	690b      	ldr	r3, [r1, #16]
 8004352:	b963      	cbnz	r3, 800436e <_svfiprintf_r+0x32>
 8004354:	2140      	movs	r1, #64	; 0x40
 8004356:	f7ff ff0b 	bl	8004170 <_malloc_r>
 800435a:	6028      	str	r0, [r5, #0]
 800435c:	6128      	str	r0, [r5, #16]
 800435e:	b920      	cbnz	r0, 800436a <_svfiprintf_r+0x2e>
 8004360:	230c      	movs	r3, #12
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	f04f 30ff 	mov.w	r0, #4294967295
 8004368:	e0d0      	b.n	800450c <_svfiprintf_r+0x1d0>
 800436a:	2340      	movs	r3, #64	; 0x40
 800436c:	616b      	str	r3, [r5, #20]
 800436e:	2300      	movs	r3, #0
 8004370:	9309      	str	r3, [sp, #36]	; 0x24
 8004372:	2320      	movs	r3, #32
 8004374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004378:	f8cd 800c 	str.w	r8, [sp, #12]
 800437c:	2330      	movs	r3, #48	; 0x30
 800437e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004524 <_svfiprintf_r+0x1e8>
 8004382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004386:	f04f 0901 	mov.w	r9, #1
 800438a:	4623      	mov	r3, r4
 800438c:	469a      	mov	sl, r3
 800438e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004392:	b10a      	cbz	r2, 8004398 <_svfiprintf_r+0x5c>
 8004394:	2a25      	cmp	r2, #37	; 0x25
 8004396:	d1f9      	bne.n	800438c <_svfiprintf_r+0x50>
 8004398:	ebba 0b04 	subs.w	fp, sl, r4
 800439c:	d00b      	beq.n	80043b6 <_svfiprintf_r+0x7a>
 800439e:	465b      	mov	r3, fp
 80043a0:	4622      	mov	r2, r4
 80043a2:	4629      	mov	r1, r5
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff ff6f 	bl	8004288 <__ssputs_r>
 80043aa:	3001      	adds	r0, #1
 80043ac:	f000 80a9 	beq.w	8004502 <_svfiprintf_r+0x1c6>
 80043b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b2:	445a      	add	r2, fp
 80043b4:	9209      	str	r2, [sp, #36]	; 0x24
 80043b6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80a1 	beq.w	8004502 <_svfiprintf_r+0x1c6>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ca:	f10a 0a01 	add.w	sl, sl, #1
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	9307      	str	r3, [sp, #28]
 80043d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043d6:	931a      	str	r3, [sp, #104]	; 0x68
 80043d8:	4654      	mov	r4, sl
 80043da:	2205      	movs	r2, #5
 80043dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e0:	4850      	ldr	r0, [pc, #320]	; (8004524 <_svfiprintf_r+0x1e8>)
 80043e2:	f7fb ff05 	bl	80001f0 <memchr>
 80043e6:	9a04      	ldr	r2, [sp, #16]
 80043e8:	b9d8      	cbnz	r0, 8004422 <_svfiprintf_r+0xe6>
 80043ea:	06d0      	lsls	r0, r2, #27
 80043ec:	bf44      	itt	mi
 80043ee:	2320      	movmi	r3, #32
 80043f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f4:	0711      	lsls	r1, r2, #28
 80043f6:	bf44      	itt	mi
 80043f8:	232b      	movmi	r3, #43	; 0x2b
 80043fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b2a      	cmp	r3, #42	; 0x2a
 8004404:	d015      	beq.n	8004432 <_svfiprintf_r+0xf6>
 8004406:	9a07      	ldr	r2, [sp, #28]
 8004408:	4654      	mov	r4, sl
 800440a:	2000      	movs	r0, #0
 800440c:	f04f 0c0a 	mov.w	ip, #10
 8004410:	4621      	mov	r1, r4
 8004412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004416:	3b30      	subs	r3, #48	; 0x30
 8004418:	2b09      	cmp	r3, #9
 800441a:	d94d      	bls.n	80044b8 <_svfiprintf_r+0x17c>
 800441c:	b1b0      	cbz	r0, 800444c <_svfiprintf_r+0x110>
 800441e:	9207      	str	r2, [sp, #28]
 8004420:	e014      	b.n	800444c <_svfiprintf_r+0x110>
 8004422:	eba0 0308 	sub.w	r3, r0, r8
 8004426:	fa09 f303 	lsl.w	r3, r9, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	9304      	str	r3, [sp, #16]
 800442e:	46a2      	mov	sl, r4
 8004430:	e7d2      	b.n	80043d8 <_svfiprintf_r+0x9c>
 8004432:	9b03      	ldr	r3, [sp, #12]
 8004434:	1d19      	adds	r1, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	9103      	str	r1, [sp, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfbb      	ittet	lt
 800443e:	425b      	neglt	r3, r3
 8004440:	f042 0202 	orrlt.w	r2, r2, #2
 8004444:	9307      	strge	r3, [sp, #28]
 8004446:	9307      	strlt	r3, [sp, #28]
 8004448:	bfb8      	it	lt
 800444a:	9204      	strlt	r2, [sp, #16]
 800444c:	7823      	ldrb	r3, [r4, #0]
 800444e:	2b2e      	cmp	r3, #46	; 0x2e
 8004450:	d10c      	bne.n	800446c <_svfiprintf_r+0x130>
 8004452:	7863      	ldrb	r3, [r4, #1]
 8004454:	2b2a      	cmp	r3, #42	; 0x2a
 8004456:	d134      	bne.n	80044c2 <_svfiprintf_r+0x186>
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	9203      	str	r2, [sp, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	bfb8      	it	lt
 8004464:	f04f 33ff 	movlt.w	r3, #4294967295
 8004468:	3402      	adds	r4, #2
 800446a:	9305      	str	r3, [sp, #20]
 800446c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004534 <_svfiprintf_r+0x1f8>
 8004470:	7821      	ldrb	r1, [r4, #0]
 8004472:	2203      	movs	r2, #3
 8004474:	4650      	mov	r0, sl
 8004476:	f7fb febb 	bl	80001f0 <memchr>
 800447a:	b138      	cbz	r0, 800448c <_svfiprintf_r+0x150>
 800447c:	9b04      	ldr	r3, [sp, #16]
 800447e:	eba0 000a 	sub.w	r0, r0, sl
 8004482:	2240      	movs	r2, #64	; 0x40
 8004484:	4082      	lsls	r2, r0
 8004486:	4313      	orrs	r3, r2
 8004488:	3401      	adds	r4, #1
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004490:	4825      	ldr	r0, [pc, #148]	; (8004528 <_svfiprintf_r+0x1ec>)
 8004492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004496:	2206      	movs	r2, #6
 8004498:	f7fb feaa 	bl	80001f0 <memchr>
 800449c:	2800      	cmp	r0, #0
 800449e:	d038      	beq.n	8004512 <_svfiprintf_r+0x1d6>
 80044a0:	4b22      	ldr	r3, [pc, #136]	; (800452c <_svfiprintf_r+0x1f0>)
 80044a2:	bb1b      	cbnz	r3, 80044ec <_svfiprintf_r+0x1b0>
 80044a4:	9b03      	ldr	r3, [sp, #12]
 80044a6:	3307      	adds	r3, #7
 80044a8:	f023 0307 	bic.w	r3, r3, #7
 80044ac:	3308      	adds	r3, #8
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b2:	4433      	add	r3, r6
 80044b4:	9309      	str	r3, [sp, #36]	; 0x24
 80044b6:	e768      	b.n	800438a <_svfiprintf_r+0x4e>
 80044b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80044bc:	460c      	mov	r4, r1
 80044be:	2001      	movs	r0, #1
 80044c0:	e7a6      	b.n	8004410 <_svfiprintf_r+0xd4>
 80044c2:	2300      	movs	r3, #0
 80044c4:	3401      	adds	r4, #1
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	4619      	mov	r1, r3
 80044ca:	f04f 0c0a 	mov.w	ip, #10
 80044ce:	4620      	mov	r0, r4
 80044d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d4:	3a30      	subs	r2, #48	; 0x30
 80044d6:	2a09      	cmp	r2, #9
 80044d8:	d903      	bls.n	80044e2 <_svfiprintf_r+0x1a6>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0c6      	beq.n	800446c <_svfiprintf_r+0x130>
 80044de:	9105      	str	r1, [sp, #20]
 80044e0:	e7c4      	b.n	800446c <_svfiprintf_r+0x130>
 80044e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044e6:	4604      	mov	r4, r0
 80044e8:	2301      	movs	r3, #1
 80044ea:	e7f0      	b.n	80044ce <_svfiprintf_r+0x192>
 80044ec:	ab03      	add	r3, sp, #12
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	462a      	mov	r2, r5
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <_svfiprintf_r+0x1f4>)
 80044f4:	a904      	add	r1, sp, #16
 80044f6:	4638      	mov	r0, r7
 80044f8:	f3af 8000 	nop.w
 80044fc:	1c42      	adds	r2, r0, #1
 80044fe:	4606      	mov	r6, r0
 8004500:	d1d6      	bne.n	80044b0 <_svfiprintf_r+0x174>
 8004502:	89ab      	ldrh	r3, [r5, #12]
 8004504:	065b      	lsls	r3, r3, #25
 8004506:	f53f af2d 	bmi.w	8004364 <_svfiprintf_r+0x28>
 800450a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800450c:	b01d      	add	sp, #116	; 0x74
 800450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004512:	ab03      	add	r3, sp, #12
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	462a      	mov	r2, r5
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <_svfiprintf_r+0x1f4>)
 800451a:	a904      	add	r1, sp, #16
 800451c:	4638      	mov	r0, r7
 800451e:	f000 f879 	bl	8004614 <_printf_i>
 8004522:	e7eb      	b.n	80044fc <_svfiprintf_r+0x1c0>
 8004524:	08004990 	.word	0x08004990
 8004528:	0800499a 	.word	0x0800499a
 800452c:	00000000 	.word	0x00000000
 8004530:	08004289 	.word	0x08004289
 8004534:	08004996 	.word	0x08004996

08004538 <_printf_common>:
 8004538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	4616      	mov	r6, r2
 800453e:	4699      	mov	r9, r3
 8004540:	688a      	ldr	r2, [r1, #8]
 8004542:	690b      	ldr	r3, [r1, #16]
 8004544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004548:	4293      	cmp	r3, r2
 800454a:	bfb8      	it	lt
 800454c:	4613      	movlt	r3, r2
 800454e:	6033      	str	r3, [r6, #0]
 8004550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004554:	4607      	mov	r7, r0
 8004556:	460c      	mov	r4, r1
 8004558:	b10a      	cbz	r2, 800455e <_printf_common+0x26>
 800455a:	3301      	adds	r3, #1
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	0699      	lsls	r1, r3, #26
 8004562:	bf42      	ittt	mi
 8004564:	6833      	ldrmi	r3, [r6, #0]
 8004566:	3302      	addmi	r3, #2
 8004568:	6033      	strmi	r3, [r6, #0]
 800456a:	6825      	ldr	r5, [r4, #0]
 800456c:	f015 0506 	ands.w	r5, r5, #6
 8004570:	d106      	bne.n	8004580 <_printf_common+0x48>
 8004572:	f104 0a19 	add.w	sl, r4, #25
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	6832      	ldr	r2, [r6, #0]
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	42ab      	cmp	r3, r5
 800457e:	dc26      	bgt.n	80045ce <_printf_common+0x96>
 8004580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004584:	1e13      	subs	r3, r2, #0
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	bf18      	it	ne
 800458a:	2301      	movne	r3, #1
 800458c:	0692      	lsls	r2, r2, #26
 800458e:	d42b      	bmi.n	80045e8 <_printf_common+0xb0>
 8004590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004594:	4649      	mov	r1, r9
 8004596:	4638      	mov	r0, r7
 8004598:	47c0      	blx	r8
 800459a:	3001      	adds	r0, #1
 800459c:	d01e      	beq.n	80045dc <_printf_common+0xa4>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	6922      	ldr	r2, [r4, #16]
 80045a2:	f003 0306 	and.w	r3, r3, #6
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf02      	ittt	eq
 80045aa:	68e5      	ldreq	r5, [r4, #12]
 80045ac:	6833      	ldreq	r3, [r6, #0]
 80045ae:	1aed      	subeq	r5, r5, r3
 80045b0:	68a3      	ldr	r3, [r4, #8]
 80045b2:	bf0c      	ite	eq
 80045b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b8:	2500      	movne	r5, #0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	bfc4      	itt	gt
 80045be:	1a9b      	subgt	r3, r3, r2
 80045c0:	18ed      	addgt	r5, r5, r3
 80045c2:	2600      	movs	r6, #0
 80045c4:	341a      	adds	r4, #26
 80045c6:	42b5      	cmp	r5, r6
 80045c8:	d11a      	bne.n	8004600 <_printf_common+0xc8>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e008      	b.n	80045e0 <_printf_common+0xa8>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4652      	mov	r2, sl
 80045d2:	4649      	mov	r1, r9
 80045d4:	4638      	mov	r0, r7
 80045d6:	47c0      	blx	r8
 80045d8:	3001      	adds	r0, #1
 80045da:	d103      	bne.n	80045e4 <_printf_common+0xac>
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	3501      	adds	r5, #1
 80045e6:	e7c6      	b.n	8004576 <_printf_common+0x3e>
 80045e8:	18e1      	adds	r1, r4, r3
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	2030      	movs	r0, #48	; 0x30
 80045ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045f2:	4422      	add	r2, r4
 80045f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045fc:	3302      	adds	r3, #2
 80045fe:	e7c7      	b.n	8004590 <_printf_common+0x58>
 8004600:	2301      	movs	r3, #1
 8004602:	4622      	mov	r2, r4
 8004604:	4649      	mov	r1, r9
 8004606:	4638      	mov	r0, r7
 8004608:	47c0      	blx	r8
 800460a:	3001      	adds	r0, #1
 800460c:	d0e6      	beq.n	80045dc <_printf_common+0xa4>
 800460e:	3601      	adds	r6, #1
 8004610:	e7d9      	b.n	80045c6 <_printf_common+0x8e>
	...

08004614 <_printf_i>:
 8004614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	7e0f      	ldrb	r7, [r1, #24]
 800461a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800461c:	2f78      	cmp	r7, #120	; 0x78
 800461e:	4691      	mov	r9, r2
 8004620:	4680      	mov	r8, r0
 8004622:	460c      	mov	r4, r1
 8004624:	469a      	mov	sl, r3
 8004626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800462a:	d807      	bhi.n	800463c <_printf_i+0x28>
 800462c:	2f62      	cmp	r7, #98	; 0x62
 800462e:	d80a      	bhi.n	8004646 <_printf_i+0x32>
 8004630:	2f00      	cmp	r7, #0
 8004632:	f000 80d4 	beq.w	80047de <_printf_i+0x1ca>
 8004636:	2f58      	cmp	r7, #88	; 0x58
 8004638:	f000 80c0 	beq.w	80047bc <_printf_i+0x1a8>
 800463c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004644:	e03a      	b.n	80046bc <_printf_i+0xa8>
 8004646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800464a:	2b15      	cmp	r3, #21
 800464c:	d8f6      	bhi.n	800463c <_printf_i+0x28>
 800464e:	a101      	add	r1, pc, #4	; (adr r1, 8004654 <_printf_i+0x40>)
 8004650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004654:	080046ad 	.word	0x080046ad
 8004658:	080046c1 	.word	0x080046c1
 800465c:	0800463d 	.word	0x0800463d
 8004660:	0800463d 	.word	0x0800463d
 8004664:	0800463d 	.word	0x0800463d
 8004668:	0800463d 	.word	0x0800463d
 800466c:	080046c1 	.word	0x080046c1
 8004670:	0800463d 	.word	0x0800463d
 8004674:	0800463d 	.word	0x0800463d
 8004678:	0800463d 	.word	0x0800463d
 800467c:	0800463d 	.word	0x0800463d
 8004680:	080047c5 	.word	0x080047c5
 8004684:	080046ed 	.word	0x080046ed
 8004688:	0800477f 	.word	0x0800477f
 800468c:	0800463d 	.word	0x0800463d
 8004690:	0800463d 	.word	0x0800463d
 8004694:	080047e7 	.word	0x080047e7
 8004698:	0800463d 	.word	0x0800463d
 800469c:	080046ed 	.word	0x080046ed
 80046a0:	0800463d 	.word	0x0800463d
 80046a4:	0800463d 	.word	0x0800463d
 80046a8:	08004787 	.word	0x08004787
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	602a      	str	r2, [r5, #0]
 80046b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046bc:	2301      	movs	r3, #1
 80046be:	e09f      	b.n	8004800 <_printf_i+0x1ec>
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	0607      	lsls	r7, r0, #24
 80046c6:	f103 0104 	add.w	r1, r3, #4
 80046ca:	6029      	str	r1, [r5, #0]
 80046cc:	d501      	bpl.n	80046d2 <_printf_i+0xbe>
 80046ce:	681e      	ldr	r6, [r3, #0]
 80046d0:	e003      	b.n	80046da <_printf_i+0xc6>
 80046d2:	0646      	lsls	r6, r0, #25
 80046d4:	d5fb      	bpl.n	80046ce <_printf_i+0xba>
 80046d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046da:	2e00      	cmp	r6, #0
 80046dc:	da03      	bge.n	80046e6 <_printf_i+0xd2>
 80046de:	232d      	movs	r3, #45	; 0x2d
 80046e0:	4276      	negs	r6, r6
 80046e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e6:	485a      	ldr	r0, [pc, #360]	; (8004850 <_printf_i+0x23c>)
 80046e8:	230a      	movs	r3, #10
 80046ea:	e012      	b.n	8004712 <_printf_i+0xfe>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	1d19      	adds	r1, r3, #4
 80046f2:	6029      	str	r1, [r5, #0]
 80046f4:	0605      	lsls	r5, r0, #24
 80046f6:	d501      	bpl.n	80046fc <_printf_i+0xe8>
 80046f8:	681e      	ldr	r6, [r3, #0]
 80046fa:	e002      	b.n	8004702 <_printf_i+0xee>
 80046fc:	0641      	lsls	r1, r0, #25
 80046fe:	d5fb      	bpl.n	80046f8 <_printf_i+0xe4>
 8004700:	881e      	ldrh	r6, [r3, #0]
 8004702:	4853      	ldr	r0, [pc, #332]	; (8004850 <_printf_i+0x23c>)
 8004704:	2f6f      	cmp	r7, #111	; 0x6f
 8004706:	bf0c      	ite	eq
 8004708:	2308      	moveq	r3, #8
 800470a:	230a      	movne	r3, #10
 800470c:	2100      	movs	r1, #0
 800470e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004712:	6865      	ldr	r5, [r4, #4]
 8004714:	60a5      	str	r5, [r4, #8]
 8004716:	2d00      	cmp	r5, #0
 8004718:	bfa2      	ittt	ge
 800471a:	6821      	ldrge	r1, [r4, #0]
 800471c:	f021 0104 	bicge.w	r1, r1, #4
 8004720:	6021      	strge	r1, [r4, #0]
 8004722:	b90e      	cbnz	r6, 8004728 <_printf_i+0x114>
 8004724:	2d00      	cmp	r5, #0
 8004726:	d04b      	beq.n	80047c0 <_printf_i+0x1ac>
 8004728:	4615      	mov	r5, r2
 800472a:	fbb6 f1f3 	udiv	r1, r6, r3
 800472e:	fb03 6711 	mls	r7, r3, r1, r6
 8004732:	5dc7      	ldrb	r7, [r0, r7]
 8004734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004738:	4637      	mov	r7, r6
 800473a:	42bb      	cmp	r3, r7
 800473c:	460e      	mov	r6, r1
 800473e:	d9f4      	bls.n	800472a <_printf_i+0x116>
 8004740:	2b08      	cmp	r3, #8
 8004742:	d10b      	bne.n	800475c <_printf_i+0x148>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07de      	lsls	r6, r3, #31
 8004748:	d508      	bpl.n	800475c <_printf_i+0x148>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	4299      	cmp	r1, r3
 8004750:	bfde      	ittt	le
 8004752:	2330      	movle	r3, #48	; 0x30
 8004754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800475c:	1b52      	subs	r2, r2, r5
 800475e:	6122      	str	r2, [r4, #16]
 8004760:	f8cd a000 	str.w	sl, [sp]
 8004764:	464b      	mov	r3, r9
 8004766:	aa03      	add	r2, sp, #12
 8004768:	4621      	mov	r1, r4
 800476a:	4640      	mov	r0, r8
 800476c:	f7ff fee4 	bl	8004538 <_printf_common>
 8004770:	3001      	adds	r0, #1
 8004772:	d14a      	bne.n	800480a <_printf_i+0x1f6>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	b004      	add	sp, #16
 800477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f043 0320 	orr.w	r3, r3, #32
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	4833      	ldr	r0, [pc, #204]	; (8004854 <_printf_i+0x240>)
 8004788:	2778      	movs	r7, #120	; 0x78
 800478a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	6829      	ldr	r1, [r5, #0]
 8004792:	061f      	lsls	r7, r3, #24
 8004794:	f851 6b04 	ldr.w	r6, [r1], #4
 8004798:	d402      	bmi.n	80047a0 <_printf_i+0x18c>
 800479a:	065f      	lsls	r7, r3, #25
 800479c:	bf48      	it	mi
 800479e:	b2b6      	uxthmi	r6, r6
 80047a0:	07df      	lsls	r7, r3, #31
 80047a2:	bf48      	it	mi
 80047a4:	f043 0320 	orrmi.w	r3, r3, #32
 80047a8:	6029      	str	r1, [r5, #0]
 80047aa:	bf48      	it	mi
 80047ac:	6023      	strmi	r3, [r4, #0]
 80047ae:	b91e      	cbnz	r6, 80047b8 <_printf_i+0x1a4>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	2310      	movs	r3, #16
 80047ba:	e7a7      	b.n	800470c <_printf_i+0xf8>
 80047bc:	4824      	ldr	r0, [pc, #144]	; (8004850 <_printf_i+0x23c>)
 80047be:	e7e4      	b.n	800478a <_printf_i+0x176>
 80047c0:	4615      	mov	r5, r2
 80047c2:	e7bd      	b.n	8004740 <_printf_i+0x12c>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	6826      	ldr	r6, [r4, #0]
 80047c8:	6961      	ldr	r1, [r4, #20]
 80047ca:	1d18      	adds	r0, r3, #4
 80047cc:	6028      	str	r0, [r5, #0]
 80047ce:	0635      	lsls	r5, r6, #24
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	d501      	bpl.n	80047d8 <_printf_i+0x1c4>
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	e002      	b.n	80047de <_printf_i+0x1ca>
 80047d8:	0670      	lsls	r0, r6, #25
 80047da:	d5fb      	bpl.n	80047d4 <_printf_i+0x1c0>
 80047dc:	8019      	strh	r1, [r3, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	4615      	mov	r5, r2
 80047e4:	e7bc      	b.n	8004760 <_printf_i+0x14c>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	602a      	str	r2, [r5, #0]
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	6862      	ldr	r2, [r4, #4]
 80047f0:	2100      	movs	r1, #0
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7fb fcfc 	bl	80001f0 <memchr>
 80047f8:	b108      	cbz	r0, 80047fe <_printf_i+0x1ea>
 80047fa:	1b40      	subs	r0, r0, r5
 80047fc:	6060      	str	r0, [r4, #4]
 80047fe:	6863      	ldr	r3, [r4, #4]
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	2300      	movs	r3, #0
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004808:	e7aa      	b.n	8004760 <_printf_i+0x14c>
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	462a      	mov	r2, r5
 800480e:	4649      	mov	r1, r9
 8004810:	4640      	mov	r0, r8
 8004812:	47d0      	blx	sl
 8004814:	3001      	adds	r0, #1
 8004816:	d0ad      	beq.n	8004774 <_printf_i+0x160>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	079b      	lsls	r3, r3, #30
 800481c:	d413      	bmi.n	8004846 <_printf_i+0x232>
 800481e:	68e0      	ldr	r0, [r4, #12]
 8004820:	9b03      	ldr	r3, [sp, #12]
 8004822:	4298      	cmp	r0, r3
 8004824:	bfb8      	it	lt
 8004826:	4618      	movlt	r0, r3
 8004828:	e7a6      	b.n	8004778 <_printf_i+0x164>
 800482a:	2301      	movs	r3, #1
 800482c:	4632      	mov	r2, r6
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d09d      	beq.n	8004774 <_printf_i+0x160>
 8004838:	3501      	adds	r5, #1
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	9903      	ldr	r1, [sp, #12]
 800483e:	1a5b      	subs	r3, r3, r1
 8004840:	42ab      	cmp	r3, r5
 8004842:	dcf2      	bgt.n	800482a <_printf_i+0x216>
 8004844:	e7eb      	b.n	800481e <_printf_i+0x20a>
 8004846:	2500      	movs	r5, #0
 8004848:	f104 0619 	add.w	r6, r4, #25
 800484c:	e7f5      	b.n	800483a <_printf_i+0x226>
 800484e:	bf00      	nop
 8004850:	080049a1 	.word	0x080049a1
 8004854:	080049b2 	.word	0x080049b2

08004858 <memmove>:
 8004858:	4288      	cmp	r0, r1
 800485a:	b510      	push	{r4, lr}
 800485c:	eb01 0402 	add.w	r4, r1, r2
 8004860:	d902      	bls.n	8004868 <memmove+0x10>
 8004862:	4284      	cmp	r4, r0
 8004864:	4623      	mov	r3, r4
 8004866:	d807      	bhi.n	8004878 <memmove+0x20>
 8004868:	1e43      	subs	r3, r0, #1
 800486a:	42a1      	cmp	r1, r4
 800486c:	d008      	beq.n	8004880 <memmove+0x28>
 800486e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004876:	e7f8      	b.n	800486a <memmove+0x12>
 8004878:	4402      	add	r2, r0
 800487a:	4601      	mov	r1, r0
 800487c:	428a      	cmp	r2, r1
 800487e:	d100      	bne.n	8004882 <memmove+0x2a>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800488a:	e7f7      	b.n	800487c <memmove+0x24>

0800488c <_sbrk_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d06      	ldr	r5, [pc, #24]	; (80048a8 <_sbrk_r+0x1c>)
 8004890:	2300      	movs	r3, #0
 8004892:	4604      	mov	r4, r0
 8004894:	4608      	mov	r0, r1
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	f7fc fe4c 	bl	8001534 <_sbrk>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_sbrk_r+0x1a>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_sbrk_r+0x1a>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	200002b4 	.word	0x200002b4

080048ac <memcpy>:
 80048ac:	440a      	add	r2, r1
 80048ae:	4291      	cmp	r1, r2
 80048b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b4:	d100      	bne.n	80048b8 <memcpy+0xc>
 80048b6:	4770      	bx	lr
 80048b8:	b510      	push	{r4, lr}
 80048ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c2:	4291      	cmp	r1, r2
 80048c4:	d1f9      	bne.n	80048ba <memcpy+0xe>
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <_realloc_r>:
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	4680      	mov	r8, r0
 80048ce:	4614      	mov	r4, r2
 80048d0:	460e      	mov	r6, r1
 80048d2:	b921      	cbnz	r1, 80048de <_realloc_r+0x16>
 80048d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	4611      	mov	r1, r2
 80048da:	f7ff bc49 	b.w	8004170 <_malloc_r>
 80048de:	b92a      	cbnz	r2, 80048ec <_realloc_r+0x24>
 80048e0:	f7ff fbda 	bl	8004098 <_free_r>
 80048e4:	4625      	mov	r5, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ec:	f000 f81b 	bl	8004926 <_malloc_usable_size_r>
 80048f0:	4284      	cmp	r4, r0
 80048f2:	4607      	mov	r7, r0
 80048f4:	d802      	bhi.n	80048fc <_realloc_r+0x34>
 80048f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048fa:	d812      	bhi.n	8004922 <_realloc_r+0x5a>
 80048fc:	4621      	mov	r1, r4
 80048fe:	4640      	mov	r0, r8
 8004900:	f7ff fc36 	bl	8004170 <_malloc_r>
 8004904:	4605      	mov	r5, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d0ed      	beq.n	80048e6 <_realloc_r+0x1e>
 800490a:	42bc      	cmp	r4, r7
 800490c:	4622      	mov	r2, r4
 800490e:	4631      	mov	r1, r6
 8004910:	bf28      	it	cs
 8004912:	463a      	movcs	r2, r7
 8004914:	f7ff ffca 	bl	80048ac <memcpy>
 8004918:	4631      	mov	r1, r6
 800491a:	4640      	mov	r0, r8
 800491c:	f7ff fbbc 	bl	8004098 <_free_r>
 8004920:	e7e1      	b.n	80048e6 <_realloc_r+0x1e>
 8004922:	4635      	mov	r5, r6
 8004924:	e7df      	b.n	80048e6 <_realloc_r+0x1e>

08004926 <_malloc_usable_size_r>:
 8004926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800492a:	1f18      	subs	r0, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	bfbc      	itt	lt
 8004930:	580b      	ldrlt	r3, [r1, r0]
 8004932:	18c0      	addlt	r0, r0, r3
 8004934:	4770      	bx	lr
	...

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
