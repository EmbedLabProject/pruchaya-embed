
embedproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c4  080040c4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080040cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08004128  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004128  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fd1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b61  00000000  00000000  0002a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000677  00000000  00000000  0002c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001629f  00000000  00000000  0002caef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b22e  00000000  00000000  00042d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ffaa  00000000  00000000  0004dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026d4  00000000  00000000  000ddf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004028 	.word	0x08004028

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004028 	.word	0x08004028

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b0c5      	sub	sp, #276	; 0x114
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fbb9 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f84b 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9a3 	bl	80008e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800059e:	f000 f981 	bl	80008a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f955 	bl	8000850 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8ad 	bl	8000704 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int adcval = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		  adcval = HAL_ADC_GetValue(&hadc1);
		  sprintf (buf, "%d\r\n" , adcval);
		  HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
	  }
	  */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) resultDMA, channelCount);
 80005b0:	2304      	movs	r3, #4
 80005b2:	461a      	mov	r2, r3
 80005b4:	4919      	ldr	r1, [pc, #100]	; (800061c <main+0x90>)
 80005b6:	481a      	ldr	r0, [pc, #104]	; (8000620 <main+0x94>)
 80005b8:	f000 fc80 	bl	8000ebc <HAL_ADC_Start_DMA>
	  while (conversionComplete == 0) {
 80005bc:	bf00      	nop
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <main+0x98>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0fb      	beq.n	80005be <main+0x32>

	  }
	  conversionComplete = 0;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
	  sprintf (buf, "s1 = %d ,s2 = %d ,s3 = %d ,s4 = %d \r\n" , resultDMA[0], resultDMA[1], resultDMA[2], resultDMA[3]);
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <main+0x90>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <main+0x90>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	461c      	mov	r4, r3
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <main+0x90>)
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <main+0x90>)
 80005e6:	88db      	ldrh	r3, [r3, #6]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	1d38      	adds	r0, r7, #4
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	4623      	mov	r3, r4
 80005f2:	460a      	mov	r2, r1
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <main+0x9c>)
 80005f6:	f003 f873 	bl	80036e0 <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdef 	bl	80001e0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0xa0>)
 800060e:	f002 fcab 	bl	8002f68 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fbea 	bl	8000dec <HAL_Delay>
  {
 8000618:	e7ca      	b.n	80005b0 <main+0x24>
 800061a:	bf00      	nop
 800061c:	20000168 	.word	0x20000168
 8000620:	20000078 	.word	0x20000078
 8000624:	20000170 	.word	0x20000170
 8000628:	08004040 	.word	0x08004040
 800062c:	20000120 	.word	0x20000120

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 f86e 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 ff6e 	bl	8002598 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c2:	f000 f98d 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f9d0 	bl	8002a88 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f977 	bl	80009e0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fffe 	bl	8003720 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000724:	4b46      	ldr	r3, [pc, #280]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000726:	4a47      	ldr	r2, [pc, #284]	; (8000844 <MX_ADC1_Init+0x140>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072a:	4b45      	ldr	r3, [pc, #276]	; (8000840 <MX_ADC1_Init+0x13c>)
 800072c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000738:	4b41      	ldr	r3, [pc, #260]	; (8000840 <MX_ADC1_Init+0x13c>)
 800073a:	2201      	movs	r2, #1
 800073c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074c:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <MX_ADC1_Init+0x13c>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000754:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <MX_ADC1_Init+0x144>)
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b39      	ldr	r3, [pc, #228]	; (8000840 <MX_ADC1_Init+0x13c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000760:	2204      	movs	r2, #4
 8000762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b36      	ldr	r3, [pc, #216]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MX_ADC1_Init+0x13c>)
 800076e:	2201      	movs	r2, #1
 8000770:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000772:	4833      	ldr	r0, [pc, #204]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000774:	f000 fb5e 	bl	8000e34 <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800077e:	f000 f92f 	bl	80009e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4619      	mov	r1, r3
 8000794:	482a      	ldr	r0, [pc, #168]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000796:	f000 fc95 	bl	80010c4 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80007a0:	f000 f91e 	bl	80009e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4619      	mov	r1, r3
 80007b2:	4823      	ldr	r0, [pc, #140]	; (8000840 <MX_ADC1_Init+0x13c>)
 80007b4:	f000 fc86 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80007be:	f000 f90f 	bl	80009e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80007c6:	2303      	movs	r3, #3
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4619      	mov	r1, r3
 80007d0:	481b      	ldr	r0, [pc, #108]	; (8000840 <MX_ADC1_Init+0x13c>)
 80007d2:	f000 fc77 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007dc:	f000 f900 	bl	80009e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007e0:	2306      	movs	r3, #6
 80007e2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_ADC1_Init+0x13c>)
 80007f0:	f000 fc68 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007fa:	f000 f8f1 	bl	80009e0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_ADC1_Init+0x148>)
 8000814:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0x13c>)
 8000828:	f000 fefc 	bl	8001624 <HAL_ADCEx_InjectedConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000832:	f000 f8d5 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000078 	.word	0x20000078
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001
 800084c:	000f0001 	.word	0x000f0001

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f002 fb1e 	bl	8002ec8 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f8a5 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000120 	.word	0x20000120
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2038      	movs	r0, #56	; 0x38
 80008cc:	f001 f91f 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d0:	2038      	movs	r0, #56	; 0x38
 80008d2:	f001 f938 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <MX_GPIO_Init+0xd4>)
 8000970:	f001 fdf8 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_GPIO_Init+0xd8>)
 800098c:	f001 fc66 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_GPIO_Init+0xd4>)
 80009a8:	f001 fc58 	bl	800225c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020800 	.word	0x40020800

080009c0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	conversionComplete = 1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000170 	.word	0x20000170

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <HAL_ADC_MspInit+0xdc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d157      	bne.n	8000b0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_ADC_MspInit+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8000a96:	2353      	movs	r3, #83	; 0x53
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481d      	ldr	r0, [pc, #116]	; (8000b20 <HAL_ADC_MspInit+0xe4>)
 8000aaa:	f001 fbd7 	bl	800225c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_ADC_MspInit+0xec>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000acc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000adc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000ae6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000af4:	f001 f842 	bl	8001b7c <HAL_DMA_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000afe:	f7ff ff6f 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_ADC_MspInit+0xe8>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	200000c0 	.word	0x200000c0
 8000b28:	40026410 	.word	0x40026410

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b86:	230c      	movs	r3, #12
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f001 fb5b 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f8d0 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <DMA2_Stream0_IRQHandler+0x10>)
 8000c16:	f001 f8b7 	bl	8001d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000c0 	.word	0x200000c0

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f002 fd6c 	bl	8003730 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20020000 	.word	0x20020000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	20000174 	.word	0x20000174
 8000c8c:	200002c8 	.word	0x200002c8

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f002 fd2b 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc51 	bl	800058c <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cf8:	080040cc 	.word	0x080040cc
  ldr r2, =_sbss
 8000cfc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d00:	200002c4 	.word	0x200002c4

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 fee1 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fe56 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fef9 	bl	8001b62 <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 fec1 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000178 	.word	0x20000178

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000178 	.word	0x20000178

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e033      	b.n	8000eb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d109      	bne.n	8000e66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fdf2 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d118      	bne.n	8000ea4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e7a:	f023 0302 	bic.w	r3, r3, #2
 8000e7e:	f043 0202 	orr.w	r2, r3, #2
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fa4e 	bl	8001328 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea2:	e001      	b.n	8000ea8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Start_DMA+0x1e>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e0ce      	b.n	8001078 <HAL_ADC_Start_DMA+0x1bc>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d018      	beq.n	8000f22 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f00:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <HAL_ADC_Start_DMA+0x1c4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a5f      	ldr	r2, [pc, #380]	; (8001084 <HAL_ADC_Start_DMA+0x1c8>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9a      	lsrs	r2, r3, #18
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f14:	e002      	b.n	8000f1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f9      	bne.n	8000f16 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f30:	d107      	bne.n	8000f42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8086 	bne.w	800105e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f90:	d106      	bne.n	8000fa0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f023 0206 	bic.w	r2, r3, #6
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8000f9e:	e002      	b.n	8000fa6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_ADC_Start_DMA+0x1cc>)
 8000fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb6:	4a35      	ldr	r2, [pc, #212]	; (800108c <HAL_ADC_Start_DMA+0x1d0>)
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	4a34      	ldr	r2, [pc, #208]	; (8001090 <HAL_ADC_Start_DMA+0x1d4>)
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc6:	4a33      	ldr	r2, [pc, #204]	; (8001094 <HAL_ADC_Start_DMA+0x1d8>)
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fe2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	334c      	adds	r3, #76	; 0x4c
 8000ffe:	4619      	mov	r1, r3
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f000 fe68 	bl	8001cd8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10f      	bne.n	8001034 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d129      	bne.n	8001076 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	e020      	b.n	8001076 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_ADC_Start_DMA+0x1dc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11b      	bne.n	8001076 <HAL_ADC_Start_DMA+0x1ba>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d114      	bne.n	8001076 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	e00b      	b.n	8001076 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f043 0210 	orr.w	r2, r3, #16
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f043 0201 	orr.w	r2, r3, #1
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	431bde83 	.word	0x431bde83
 8001088:	40012300 	.word	0x40012300
 800108c:	08001521 	.word	0x08001521
 8001090:	080015db 	.word	0x080015db
 8001094:	080015f7 	.word	0x080015f7
 8001098:	40012000 	.word	0x40012000

0800109c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1c>
 80010dc:	2302      	movs	r3, #2
 80010de:	e113      	b.n	8001308 <HAL_ADC_ConfigChannel+0x244>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d925      	bls.n	800113c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68d9      	ldr	r1, [r3, #12]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43da      	mvns	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4403      	add	r3, r0
 800112e:	3b1e      	subs	r3, #30
 8001130:	409a      	lsls	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e022      	b.n	8001182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6919      	ldr	r1, [r3, #16]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	2207      	movs	r2, #7
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	400a      	ands	r2, r1
 800115e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6919      	ldr	r1, [r3, #16]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	4603      	mov	r3, r0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4403      	add	r3, r0
 8001178:	409a      	lsls	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b06      	cmp	r3, #6
 8001188:	d824      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	3b05      	subs	r3, #5
 800119c:	221f      	movs	r2, #31
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b05      	subs	r3, #5
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e04c      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d824      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	; 0x23
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b23      	subs	r3, #35	; 0x23
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	e023      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	; 0x41
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_ADC_ConfigChannel+0x250>)
 8001270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_ADC_ConfigChannel+0x254>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d10f      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1d8>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d10b      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_ADC_ConfigChannel+0x254>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <HAL_ADC_ConfigChannel+0x258>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0x1f4>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b11      	cmp	r3, #17
 80012b6:	d122      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_ADC_ConfigChannel+0x258>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_ADC_ConfigChannel+0x25c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_ADC_ConfigChannel+0x260>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9a      	lsrs	r2, r3, #18
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40012300 	.word	0x40012300
 8001318:	40012000 	.word	0x40012000
 800131c:	10000012 	.word	0x10000012
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001330:	4b79      	ldr	r3, [pc, #484]	; (8001518 <ADC_Init+0x1f0>)
 8001332:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <ADC_Init+0x1f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001536:	2b00      	cmp	r3, #0
 8001538:	d13c      	bne.n	80015b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d12b      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001558:	2b00      	cmp	r3, #0
 800155a:	d127      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001574:	2b00      	cmp	r3, #0
 8001576:	d119      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0220 	bic.w	r2, r2, #32
 8001586:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fa07 	bl	80009c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015b2:	e00e      	b.n	80015d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd75 	bl	80010b0 <HAL_ADC_ErrorCallback>
}
 80015c6:	e004      	b.n	80015d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fd57 	bl	800109c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f043 0204 	orr.w	r2, r3, #4
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff fd4a 	bl	80010b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001638:	2302      	movs	r3, #2
 800163a:	e17e      	b.n	800193a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d925      	bls.n	8001698 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68d9      	ldr	r1, [r3, #12]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	3b1e      	subs	r3, #30
 8001662:	2207      	movs	r2, #7
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68d9      	ldr	r1, [r3, #12]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	4603      	mov	r3, r0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4403      	add	r3, r0
 800168a:	3b1e      	subs	r3, #30
 800168c:	409a      	lsls	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	e022      	b.n	80016de <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6919      	ldr	r1, [r3, #16]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	2207      	movs	r2, #7
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	400a      	ands	r2, r1
 80016ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6919      	ldr	r1, [r3, #16]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4403      	add	r3, r0
 80016d4:	409a      	lsls	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	051a      	lsls	r2, r3, #20
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3303      	adds	r3, #3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	221f      	movs	r2, #31
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43da      	mvns	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	400a      	ands	r2, r1
 8001734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	3303      	adds	r3, #3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d022      	beq.n	80017bc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	699a      	ldr	r2, [r3, #24]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6899      	ldr	r1, [r3, #8]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	e00f      	b.n	80017dc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80017ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017da:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7d5b      	ldrb	r3, [r3, #21]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	e007      	b.n	8001806 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001804:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	7d1b      	ldrb	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e007      	b.n	8001830 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800182e:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d02e      	beq.n	8001896 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8001838:	2b03      	cmp	r3, #3
 800183a:	d840      	bhi.n	80018be <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800183c:	2b01      	cmp	r3, #1
 800183e:	d002      	beq.n	8001846 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8001840:	2b02      	cmp	r3, #2
 8001842:	d014      	beq.n	800186e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8001844:	e03b      	b.n	80018be <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001854:	f023 030f 	bic.w	r3, r3, #15
 8001858:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6959      	ldr	r1, [r3, #20]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	615a      	str	r2, [r3, #20]
      break;
 800186c:	e03b      	b.n	80018e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800187c:	f023 030f 	bic.w	r3, r3, #15
 8001880:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6999      	ldr	r1, [r3, #24]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	619a      	str	r2, [r3, #24]
      break;
 8001894:	e027      	b.n	80018e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018a4:	f023 030f 	bic.w	r3, r3, #15
 80018a8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69d9      	ldr	r1, [r3, #28]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	61da      	str	r2, [r3, #28]
      break;
 80018bc:	e013      	b.n	80018e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018cc:	f023 030f 	bic.w	r3, r3, #15
 80018d0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a19      	ldr	r1, [r3, #32]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	621a      	str	r2, [r3, #32]
      break;
 80018e4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80018e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a18      	ldr	r2, [pc, #96]	; (8001950 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d109      	bne.n	8001908 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b12      	cmp	r3, #18
 80018fa:	d105      	bne.n	8001908 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d10e      	bne.n	8001930 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d003      	beq.n	8001924 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b11      	cmp	r3, #17
 8001922:	d105      	bne.n	8001930 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	000f0001 	.word	0x000f0001
 800194c:	40012300 	.word	0x40012300
 8001950:	40012000 	.word	0x40012000
 8001954:	10000012 	.word	0x10000012

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff f924 	bl	8000dd4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e099      	b.n	8001ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb8:	e00f      	b.n	8001bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bba:	f7ff f90b 	bl	8000dd4 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d908      	bls.n	8001bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e078      	b.n	8001ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e8      	bne.n	8001bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_DMA_Init+0x158>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f023 0307 	bic.w	r3, r3, #7
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d117      	bne.n	8001c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00e      	beq.n	8001c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fa6f 	bl	8002164 <DMA_CheckFifoParam>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e016      	b.n	8001ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa26 	bl	80020f8 <DMA_CalcBaseAndBitshift>
 8001cac:	4603      	mov	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	223f      	movs	r2, #63	; 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f010803f 	.word	0xf010803f

08001cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA_Start_IT+0x26>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e040      	b.n	8001d80 <HAL_DMA_Start_IT+0xa8>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d12f      	bne.n	8001d72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f9b8 	bl	800209c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	223f      	movs	r2, #63	; 0x3f
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0216 	orr.w	r2, r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0208 	orr.w	r2, r2, #8
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e005      	b.n	8001d7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d94:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <HAL_DMA_IRQHandler+0x248>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a8e      	ldr	r2, [pc, #568]	; (8001fd4 <HAL_DMA_IRQHandler+0x24c>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2208      	movs	r2, #8
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01a      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0204 	bic.w	r2, r2, #4
 8001dda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2208      	movs	r2, #8
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2201      	movs	r2, #1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2204      	movs	r2, #4
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00b      	beq.n	8001e60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2210      	movs	r2, #16
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d043      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03c      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2210      	movs	r2, #16
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d018      	beq.n	8001eca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d108      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d024      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
 8001eb6:	e01f      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
 8001ec8:	e016      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0208 	bic.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2220      	movs	r2, #32
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 808f 	beq.w	8002028 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8087 	beq.w	8002028 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2220      	movs	r2, #32
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d136      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0216 	bic.w	r2, r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_DMA_IRQHandler+0x1da>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	223f      	movs	r2, #63	; 0x3f
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d07e      	beq.n	8002094 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
        }
        return;
 8001f9e:	e079      	b.n	8002094 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01d      	beq.n	8001fea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d031      	beq.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e02c      	b.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d023      	beq.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
 8001fe8:	e01e      	b.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0210 	bic.w	r2, r2, #16
 8002006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	2b00      	cmp	r3, #0
 800202e:	d032      	beq.n	8002096 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d022      	beq.n	8002082 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2205      	movs	r2, #5
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	d307      	bcc.n	8002070 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f2      	bne.n	8002054 <HAL_DMA_IRQHandler+0x2cc>
 800206e:	e000      	b.n	8002072 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002070:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
 8002092:	e000      	b.n	8002096 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002094:	bf00      	nop
    }
  }
}
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d108      	bne.n	80020dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020da:	e007      	b.n	80020ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3b10      	subs	r3, #16
 8002108:	4a14      	ldr	r2, [pc, #80]	; (800215c <DMA_CalcBaseAndBitshift+0x64>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <DMA_CalcBaseAndBitshift+0x68>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d909      	bls.n	800213a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	1d1a      	adds	r2, r3, #4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	659a      	str	r2, [r3, #88]	; 0x58
 8002138:	e007      	b.n	800214a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	aaaaaaab 	.word	0xaaaaaaab
 8002160:	08004080 	.word	0x08004080

08002164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11f      	bne.n	80021be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d856      	bhi.n	8002232 <DMA_CheckFifoParam+0xce>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <DMA_CheckFifoParam+0x28>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021af 	.word	0x080021af
 8002194:	0800219d 	.word	0x0800219d
 8002198:	08002233 	.word	0x08002233
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d046      	beq.n	8002236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ac:	e043      	b.n	8002236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b6:	d140      	bne.n	800223a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e03d      	b.n	800223a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c6:	d121      	bne.n	800220c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d837      	bhi.n	800223e <DMA_CheckFifoParam+0xda>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <DMA_CheckFifoParam+0x70>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021eb 	.word	0x080021eb
 80021dc:	080021e5 	.word	0x080021e5
 80021e0:	080021fd 	.word	0x080021fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      break;
 80021e8:	e030      	b.n	800224c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d025      	beq.n	8002242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fa:	e022      	b.n	8002242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002204:	d11f      	bne.n	8002246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800220a:	e01c      	b.n	8002246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d903      	bls.n	800221a <DMA_CheckFifoParam+0xb6>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d003      	beq.n	8002220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002218:	e018      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      break;
 800221e:	e015      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      break;
 8002230:	e00b      	b.n	800224a <DMA_CheckFifoParam+0xe6>
      break;
 8002232:	bf00      	nop
 8002234:	e00a      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e008      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e006      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e004      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e002      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;   
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
    }
  } 
  
  return status; 
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e159      	b.n	800252c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8148 	bne.w	8002526 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a2 	beq.w	8002526 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b57      	ldr	r3, [pc, #348]	; (8002544 <HAL_GPIO_Init+0x2e8>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a56      	ldr	r2, [pc, #344]	; (8002544 <HAL_GPIO_Init+0x2e8>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_GPIO_Init+0x2e8>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_GPIO_Init+0x2ec>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a49      	ldr	r2, [pc, #292]	; (800254c <HAL_GPIO_Init+0x2f0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d019      	beq.n	800245e <HAL_GPIO_Init+0x202>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a48      	ldr	r2, [pc, #288]	; (8002550 <HAL_GPIO_Init+0x2f4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0x1fe>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a47      	ldr	r2, [pc, #284]	; (8002554 <HAL_GPIO_Init+0x2f8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00d      	beq.n	8002456 <HAL_GPIO_Init+0x1fa>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a46      	ldr	r2, [pc, #280]	; (8002558 <HAL_GPIO_Init+0x2fc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0x1f6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a45      	ldr	r2, [pc, #276]	; (800255c <HAL_GPIO_Init+0x300>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_GPIO_Init+0x1f2>
 800244a:	2304      	movs	r3, #4
 800244c:	e008      	b.n	8002460 <HAL_GPIO_Init+0x204>
 800244e:	2307      	movs	r3, #7
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x204>
 8002452:	2303      	movs	r3, #3
 8002454:	e004      	b.n	8002460 <HAL_GPIO_Init+0x204>
 8002456:	2302      	movs	r3, #2
 8002458:	e002      	b.n	8002460 <HAL_GPIO_Init+0x204>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x204>
 800245e:	2300      	movs	r3, #0
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f002 0203 	and.w	r2, r2, #3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4093      	lsls	r3, r2
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002470:	4935      	ldr	r1, [pc, #212]	; (8002548 <HAL_GPIO_Init+0x2ec>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <HAL_GPIO_Init+0x304>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a2:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <HAL_GPIO_Init+0x304>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_GPIO_Init+0x304>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024cc:	4a24      	ldr	r2, [pc, #144]	; (8002560 <HAL_GPIO_Init+0x304>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_GPIO_Init+0x304>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f6:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <HAL_GPIO_Init+0x304>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_GPIO_Init+0x304>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_GPIO_Init+0x304>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3301      	adds	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	f67f aea2 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	40013800 	.word	0x40013800
 800254c:	40020000 	.word	0x40020000
 8002550:	40020400 	.word	0x40020400
 8002554:	40020800 	.word	0x40020800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40021000 	.word	0x40021000
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e267      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d075      	beq.n	80026a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b6:	4b88      	ldr	r3, [pc, #544]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d00c      	beq.n	80025dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b82      	ldr	r3, [pc, #520]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05b      	beq.n	80026a0 <HAL_RCC_OscConfig+0x108>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d157      	bne.n	80026a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e242      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x74>
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a75      	ldr	r2, [pc, #468]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e01d      	b.n	8002648 <HAL_RCC_OscConfig+0xb0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x98>
 8002616:	4b70      	ldr	r3, [pc, #448]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6f      	ldr	r2, [pc, #444]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0xb0>
 8002630:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fbc0 	bl	8000dd4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fbbc 	bl	8000dd4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e207      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0xc0>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fbac 	bl	8000dd4 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe fba8 	bl	8000dd4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1f3      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0xe8>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d11c      	bne.n	8002700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d116      	bne.n	8002700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_RCC_OscConfig+0x152>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1c7      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	e03a      	b.n	8002776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002708:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_RCC_OscConfig+0x244>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fb61 	bl	8000dd4 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe fb5d 	bl	8000dd4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1a8      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4925      	ldr	r1, [pc, #148]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_OscConfig+0x244>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fb40 	bl	8000dd4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002758:	f7fe fb3c 	bl	8000dd4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e187      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d036      	beq.n	80027f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_RCC_OscConfig+0x248>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fb20 	bl	8000dd4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe fb1c 	bl	8000dd4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e167      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x200>
 80027b6:	e01b      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_OscConfig+0x248>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe fb09 	bl	8000dd4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	e00e      	b.n	80027e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fb05 	bl	8000dd4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d907      	bls.n	80027e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e150      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	42470000 	.word	0x42470000
 80027e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ea      	bne.n	80027c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8097 	beq.w	800292c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a7c      	ldr	r2, [pc, #496]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b7a      	ldr	r3, [pc, #488]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b74      	ldr	r3, [pc, #464]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a73      	ldr	r2, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe fac5 	bl	8000dd4 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7fe fac1 	bl	8000dd4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e10c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x2ea>
 8002874:	4b64      	ldr	r3, [pc, #400]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a63      	ldr	r2, [pc, #396]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x30c>
 800288a:	4b5f      	ldr	r3, [pc, #380]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a5e      	ldr	r2, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4a5b      	ldr	r2, [pc, #364]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
 80028a4:	4b58      	ldr	r3, [pc, #352]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fa86 	bl	8000dd4 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe fa82 	bl	8000dd4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0cb      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ee      	beq.n	80028cc <HAL_RCC_OscConfig+0x334>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fa70 	bl	8000dd4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fa6c 	bl	8000dd4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0b5      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	4a38      	ldr	r2, [pc, #224]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a1 	beq.w	8002a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002936:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d05c      	beq.n	80029fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d141      	bne.n	80029ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCC_OscConfig+0x478>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fa40 	bl	8000dd4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fa3c 	bl	8000dd4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e087      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	491b      	ldr	r1, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x478>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fa15 	bl	8000dd4 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fa11 	bl	8000dd4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e05c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x416>
 80029cc:	e054      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe f9fe 	bl	8000dd4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe f9fa 	bl	8000dd4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e045      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x444>
 80029fa:	e03d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e038      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4ec>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d028      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d121      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d11a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0cc      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d90c      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b8      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af4:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	494d      	ldr	r1, [pc, #308]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d044      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d119      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e067      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4934      	ldr	r1, [pc, #208]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fe f92c 	bl	8000dd4 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe f928 	bl	8000dd4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e04f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d20c      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e032      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4916      	ldr	r1, [pc, #88]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	490e      	ldr	r1, [pc, #56]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0e:	f000 f821 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490a      	ldr	r1, [pc, #40]	; (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f88c 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00
 8002c44:	40023800 	.word	0x40023800
 8002c48:	08004068 	.word	0x08004068
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b094      	sub	sp, #80	; 0x50
 8002c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c60:	2300      	movs	r3, #0
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	2300      	movs	r3, #0
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6c:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d00d      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x40>
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	f200 80e1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x34>
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c86:	e0db      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c8c:	e0db      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c92:	e0d8      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c94:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	462b      	mov	r3, r5
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	0159      	lsls	r1, r3, #5
 8002cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd8:	0150      	lsls	r0, r2, #5
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4621      	mov	r1, r4
 8002ce0:	1a51      	subs	r1, r2, r1
 8002ce2:	6139      	str	r1, [r7, #16]
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	018b      	lsls	r3, r1, #6
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d02:	4651      	mov	r1, sl
 8002d04:	018a      	lsls	r2, r1, #6
 8002d06:	4651      	mov	r1, sl
 8002d08:	ebb2 0801 	subs.w	r8, r2, r1
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d26:	4690      	mov	r8, r2
 8002d28:	4699      	mov	r9, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	eb18 0303 	adds.w	r3, r8, r3
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	462b      	mov	r3, r5
 8002d34:	eb49 0303 	adc.w	r3, r9, r3
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d46:	4629      	mov	r1, r5
 8002d48:	024b      	lsls	r3, r1, #9
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d50:	4621      	mov	r1, r4
 8002d52:	024a      	lsls	r2, r1, #9
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d64:	f7fd fa94 	bl	8000290 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d70:	e058      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0159      	lsls	r1, r3, #5
 8002d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9e:	0150      	lsls	r0, r2, #5
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4641      	mov	r1, r8
 8002da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002daa:	4649      	mov	r1, r9
 8002dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	00eb      	lsls	r3, r5, #3
 8002dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dda:	00e2      	lsls	r2, r4, #3
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	18e3      	adds	r3, r4, r3
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	464b      	mov	r3, r9
 8002de8:	eb45 0303 	adc.w	r3, r5, r3
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	61fa      	str	r2, [r7, #28]
 8002e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e18:	f7fd fa3a 	bl	8000290 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3750      	adds	r7, #80	; 0x50
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	007a1200 	.word	0x007a1200

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08004078 	.word	0x08004078

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffdc 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0b5b      	lsrs	r3, r3, #13
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08004078 	.word	0x08004078

08002ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e042      	b.n	8002f60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fe1c 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f973 	bl	80031f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d175      	bne.n	8003074 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Transmit+0x2c>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e06e      	b.n	8003076 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2221      	movs	r2, #33	; 0x21
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa6:	f7fd ff15 	bl	8000dd4 <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc0:	d108      	bne.n	8002fd4 <HAL_UART_Transmit+0x6c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e003      	b.n	8002fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fdc:	e02e      	b.n	800303c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f848 	bl	800307e <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e03a      	b.n	8003076 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3302      	adds	r3, #2
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e007      	b.n	800302e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1cb      	bne.n	8002fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f814 	bl	800307e <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e006      	b.n	8003076 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4613      	mov	r3, r2
 800308c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308e:	e03b      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d037      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7fd fe9c 	bl	8000dd4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	6a3a      	ldr	r2, [r7, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <UART_WaitOnFlagUntilTimeout+0x30>
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e03a      	b.n	8003128 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d023      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d020      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d01d      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d116      	bne.n	8003108 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f81d 	bl	8003130 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2208      	movs	r2, #8
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e00f      	b.n	8003128 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	429a      	cmp	r2, r3
 8003124:	d0b4      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b095      	sub	sp, #84	; 0x54
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003158:	643a      	str	r2, [r7, #64]	; 0x40
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800315e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e5      	bne.n	8003138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	61fb      	str	r3, [r7, #28]
   return(result);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800318c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d119      	bne.n	80031dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f023 0310 	bic.w	r3, r3, #16
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c8:	61ba      	str	r2, [r7, #24]
 80031ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	613b      	str	r3, [r7, #16]
   return(result);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e5      	bne.n	80031a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031ea:	bf00      	nop
 80031ec:	3754      	adds	r7, #84	; 0x54
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b0c0      	sub	sp, #256	; 0x100
 80031fe:	af00      	add	r7, sp, #0
 8003200:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	ea40 0301 	orr.w	r3, r0, r1
 8003220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	431a      	orrs	r2, r3
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	431a      	orrs	r2, r3
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003250:	f021 010c 	bic.w	r1, r1, #12
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800325e:	430b      	orrs	r3, r1
 8003260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	6999      	ldr	r1, [r3, #24]
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	ea40 0301 	orr.w	r3, r0, r1
 800327e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b8f      	ldr	r3, [pc, #572]	; (80034c4 <UART_SetConfig+0x2cc>)
 8003288:	429a      	cmp	r2, r3
 800328a:	d005      	beq.n	8003298 <UART_SetConfig+0xa0>
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <UART_SetConfig+0x2d0>)
 8003294:	429a      	cmp	r2, r3
 8003296:	d104      	bne.n	80032a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7ff fe02 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 800329c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032a0:	e003      	b.n	80032aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a2:	f7ff fde9 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 80032a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b4:	f040 810c 	bne.w	80034d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032ca:	4622      	mov	r2, r4
 80032cc:	462b      	mov	r3, r5
 80032ce:	1891      	adds	r1, r2, r2
 80032d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80032d2:	415b      	adcs	r3, r3
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032da:	4621      	mov	r1, r4
 80032dc:	eb12 0801 	adds.w	r8, r2, r1
 80032e0:	4629      	mov	r1, r5
 80032e2:	eb43 0901 	adc.w	r9, r3, r1
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032fa:	4690      	mov	r8, r2
 80032fc:	4699      	mov	r9, r3
 80032fe:	4623      	mov	r3, r4
 8003300:	eb18 0303 	adds.w	r3, r8, r3
 8003304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003308:	462b      	mov	r3, r5
 800330a:	eb49 0303 	adc.w	r3, r9, r3
 800330e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800331e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003326:	460b      	mov	r3, r1
 8003328:	18db      	adds	r3, r3, r3
 800332a:	653b      	str	r3, [r7, #80]	; 0x50
 800332c:	4613      	mov	r3, r2
 800332e:	eb42 0303 	adc.w	r3, r2, r3
 8003332:	657b      	str	r3, [r7, #84]	; 0x54
 8003334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800333c:	f7fc ffa8 	bl	8000290 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4b61      	ldr	r3, [pc, #388]	; (80034cc <UART_SetConfig+0x2d4>)
 8003346:	fba3 2302 	umull	r2, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	011c      	lsls	r4, r3, #4
 800334e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003352:	2200      	movs	r2, #0
 8003354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003358:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800335c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	1891      	adds	r1, r2, r2
 8003366:	64b9      	str	r1, [r7, #72]	; 0x48
 8003368:	415b      	adcs	r3, r3
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003370:	4641      	mov	r1, r8
 8003372:	eb12 0a01 	adds.w	sl, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb43 0b01 	adc.w	fp, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800338c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003390:	4692      	mov	sl, r2
 8003392:	469b      	mov	fp, r3
 8003394:	4643      	mov	r3, r8
 8003396:	eb1a 0303 	adds.w	r3, sl, r3
 800339a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339e:	464b      	mov	r3, r9
 80033a0:	eb4b 0303 	adc.w	r3, fp, r3
 80033a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033bc:	460b      	mov	r3, r1
 80033be:	18db      	adds	r3, r3, r3
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
 80033c2:	4613      	mov	r3, r2
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033d2:	f7fc ff5d 	bl	8000290 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <UART_SetConfig+0x2d4>)
 80033de:	fba3 2301 	umull	r2, r3, r3, r1
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2264      	movs	r2, #100	; 0x64
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	1acb      	subs	r3, r1, r3
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033f2:	4b36      	ldr	r3, [pc, #216]	; (80034cc <UART_SetConfig+0x2d4>)
 80033f4:	fba3 2302 	umull	r2, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003400:	441c      	add	r4, r3
 8003402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800340c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	63b9      	str	r1, [r7, #56]	; 0x38
 800341c:	415b      	adcs	r3, r3
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003424:	4641      	mov	r1, r8
 8003426:	1851      	adds	r1, r2, r1
 8003428:	6339      	str	r1, [r7, #48]	; 0x30
 800342a:	4649      	mov	r1, r9
 800342c:	414b      	adcs	r3, r1
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800343c:	4659      	mov	r1, fp
 800343e:	00cb      	lsls	r3, r1, #3
 8003440:	4651      	mov	r1, sl
 8003442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003446:	4651      	mov	r1, sl
 8003448:	00ca      	lsls	r2, r1, #3
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4603      	mov	r3, r0
 8003450:	4642      	mov	r2, r8
 8003452:	189b      	adds	r3, r3, r2
 8003454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003458:	464b      	mov	r3, r9
 800345a:	460a      	mov	r2, r1
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003470:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003478:	460b      	mov	r3, r1
 800347a:	18db      	adds	r3, r3, r3
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
 800347e:	4613      	mov	r3, r2
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800348a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800348e:	f7fc feff 	bl	8000290 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <UART_SetConfig+0x2d4>)
 8003498:	fba3 1302 	umull	r1, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2164      	movs	r1, #100	; 0x64
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <UART_SetConfig+0x2d4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 0207 	and.w	r2, r3, #7
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4422      	add	r2, r4
 80034be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034c0:	e106      	b.n	80036d0 <UART_SetConfig+0x4d8>
 80034c2:	bf00      	nop
 80034c4:	40011000 	.word	0x40011000
 80034c8:	40011400 	.word	0x40011400
 80034cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034e2:	4642      	mov	r2, r8
 80034e4:	464b      	mov	r3, r9
 80034e6:	1891      	adds	r1, r2, r2
 80034e8:	6239      	str	r1, [r7, #32]
 80034ea:	415b      	adcs	r3, r3
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034f2:	4641      	mov	r1, r8
 80034f4:	1854      	adds	r4, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb43 0501 	adc.w	r5, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	00eb      	lsls	r3, r5, #3
 8003506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350a:	00e2      	lsls	r2, r4, #3
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	4643      	mov	r3, r8
 8003512:	18e3      	adds	r3, r4, r3
 8003514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003518:	464b      	mov	r3, r9
 800351a:	eb45 0303 	adc.w	r3, r5, r3
 800351e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800352e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800353e:	4629      	mov	r1, r5
 8003540:	008b      	lsls	r3, r1, #2
 8003542:	4621      	mov	r1, r4
 8003544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003548:	4621      	mov	r1, r4
 800354a:	008a      	lsls	r2, r1, #2
 800354c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003550:	f7fc fe9e 	bl	8000290 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4b60      	ldr	r3, [pc, #384]	; (80036dc <UART_SetConfig+0x4e4>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	011c      	lsls	r4, r3, #4
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800356c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	61b9      	str	r1, [r7, #24]
 800357c:	415b      	adcs	r3, r3
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	4641      	mov	r1, r8
 8003586:	1851      	adds	r1, r2, r1
 8003588:	6139      	str	r1, [r7, #16]
 800358a:	4649      	mov	r1, r9
 800358c:	414b      	adcs	r3, r1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800359c:	4659      	mov	r1, fp
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4651      	mov	r1, sl
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4651      	mov	r1, sl
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4642      	mov	r2, r8
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035b8:	464b      	mov	r3, r9
 80035ba:	460a      	mov	r2, r1
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035dc:	4649      	mov	r1, r9
 80035de:	008b      	lsls	r3, r1, #2
 80035e0:	4641      	mov	r1, r8
 80035e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e6:	4641      	mov	r1, r8
 80035e8:	008a      	lsls	r2, r1, #2
 80035ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ee:	f7fc fe4f 	bl	8000290 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	4b38      	ldr	r3, [pc, #224]	; (80036dc <UART_SetConfig+0x4e4>)
 80035fa:	fba3 2301 	umull	r2, r3, r3, r1
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2264      	movs	r2, #100	; 0x64
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	1acb      	subs	r3, r1, r3
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	3332      	adds	r3, #50	; 0x32
 800360c:	4a33      	ldr	r2, [pc, #204]	; (80036dc <UART_SetConfig+0x4e4>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003618:	441c      	add	r4, r3
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	673b      	str	r3, [r7, #112]	; 0x70
 8003622:	677a      	str	r2, [r7, #116]	; 0x74
 8003624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	415b      	adcs	r3, r3
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003638:	4641      	mov	r1, r8
 800363a:	1851      	adds	r1, r2, r1
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	4649      	mov	r1, r9
 8003640:	414b      	adcs	r3, r1
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003650:	4659      	mov	r1, fp
 8003652:	00cb      	lsls	r3, r1, #3
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365a:	4651      	mov	r1, sl
 800365c:	00ca      	lsls	r2, r1, #3
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	4603      	mov	r3, r0
 8003664:	4642      	mov	r2, r8
 8003666:	189b      	adds	r3, r3, r2
 8003668:	66bb      	str	r3, [r7, #104]	; 0x68
 800366a:	464b      	mov	r3, r9
 800366c:	460a      	mov	r2, r1
 800366e:	eb42 0303 	adc.w	r3, r2, r3
 8003672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
 800367e:	667a      	str	r2, [r7, #100]	; 0x64
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800368c:	4649      	mov	r1, r9
 800368e:	008b      	lsls	r3, r1, #2
 8003690:	4641      	mov	r1, r8
 8003692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003696:	4641      	mov	r1, r8
 8003698:	008a      	lsls	r2, r1, #2
 800369a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800369e:	f7fc fdf7 	bl	8000290 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x4e4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <UART_SetConfig+0x4e4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 020f 	and.w	r2, r3, #15
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4422      	add	r2, r4
 80036ce:	609a      	str	r2, [r3, #8]
}
 80036d0:	bf00      	nop
 80036d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036d6:	46bd      	mov	sp, r7
 80036d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036dc:	51eb851f 	.word	0x51eb851f

080036e0 <siprintf>:
 80036e0:	b40e      	push	{r1, r2, r3}
 80036e2:	b500      	push	{lr}
 80036e4:	b09c      	sub	sp, #112	; 0x70
 80036e6:	ab1d      	add	r3, sp, #116	; 0x74
 80036e8:	9002      	str	r0, [sp, #8]
 80036ea:	9006      	str	r0, [sp, #24]
 80036ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036f0:	4809      	ldr	r0, [pc, #36]	; (8003718 <siprintf+0x38>)
 80036f2:	9107      	str	r1, [sp, #28]
 80036f4:	9104      	str	r1, [sp, #16]
 80036f6:	4909      	ldr	r1, [pc, #36]	; (800371c <siprintf+0x3c>)
 80036f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036fc:	9105      	str	r1, [sp, #20]
 80036fe:	6800      	ldr	r0, [r0, #0]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	a902      	add	r1, sp, #8
 8003704:	f000 f992 	bl	8003a2c <_svfiprintf_r>
 8003708:	9b02      	ldr	r3, [sp, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	b01c      	add	sp, #112	; 0x70
 8003710:	f85d eb04 	ldr.w	lr, [sp], #4
 8003714:	b003      	add	sp, #12
 8003716:	4770      	bx	lr
 8003718:	20000058 	.word	0x20000058
 800371c:	ffff0208 	.word	0xffff0208

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <__errno>:
 8003730:	4b01      	ldr	r3, [pc, #4]	; (8003738 <__errno+0x8>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000058 	.word	0x20000058

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4d0d      	ldr	r5, [pc, #52]	; (8003774 <__libc_init_array+0x38>)
 8003740:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003742:	1b64      	subs	r4, r4, r5
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	2600      	movs	r6, #0
 8003748:	42a6      	cmp	r6, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	4d0b      	ldr	r5, [pc, #44]	; (800377c <__libc_init_array+0x40>)
 800374e:	4c0c      	ldr	r4, [pc, #48]	; (8003780 <__libc_init_array+0x44>)
 8003750:	f000 fc6a 	bl	8004028 <_init>
 8003754:	1b64      	subs	r4, r4, r5
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	2600      	movs	r6, #0
 800375a:	42a6      	cmp	r6, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f855 3b04 	ldr.w	r3, [r5], #4
 8003764:	4798      	blx	r3
 8003766:	3601      	adds	r6, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f855 3b04 	ldr.w	r3, [r5], #4
 800376e:	4798      	blx	r3
 8003770:	3601      	adds	r6, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	080040c4 	.word	0x080040c4
 8003778:	080040c4 	.word	0x080040c4
 800377c:	080040c4 	.word	0x080040c4
 8003780:	080040c8 	.word	0x080040c8

08003784 <__retarget_lock_acquire_recursive>:
 8003784:	4770      	bx	lr

08003786 <__retarget_lock_release_recursive>:
 8003786:	4770      	bx	lr

08003788 <_free_r>:
 8003788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800378a:	2900      	cmp	r1, #0
 800378c:	d044      	beq.n	8003818 <_free_r+0x90>
 800378e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003792:	9001      	str	r0, [sp, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f1a1 0404 	sub.w	r4, r1, #4
 800379a:	bfb8      	it	lt
 800379c:	18e4      	addlt	r4, r4, r3
 800379e:	f000 f8df 	bl	8003960 <__malloc_lock>
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <_free_r+0x94>)
 80037a4:	9801      	ldr	r0, [sp, #4]
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	b933      	cbnz	r3, 80037b8 <_free_r+0x30>
 80037aa:	6063      	str	r3, [r4, #4]
 80037ac:	6014      	str	r4, [r2, #0]
 80037ae:	b003      	add	sp, #12
 80037b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037b4:	f000 b8da 	b.w	800396c <__malloc_unlock>
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	d908      	bls.n	80037ce <_free_r+0x46>
 80037bc:	6825      	ldr	r5, [r4, #0]
 80037be:	1961      	adds	r1, r4, r5
 80037c0:	428b      	cmp	r3, r1
 80037c2:	bf01      	itttt	eq
 80037c4:	6819      	ldreq	r1, [r3, #0]
 80037c6:	685b      	ldreq	r3, [r3, #4]
 80037c8:	1949      	addeq	r1, r1, r5
 80037ca:	6021      	streq	r1, [r4, #0]
 80037cc:	e7ed      	b.n	80037aa <_free_r+0x22>
 80037ce:	461a      	mov	r2, r3
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b10b      	cbz	r3, 80037d8 <_free_r+0x50>
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d9fa      	bls.n	80037ce <_free_r+0x46>
 80037d8:	6811      	ldr	r1, [r2, #0]
 80037da:	1855      	adds	r5, r2, r1
 80037dc:	42a5      	cmp	r5, r4
 80037de:	d10b      	bne.n	80037f8 <_free_r+0x70>
 80037e0:	6824      	ldr	r4, [r4, #0]
 80037e2:	4421      	add	r1, r4
 80037e4:	1854      	adds	r4, r2, r1
 80037e6:	42a3      	cmp	r3, r4
 80037e8:	6011      	str	r1, [r2, #0]
 80037ea:	d1e0      	bne.n	80037ae <_free_r+0x26>
 80037ec:	681c      	ldr	r4, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	6053      	str	r3, [r2, #4]
 80037f2:	440c      	add	r4, r1
 80037f4:	6014      	str	r4, [r2, #0]
 80037f6:	e7da      	b.n	80037ae <_free_r+0x26>
 80037f8:	d902      	bls.n	8003800 <_free_r+0x78>
 80037fa:	230c      	movs	r3, #12
 80037fc:	6003      	str	r3, [r0, #0]
 80037fe:	e7d6      	b.n	80037ae <_free_r+0x26>
 8003800:	6825      	ldr	r5, [r4, #0]
 8003802:	1961      	adds	r1, r4, r5
 8003804:	428b      	cmp	r3, r1
 8003806:	bf04      	itt	eq
 8003808:	6819      	ldreq	r1, [r3, #0]
 800380a:	685b      	ldreq	r3, [r3, #4]
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	bf04      	itt	eq
 8003810:	1949      	addeq	r1, r1, r5
 8003812:	6021      	streq	r1, [r4, #0]
 8003814:	6054      	str	r4, [r2, #4]
 8003816:	e7ca      	b.n	80037ae <_free_r+0x26>
 8003818:	b003      	add	sp, #12
 800381a:	bd30      	pop	{r4, r5, pc}
 800381c:	200002bc 	.word	0x200002bc

08003820 <sbrk_aligned>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	4e0e      	ldr	r6, [pc, #56]	; (800385c <sbrk_aligned+0x3c>)
 8003824:	460c      	mov	r4, r1
 8003826:	6831      	ldr	r1, [r6, #0]
 8003828:	4605      	mov	r5, r0
 800382a:	b911      	cbnz	r1, 8003832 <sbrk_aligned+0x12>
 800382c:	f000 fba6 	bl	8003f7c <_sbrk_r>
 8003830:	6030      	str	r0, [r6, #0]
 8003832:	4621      	mov	r1, r4
 8003834:	4628      	mov	r0, r5
 8003836:	f000 fba1 	bl	8003f7c <_sbrk_r>
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	d00a      	beq.n	8003854 <sbrk_aligned+0x34>
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d007      	beq.n	8003858 <sbrk_aligned+0x38>
 8003848:	1a21      	subs	r1, r4, r0
 800384a:	4628      	mov	r0, r5
 800384c:	f000 fb96 	bl	8003f7c <_sbrk_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d101      	bne.n	8003858 <sbrk_aligned+0x38>
 8003854:	f04f 34ff 	mov.w	r4, #4294967295
 8003858:	4620      	mov	r0, r4
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	200002c0 	.word	0x200002c0

08003860 <_malloc_r>:
 8003860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003864:	1ccd      	adds	r5, r1, #3
 8003866:	f025 0503 	bic.w	r5, r5, #3
 800386a:	3508      	adds	r5, #8
 800386c:	2d0c      	cmp	r5, #12
 800386e:	bf38      	it	cc
 8003870:	250c      	movcc	r5, #12
 8003872:	2d00      	cmp	r5, #0
 8003874:	4607      	mov	r7, r0
 8003876:	db01      	blt.n	800387c <_malloc_r+0x1c>
 8003878:	42a9      	cmp	r1, r5
 800387a:	d905      	bls.n	8003888 <_malloc_r+0x28>
 800387c:	230c      	movs	r3, #12
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	2600      	movs	r6, #0
 8003882:	4630      	mov	r0, r6
 8003884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003888:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800395c <_malloc_r+0xfc>
 800388c:	f000 f868 	bl	8003960 <__malloc_lock>
 8003890:	f8d8 3000 	ldr.w	r3, [r8]
 8003894:	461c      	mov	r4, r3
 8003896:	bb5c      	cbnz	r4, 80038f0 <_malloc_r+0x90>
 8003898:	4629      	mov	r1, r5
 800389a:	4638      	mov	r0, r7
 800389c:	f7ff ffc0 	bl	8003820 <sbrk_aligned>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	4604      	mov	r4, r0
 80038a4:	d155      	bne.n	8003952 <_malloc_r+0xf2>
 80038a6:	f8d8 4000 	ldr.w	r4, [r8]
 80038aa:	4626      	mov	r6, r4
 80038ac:	2e00      	cmp	r6, #0
 80038ae:	d145      	bne.n	800393c <_malloc_r+0xdc>
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	d048      	beq.n	8003946 <_malloc_r+0xe6>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	4631      	mov	r1, r6
 80038b8:	4638      	mov	r0, r7
 80038ba:	eb04 0903 	add.w	r9, r4, r3
 80038be:	f000 fb5d 	bl	8003f7c <_sbrk_r>
 80038c2:	4581      	cmp	r9, r0
 80038c4:	d13f      	bne.n	8003946 <_malloc_r+0xe6>
 80038c6:	6821      	ldr	r1, [r4, #0]
 80038c8:	1a6d      	subs	r5, r5, r1
 80038ca:	4629      	mov	r1, r5
 80038cc:	4638      	mov	r0, r7
 80038ce:	f7ff ffa7 	bl	8003820 <sbrk_aligned>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d037      	beq.n	8003946 <_malloc_r+0xe6>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	442b      	add	r3, r5
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	f8d8 3000 	ldr.w	r3, [r8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d038      	beq.n	8003956 <_malloc_r+0xf6>
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	42a2      	cmp	r2, r4
 80038e8:	d12b      	bne.n	8003942 <_malloc_r+0xe2>
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	e00f      	b.n	8003910 <_malloc_r+0xb0>
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	1b52      	subs	r2, r2, r5
 80038f4:	d41f      	bmi.n	8003936 <_malloc_r+0xd6>
 80038f6:	2a0b      	cmp	r2, #11
 80038f8:	d917      	bls.n	800392a <_malloc_r+0xca>
 80038fa:	1961      	adds	r1, r4, r5
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	6025      	str	r5, [r4, #0]
 8003900:	bf18      	it	ne
 8003902:	6059      	strne	r1, [r3, #4]
 8003904:	6863      	ldr	r3, [r4, #4]
 8003906:	bf08      	it	eq
 8003908:	f8c8 1000 	streq.w	r1, [r8]
 800390c:	5162      	str	r2, [r4, r5]
 800390e:	604b      	str	r3, [r1, #4]
 8003910:	4638      	mov	r0, r7
 8003912:	f104 060b 	add.w	r6, r4, #11
 8003916:	f000 f829 	bl	800396c <__malloc_unlock>
 800391a:	f026 0607 	bic.w	r6, r6, #7
 800391e:	1d23      	adds	r3, r4, #4
 8003920:	1af2      	subs	r2, r6, r3
 8003922:	d0ae      	beq.n	8003882 <_malloc_r+0x22>
 8003924:	1b9b      	subs	r3, r3, r6
 8003926:	50a3      	str	r3, [r4, r2]
 8003928:	e7ab      	b.n	8003882 <_malloc_r+0x22>
 800392a:	42a3      	cmp	r3, r4
 800392c:	6862      	ldr	r2, [r4, #4]
 800392e:	d1dd      	bne.n	80038ec <_malloc_r+0x8c>
 8003930:	f8c8 2000 	str.w	r2, [r8]
 8003934:	e7ec      	b.n	8003910 <_malloc_r+0xb0>
 8003936:	4623      	mov	r3, r4
 8003938:	6864      	ldr	r4, [r4, #4]
 800393a:	e7ac      	b.n	8003896 <_malloc_r+0x36>
 800393c:	4634      	mov	r4, r6
 800393e:	6876      	ldr	r6, [r6, #4]
 8003940:	e7b4      	b.n	80038ac <_malloc_r+0x4c>
 8003942:	4613      	mov	r3, r2
 8003944:	e7cc      	b.n	80038e0 <_malloc_r+0x80>
 8003946:	230c      	movs	r3, #12
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	4638      	mov	r0, r7
 800394c:	f000 f80e 	bl	800396c <__malloc_unlock>
 8003950:	e797      	b.n	8003882 <_malloc_r+0x22>
 8003952:	6025      	str	r5, [r4, #0]
 8003954:	e7dc      	b.n	8003910 <_malloc_r+0xb0>
 8003956:	605b      	str	r3, [r3, #4]
 8003958:	deff      	udf	#255	; 0xff
 800395a:	bf00      	nop
 800395c:	200002bc 	.word	0x200002bc

08003960 <__malloc_lock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_lock+0x8>)
 8003962:	f7ff bf0f 	b.w	8003784 <__retarget_lock_acquire_recursive>
 8003966:	bf00      	nop
 8003968:	200002b8 	.word	0x200002b8

0800396c <__malloc_unlock>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__malloc_unlock+0x8>)
 800396e:	f7ff bf0a 	b.w	8003786 <__retarget_lock_release_recursive>
 8003972:	bf00      	nop
 8003974:	200002b8 	.word	0x200002b8

08003978 <__ssputs_r>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	688e      	ldr	r6, [r1, #8]
 800397e:	461f      	mov	r7, r3
 8003980:	42be      	cmp	r6, r7
 8003982:	680b      	ldr	r3, [r1, #0]
 8003984:	4682      	mov	sl, r0
 8003986:	460c      	mov	r4, r1
 8003988:	4690      	mov	r8, r2
 800398a:	d82c      	bhi.n	80039e6 <__ssputs_r+0x6e>
 800398c:	898a      	ldrh	r2, [r1, #12]
 800398e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003992:	d026      	beq.n	80039e2 <__ssputs_r+0x6a>
 8003994:	6965      	ldr	r5, [r4, #20]
 8003996:	6909      	ldr	r1, [r1, #16]
 8003998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800399c:	eba3 0901 	sub.w	r9, r3, r1
 80039a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039a4:	1c7b      	adds	r3, r7, #1
 80039a6:	444b      	add	r3, r9
 80039a8:	106d      	asrs	r5, r5, #1
 80039aa:	429d      	cmp	r5, r3
 80039ac:	bf38      	it	cc
 80039ae:	461d      	movcc	r5, r3
 80039b0:	0553      	lsls	r3, r2, #21
 80039b2:	d527      	bpl.n	8003a04 <__ssputs_r+0x8c>
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7ff ff53 	bl	8003860 <_malloc_r>
 80039ba:	4606      	mov	r6, r0
 80039bc:	b360      	cbz	r0, 8003a18 <__ssputs_r+0xa0>
 80039be:	6921      	ldr	r1, [r4, #16]
 80039c0:	464a      	mov	r2, r9
 80039c2:	f000 faeb 	bl	8003f9c <memcpy>
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	6126      	str	r6, [r4, #16]
 80039d4:	6165      	str	r5, [r4, #20]
 80039d6:	444e      	add	r6, r9
 80039d8:	eba5 0509 	sub.w	r5, r5, r9
 80039dc:	6026      	str	r6, [r4, #0]
 80039de:	60a5      	str	r5, [r4, #8]
 80039e0:	463e      	mov	r6, r7
 80039e2:	42be      	cmp	r6, r7
 80039e4:	d900      	bls.n	80039e8 <__ssputs_r+0x70>
 80039e6:	463e      	mov	r6, r7
 80039e8:	6820      	ldr	r0, [r4, #0]
 80039ea:	4632      	mov	r2, r6
 80039ec:	4641      	mov	r1, r8
 80039ee:	f000 faab 	bl	8003f48 <memmove>
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	1b9b      	subs	r3, r3, r6
 80039f6:	60a3      	str	r3, [r4, #8]
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	4433      	add	r3, r6
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	2000      	movs	r0, #0
 8003a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a04:	462a      	mov	r2, r5
 8003a06:	f000 fad7 	bl	8003fb8 <_realloc_r>
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d1e0      	bne.n	80039d2 <__ssputs_r+0x5a>
 8003a10:	6921      	ldr	r1, [r4, #16]
 8003a12:	4650      	mov	r0, sl
 8003a14:	f7ff feb8 	bl	8003788 <_free_r>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	f8ca 3000 	str.w	r3, [sl]
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2a:	e7e9      	b.n	8003a00 <__ssputs_r+0x88>

08003a2c <_svfiprintf_r>:
 8003a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a30:	4698      	mov	r8, r3
 8003a32:	898b      	ldrh	r3, [r1, #12]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	b09d      	sub	sp, #116	; 0x74
 8003a38:	4607      	mov	r7, r0
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	d50e      	bpl.n	8003a5e <_svfiprintf_r+0x32>
 8003a40:	690b      	ldr	r3, [r1, #16]
 8003a42:	b963      	cbnz	r3, 8003a5e <_svfiprintf_r+0x32>
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	f7ff ff0b 	bl	8003860 <_malloc_r>
 8003a4a:	6028      	str	r0, [r5, #0]
 8003a4c:	6128      	str	r0, [r5, #16]
 8003a4e:	b920      	cbnz	r0, 8003a5a <_svfiprintf_r+0x2e>
 8003a50:	230c      	movs	r3, #12
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	e0d0      	b.n	8003bfc <_svfiprintf_r+0x1d0>
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	616b      	str	r3, [r5, #20]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9309      	str	r3, [sp, #36]	; 0x24
 8003a62:	2320      	movs	r3, #32
 8003a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a6c:	2330      	movs	r3, #48	; 0x30
 8003a6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c14 <_svfiprintf_r+0x1e8>
 8003a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a76:	f04f 0901 	mov.w	r9, #1
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	469a      	mov	sl, r3
 8003a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a82:	b10a      	cbz	r2, 8003a88 <_svfiprintf_r+0x5c>
 8003a84:	2a25      	cmp	r2, #37	; 0x25
 8003a86:	d1f9      	bne.n	8003a7c <_svfiprintf_r+0x50>
 8003a88:	ebba 0b04 	subs.w	fp, sl, r4
 8003a8c:	d00b      	beq.n	8003aa6 <_svfiprintf_r+0x7a>
 8003a8e:	465b      	mov	r3, fp
 8003a90:	4622      	mov	r2, r4
 8003a92:	4629      	mov	r1, r5
 8003a94:	4638      	mov	r0, r7
 8003a96:	f7ff ff6f 	bl	8003978 <__ssputs_r>
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	f000 80a9 	beq.w	8003bf2 <_svfiprintf_r+0x1c6>
 8003aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aa2:	445a      	add	r2, fp
 8003aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8003aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80a1 	beq.w	8003bf2 <_svfiprintf_r+0x1c6>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aba:	f10a 0a01 	add.w	sl, sl, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	9307      	str	r3, [sp, #28]
 8003ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ac8:	4654      	mov	r4, sl
 8003aca:	2205      	movs	r2, #5
 8003acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad0:	4850      	ldr	r0, [pc, #320]	; (8003c14 <_svfiprintf_r+0x1e8>)
 8003ad2:	f7fc fb8d 	bl	80001f0 <memchr>
 8003ad6:	9a04      	ldr	r2, [sp, #16]
 8003ad8:	b9d8      	cbnz	r0, 8003b12 <_svfiprintf_r+0xe6>
 8003ada:	06d0      	lsls	r0, r2, #27
 8003adc:	bf44      	itt	mi
 8003ade:	2320      	movmi	r3, #32
 8003ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ae4:	0711      	lsls	r1, r2, #28
 8003ae6:	bf44      	itt	mi
 8003ae8:	232b      	movmi	r3, #43	; 0x2b
 8003aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aee:	f89a 3000 	ldrb.w	r3, [sl]
 8003af2:	2b2a      	cmp	r3, #42	; 0x2a
 8003af4:	d015      	beq.n	8003b22 <_svfiprintf_r+0xf6>
 8003af6:	9a07      	ldr	r2, [sp, #28]
 8003af8:	4654      	mov	r4, sl
 8003afa:	2000      	movs	r0, #0
 8003afc:	f04f 0c0a 	mov.w	ip, #10
 8003b00:	4621      	mov	r1, r4
 8003b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b06:	3b30      	subs	r3, #48	; 0x30
 8003b08:	2b09      	cmp	r3, #9
 8003b0a:	d94d      	bls.n	8003ba8 <_svfiprintf_r+0x17c>
 8003b0c:	b1b0      	cbz	r0, 8003b3c <_svfiprintf_r+0x110>
 8003b0e:	9207      	str	r2, [sp, #28]
 8003b10:	e014      	b.n	8003b3c <_svfiprintf_r+0x110>
 8003b12:	eba0 0308 	sub.w	r3, r0, r8
 8003b16:	fa09 f303 	lsl.w	r3, r9, r3
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	9304      	str	r3, [sp, #16]
 8003b1e:	46a2      	mov	sl, r4
 8003b20:	e7d2      	b.n	8003ac8 <_svfiprintf_r+0x9c>
 8003b22:	9b03      	ldr	r3, [sp, #12]
 8003b24:	1d19      	adds	r1, r3, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	9103      	str	r1, [sp, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bfbb      	ittet	lt
 8003b2e:	425b      	neglt	r3, r3
 8003b30:	f042 0202 	orrlt.w	r2, r2, #2
 8003b34:	9307      	strge	r3, [sp, #28]
 8003b36:	9307      	strlt	r3, [sp, #28]
 8003b38:	bfb8      	it	lt
 8003b3a:	9204      	strlt	r2, [sp, #16]
 8003b3c:	7823      	ldrb	r3, [r4, #0]
 8003b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b40:	d10c      	bne.n	8003b5c <_svfiprintf_r+0x130>
 8003b42:	7863      	ldrb	r3, [r4, #1]
 8003b44:	2b2a      	cmp	r3, #42	; 0x2a
 8003b46:	d134      	bne.n	8003bb2 <_svfiprintf_r+0x186>
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	9203      	str	r2, [sp, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bfb8      	it	lt
 8003b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b58:	3402      	adds	r4, #2
 8003b5a:	9305      	str	r3, [sp, #20]
 8003b5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c24 <_svfiprintf_r+0x1f8>
 8003b60:	7821      	ldrb	r1, [r4, #0]
 8003b62:	2203      	movs	r2, #3
 8003b64:	4650      	mov	r0, sl
 8003b66:	f7fc fb43 	bl	80001f0 <memchr>
 8003b6a:	b138      	cbz	r0, 8003b7c <_svfiprintf_r+0x150>
 8003b6c:	9b04      	ldr	r3, [sp, #16]
 8003b6e:	eba0 000a 	sub.w	r0, r0, sl
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	4082      	lsls	r2, r0
 8003b76:	4313      	orrs	r3, r2
 8003b78:	3401      	adds	r4, #1
 8003b7a:	9304      	str	r3, [sp, #16]
 8003b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b80:	4825      	ldr	r0, [pc, #148]	; (8003c18 <_svfiprintf_r+0x1ec>)
 8003b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b86:	2206      	movs	r2, #6
 8003b88:	f7fc fb32 	bl	80001f0 <memchr>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d038      	beq.n	8003c02 <_svfiprintf_r+0x1d6>
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <_svfiprintf_r+0x1f0>)
 8003b92:	bb1b      	cbnz	r3, 8003bdc <_svfiprintf_r+0x1b0>
 8003b94:	9b03      	ldr	r3, [sp, #12]
 8003b96:	3307      	adds	r3, #7
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	9303      	str	r3, [sp, #12]
 8003ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba2:	4433      	add	r3, r6
 8003ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba6:	e768      	b.n	8003a7a <_svfiprintf_r+0x4e>
 8003ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bac:	460c      	mov	r4, r1
 8003bae:	2001      	movs	r0, #1
 8003bb0:	e7a6      	b.n	8003b00 <_svfiprintf_r+0xd4>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	3401      	adds	r4, #1
 8003bb6:	9305      	str	r3, [sp, #20]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f04f 0c0a 	mov.w	ip, #10
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bc4:	3a30      	subs	r2, #48	; 0x30
 8003bc6:	2a09      	cmp	r2, #9
 8003bc8:	d903      	bls.n	8003bd2 <_svfiprintf_r+0x1a6>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0c6      	beq.n	8003b5c <_svfiprintf_r+0x130>
 8003bce:	9105      	str	r1, [sp, #20]
 8003bd0:	e7c4      	b.n	8003b5c <_svfiprintf_r+0x130>
 8003bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e7f0      	b.n	8003bbe <_svfiprintf_r+0x192>
 8003bdc:	ab03      	add	r3, sp, #12
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	462a      	mov	r2, r5
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <_svfiprintf_r+0x1f4>)
 8003be4:	a904      	add	r1, sp, #16
 8003be6:	4638      	mov	r0, r7
 8003be8:	f3af 8000 	nop.w
 8003bec:	1c42      	adds	r2, r0, #1
 8003bee:	4606      	mov	r6, r0
 8003bf0:	d1d6      	bne.n	8003ba0 <_svfiprintf_r+0x174>
 8003bf2:	89ab      	ldrh	r3, [r5, #12]
 8003bf4:	065b      	lsls	r3, r3, #25
 8003bf6:	f53f af2d 	bmi.w	8003a54 <_svfiprintf_r+0x28>
 8003bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bfc:	b01d      	add	sp, #116	; 0x74
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c02:	ab03      	add	r3, sp, #12
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	462a      	mov	r2, r5
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <_svfiprintf_r+0x1f4>)
 8003c0a:	a904      	add	r1, sp, #16
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	f000 f879 	bl	8003d04 <_printf_i>
 8003c12:	e7eb      	b.n	8003bec <_svfiprintf_r+0x1c0>
 8003c14:	08004088 	.word	0x08004088
 8003c18:	08004092 	.word	0x08004092
 8003c1c:	00000000 	.word	0x00000000
 8003c20:	08003979 	.word	0x08003979
 8003c24:	0800408e 	.word	0x0800408e

08003c28 <_printf_common>:
 8003c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c2c:	4616      	mov	r6, r2
 8003c2e:	4699      	mov	r9, r3
 8003c30:	688a      	ldr	r2, [r1, #8]
 8003c32:	690b      	ldr	r3, [r1, #16]
 8003c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	bfb8      	it	lt
 8003c3c:	4613      	movlt	r3, r2
 8003c3e:	6033      	str	r3, [r6, #0]
 8003c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c44:	4607      	mov	r7, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	b10a      	cbz	r2, 8003c4e <_printf_common+0x26>
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	6033      	str	r3, [r6, #0]
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	0699      	lsls	r1, r3, #26
 8003c52:	bf42      	ittt	mi
 8003c54:	6833      	ldrmi	r3, [r6, #0]
 8003c56:	3302      	addmi	r3, #2
 8003c58:	6033      	strmi	r3, [r6, #0]
 8003c5a:	6825      	ldr	r5, [r4, #0]
 8003c5c:	f015 0506 	ands.w	r5, r5, #6
 8003c60:	d106      	bne.n	8003c70 <_printf_common+0x48>
 8003c62:	f104 0a19 	add.w	sl, r4, #25
 8003c66:	68e3      	ldr	r3, [r4, #12]
 8003c68:	6832      	ldr	r2, [r6, #0]
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	42ab      	cmp	r3, r5
 8003c6e:	dc26      	bgt.n	8003cbe <_printf_common+0x96>
 8003c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c74:	1e13      	subs	r3, r2, #0
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	bf18      	it	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	0692      	lsls	r2, r2, #26
 8003c7e:	d42b      	bmi.n	8003cd8 <_printf_common+0xb0>
 8003c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c84:	4649      	mov	r1, r9
 8003c86:	4638      	mov	r0, r7
 8003c88:	47c0      	blx	r8
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d01e      	beq.n	8003ccc <_printf_common+0xa4>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	6922      	ldr	r2, [r4, #16]
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	bf02      	ittt	eq
 8003c9a:	68e5      	ldreq	r5, [r4, #12]
 8003c9c:	6833      	ldreq	r3, [r6, #0]
 8003c9e:	1aed      	subeq	r5, r5, r3
 8003ca0:	68a3      	ldr	r3, [r4, #8]
 8003ca2:	bf0c      	ite	eq
 8003ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ca8:	2500      	movne	r5, #0
 8003caa:	4293      	cmp	r3, r2
 8003cac:	bfc4      	itt	gt
 8003cae:	1a9b      	subgt	r3, r3, r2
 8003cb0:	18ed      	addgt	r5, r5, r3
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	341a      	adds	r4, #26
 8003cb6:	42b5      	cmp	r5, r6
 8003cb8:	d11a      	bne.n	8003cf0 <_printf_common+0xc8>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e008      	b.n	8003cd0 <_printf_common+0xa8>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4652      	mov	r2, sl
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	47c0      	blx	r8
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d103      	bne.n	8003cd4 <_printf_common+0xac>
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	e7c6      	b.n	8003c66 <_printf_common+0x3e>
 8003cd8:	18e1      	adds	r1, r4, r3
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	2030      	movs	r0, #48	; 0x30
 8003cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ce2:	4422      	add	r2, r4
 8003ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cec:	3302      	adds	r3, #2
 8003cee:	e7c7      	b.n	8003c80 <_printf_common+0x58>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c0      	blx	r8
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d0e6      	beq.n	8003ccc <_printf_common+0xa4>
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7d9      	b.n	8003cb6 <_printf_common+0x8e>
	...

08003d04 <_printf_i>:
 8003d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d08:	7e0f      	ldrb	r7, [r1, #24]
 8003d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d0c:	2f78      	cmp	r7, #120	; 0x78
 8003d0e:	4691      	mov	r9, r2
 8003d10:	4680      	mov	r8, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	469a      	mov	sl, r3
 8003d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d1a:	d807      	bhi.n	8003d2c <_printf_i+0x28>
 8003d1c:	2f62      	cmp	r7, #98	; 0x62
 8003d1e:	d80a      	bhi.n	8003d36 <_printf_i+0x32>
 8003d20:	2f00      	cmp	r7, #0
 8003d22:	f000 80d4 	beq.w	8003ece <_printf_i+0x1ca>
 8003d26:	2f58      	cmp	r7, #88	; 0x58
 8003d28:	f000 80c0 	beq.w	8003eac <_printf_i+0x1a8>
 8003d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d34:	e03a      	b.n	8003dac <_printf_i+0xa8>
 8003d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d3a:	2b15      	cmp	r3, #21
 8003d3c:	d8f6      	bhi.n	8003d2c <_printf_i+0x28>
 8003d3e:	a101      	add	r1, pc, #4	; (adr r1, 8003d44 <_printf_i+0x40>)
 8003d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d44:	08003d9d 	.word	0x08003d9d
 8003d48:	08003db1 	.word	0x08003db1
 8003d4c:	08003d2d 	.word	0x08003d2d
 8003d50:	08003d2d 	.word	0x08003d2d
 8003d54:	08003d2d 	.word	0x08003d2d
 8003d58:	08003d2d 	.word	0x08003d2d
 8003d5c:	08003db1 	.word	0x08003db1
 8003d60:	08003d2d 	.word	0x08003d2d
 8003d64:	08003d2d 	.word	0x08003d2d
 8003d68:	08003d2d 	.word	0x08003d2d
 8003d6c:	08003d2d 	.word	0x08003d2d
 8003d70:	08003eb5 	.word	0x08003eb5
 8003d74:	08003ddd 	.word	0x08003ddd
 8003d78:	08003e6f 	.word	0x08003e6f
 8003d7c:	08003d2d 	.word	0x08003d2d
 8003d80:	08003d2d 	.word	0x08003d2d
 8003d84:	08003ed7 	.word	0x08003ed7
 8003d88:	08003d2d 	.word	0x08003d2d
 8003d8c:	08003ddd 	.word	0x08003ddd
 8003d90:	08003d2d 	.word	0x08003d2d
 8003d94:	08003d2d 	.word	0x08003d2d
 8003d98:	08003e77 	.word	0x08003e77
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	602a      	str	r2, [r5, #0]
 8003da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dac:	2301      	movs	r3, #1
 8003dae:	e09f      	b.n	8003ef0 <_printf_i+0x1ec>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	682b      	ldr	r3, [r5, #0]
 8003db4:	0607      	lsls	r7, r0, #24
 8003db6:	f103 0104 	add.w	r1, r3, #4
 8003dba:	6029      	str	r1, [r5, #0]
 8003dbc:	d501      	bpl.n	8003dc2 <_printf_i+0xbe>
 8003dbe:	681e      	ldr	r6, [r3, #0]
 8003dc0:	e003      	b.n	8003dca <_printf_i+0xc6>
 8003dc2:	0646      	lsls	r6, r0, #25
 8003dc4:	d5fb      	bpl.n	8003dbe <_printf_i+0xba>
 8003dc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003dca:	2e00      	cmp	r6, #0
 8003dcc:	da03      	bge.n	8003dd6 <_printf_i+0xd2>
 8003dce:	232d      	movs	r3, #45	; 0x2d
 8003dd0:	4276      	negs	r6, r6
 8003dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd6:	485a      	ldr	r0, [pc, #360]	; (8003f40 <_printf_i+0x23c>)
 8003dd8:	230a      	movs	r3, #10
 8003dda:	e012      	b.n	8003e02 <_printf_i+0xfe>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	1d19      	adds	r1, r3, #4
 8003de2:	6029      	str	r1, [r5, #0]
 8003de4:	0605      	lsls	r5, r0, #24
 8003de6:	d501      	bpl.n	8003dec <_printf_i+0xe8>
 8003de8:	681e      	ldr	r6, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <_printf_i+0xee>
 8003dec:	0641      	lsls	r1, r0, #25
 8003dee:	d5fb      	bpl.n	8003de8 <_printf_i+0xe4>
 8003df0:	881e      	ldrh	r6, [r3, #0]
 8003df2:	4853      	ldr	r0, [pc, #332]	; (8003f40 <_printf_i+0x23c>)
 8003df4:	2f6f      	cmp	r7, #111	; 0x6f
 8003df6:	bf0c      	ite	eq
 8003df8:	2308      	moveq	r3, #8
 8003dfa:	230a      	movne	r3, #10
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e02:	6865      	ldr	r5, [r4, #4]
 8003e04:	60a5      	str	r5, [r4, #8]
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	bfa2      	ittt	ge
 8003e0a:	6821      	ldrge	r1, [r4, #0]
 8003e0c:	f021 0104 	bicge.w	r1, r1, #4
 8003e10:	6021      	strge	r1, [r4, #0]
 8003e12:	b90e      	cbnz	r6, 8003e18 <_printf_i+0x114>
 8003e14:	2d00      	cmp	r5, #0
 8003e16:	d04b      	beq.n	8003eb0 <_printf_i+0x1ac>
 8003e18:	4615      	mov	r5, r2
 8003e1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e1e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e22:	5dc7      	ldrb	r7, [r0, r7]
 8003e24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e28:	4637      	mov	r7, r6
 8003e2a:	42bb      	cmp	r3, r7
 8003e2c:	460e      	mov	r6, r1
 8003e2e:	d9f4      	bls.n	8003e1a <_printf_i+0x116>
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d10b      	bne.n	8003e4c <_printf_i+0x148>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	07de      	lsls	r6, r3, #31
 8003e38:	d508      	bpl.n	8003e4c <_printf_i+0x148>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	6861      	ldr	r1, [r4, #4]
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	bfde      	ittt	le
 8003e42:	2330      	movle	r3, #48	; 0x30
 8003e44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e4c:	1b52      	subs	r2, r2, r5
 8003e4e:	6122      	str	r2, [r4, #16]
 8003e50:	f8cd a000 	str.w	sl, [sp]
 8003e54:	464b      	mov	r3, r9
 8003e56:	aa03      	add	r2, sp, #12
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	f7ff fee4 	bl	8003c28 <_printf_common>
 8003e60:	3001      	adds	r0, #1
 8003e62:	d14a      	bne.n	8003efa <_printf_i+0x1f6>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	b004      	add	sp, #16
 8003e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f043 0320 	orr.w	r3, r3, #32
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	4833      	ldr	r0, [pc, #204]	; (8003f44 <_printf_i+0x240>)
 8003e78:	2778      	movs	r7, #120	; 0x78
 8003e7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	6829      	ldr	r1, [r5, #0]
 8003e82:	061f      	lsls	r7, r3, #24
 8003e84:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e88:	d402      	bmi.n	8003e90 <_printf_i+0x18c>
 8003e8a:	065f      	lsls	r7, r3, #25
 8003e8c:	bf48      	it	mi
 8003e8e:	b2b6      	uxthmi	r6, r6
 8003e90:	07df      	lsls	r7, r3, #31
 8003e92:	bf48      	it	mi
 8003e94:	f043 0320 	orrmi.w	r3, r3, #32
 8003e98:	6029      	str	r1, [r5, #0]
 8003e9a:	bf48      	it	mi
 8003e9c:	6023      	strmi	r3, [r4, #0]
 8003e9e:	b91e      	cbnz	r6, 8003ea8 <_printf_i+0x1a4>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	e7a7      	b.n	8003dfc <_printf_i+0xf8>
 8003eac:	4824      	ldr	r0, [pc, #144]	; (8003f40 <_printf_i+0x23c>)
 8003eae:	e7e4      	b.n	8003e7a <_printf_i+0x176>
 8003eb0:	4615      	mov	r5, r2
 8003eb2:	e7bd      	b.n	8003e30 <_printf_i+0x12c>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	6826      	ldr	r6, [r4, #0]
 8003eb8:	6961      	ldr	r1, [r4, #20]
 8003eba:	1d18      	adds	r0, r3, #4
 8003ebc:	6028      	str	r0, [r5, #0]
 8003ebe:	0635      	lsls	r5, r6, #24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_i+0x1c4>
 8003ec4:	6019      	str	r1, [r3, #0]
 8003ec6:	e002      	b.n	8003ece <_printf_i+0x1ca>
 8003ec8:	0670      	lsls	r0, r6, #25
 8003eca:	d5fb      	bpl.n	8003ec4 <_printf_i+0x1c0>
 8003ecc:	8019      	strh	r1, [r3, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6123      	str	r3, [r4, #16]
 8003ed2:	4615      	mov	r5, r2
 8003ed4:	e7bc      	b.n	8003e50 <_printf_i+0x14c>
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	6862      	ldr	r2, [r4, #4]
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f7fc f984 	bl	80001f0 <memchr>
 8003ee8:	b108      	cbz	r0, 8003eee <_printf_i+0x1ea>
 8003eea:	1b40      	subs	r0, r0, r5
 8003eec:	6060      	str	r0, [r4, #4]
 8003eee:	6863      	ldr	r3, [r4, #4]
 8003ef0:	6123      	str	r3, [r4, #16]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef8:	e7aa      	b.n	8003e50 <_printf_i+0x14c>
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	462a      	mov	r2, r5
 8003efe:	4649      	mov	r1, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	47d0      	blx	sl
 8003f04:	3001      	adds	r0, #1
 8003f06:	d0ad      	beq.n	8003e64 <_printf_i+0x160>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	079b      	lsls	r3, r3, #30
 8003f0c:	d413      	bmi.n	8003f36 <_printf_i+0x232>
 8003f0e:	68e0      	ldr	r0, [r4, #12]
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	4298      	cmp	r0, r3
 8003f14:	bfb8      	it	lt
 8003f16:	4618      	movlt	r0, r3
 8003f18:	e7a6      	b.n	8003e68 <_printf_i+0x164>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	4649      	mov	r1, r9
 8003f20:	4640      	mov	r0, r8
 8003f22:	47d0      	blx	sl
 8003f24:	3001      	adds	r0, #1
 8003f26:	d09d      	beq.n	8003e64 <_printf_i+0x160>
 8003f28:	3501      	adds	r5, #1
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	9903      	ldr	r1, [sp, #12]
 8003f2e:	1a5b      	subs	r3, r3, r1
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dcf2      	bgt.n	8003f1a <_printf_i+0x216>
 8003f34:	e7eb      	b.n	8003f0e <_printf_i+0x20a>
 8003f36:	2500      	movs	r5, #0
 8003f38:	f104 0619 	add.w	r6, r4, #25
 8003f3c:	e7f5      	b.n	8003f2a <_printf_i+0x226>
 8003f3e:	bf00      	nop
 8003f40:	08004099 	.word	0x08004099
 8003f44:	080040aa 	.word	0x080040aa

08003f48 <memmove>:
 8003f48:	4288      	cmp	r0, r1
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	eb01 0402 	add.w	r4, r1, r2
 8003f50:	d902      	bls.n	8003f58 <memmove+0x10>
 8003f52:	4284      	cmp	r4, r0
 8003f54:	4623      	mov	r3, r4
 8003f56:	d807      	bhi.n	8003f68 <memmove+0x20>
 8003f58:	1e43      	subs	r3, r0, #1
 8003f5a:	42a1      	cmp	r1, r4
 8003f5c:	d008      	beq.n	8003f70 <memmove+0x28>
 8003f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f66:	e7f8      	b.n	8003f5a <memmove+0x12>
 8003f68:	4402      	add	r2, r0
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	428a      	cmp	r2, r1
 8003f6e:	d100      	bne.n	8003f72 <memmove+0x2a>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f7a:	e7f7      	b.n	8003f6c <memmove+0x24>

08003f7c <_sbrk_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d06      	ldr	r5, [pc, #24]	; (8003f98 <_sbrk_r+0x1c>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc fe4c 	bl	8000c24 <_sbrk>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_sbrk_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_sbrk_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	200002b4 	.word	0x200002b4

08003f9c <memcpy>:
 8003f9c:	440a      	add	r2, r1
 8003f9e:	4291      	cmp	r1, r2
 8003fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fa4:	d100      	bne.n	8003fa8 <memcpy+0xc>
 8003fa6:	4770      	bx	lr
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fb2:	4291      	cmp	r1, r2
 8003fb4:	d1f9      	bne.n	8003faa <memcpy+0xe>
 8003fb6:	bd10      	pop	{r4, pc}

08003fb8 <_realloc_r>:
 8003fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	460e      	mov	r6, r1
 8003fc2:	b921      	cbnz	r1, 8003fce <_realloc_r+0x16>
 8003fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc8:	4611      	mov	r1, r2
 8003fca:	f7ff bc49 	b.w	8003860 <_malloc_r>
 8003fce:	b92a      	cbnz	r2, 8003fdc <_realloc_r+0x24>
 8003fd0:	f7ff fbda 	bl	8003788 <_free_r>
 8003fd4:	4625      	mov	r5, r4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fdc:	f000 f81b 	bl	8004016 <_malloc_usable_size_r>
 8003fe0:	4284      	cmp	r4, r0
 8003fe2:	4607      	mov	r7, r0
 8003fe4:	d802      	bhi.n	8003fec <_realloc_r+0x34>
 8003fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fea:	d812      	bhi.n	8004012 <_realloc_r+0x5a>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f7ff fc36 	bl	8003860 <_malloc_r>
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d0ed      	beq.n	8003fd6 <_realloc_r+0x1e>
 8003ffa:	42bc      	cmp	r4, r7
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	4631      	mov	r1, r6
 8004000:	bf28      	it	cs
 8004002:	463a      	movcs	r2, r7
 8004004:	f7ff ffca 	bl	8003f9c <memcpy>
 8004008:	4631      	mov	r1, r6
 800400a:	4640      	mov	r0, r8
 800400c:	f7ff fbbc 	bl	8003788 <_free_r>
 8004010:	e7e1      	b.n	8003fd6 <_realloc_r+0x1e>
 8004012:	4635      	mov	r5, r6
 8004014:	e7df      	b.n	8003fd6 <_realloc_r+0x1e>

08004016 <_malloc_usable_size_r>:
 8004016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800401a:	1f18      	subs	r0, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	bfbc      	itt	lt
 8004020:	580b      	ldrlt	r3, [r1, r0]
 8004022:	18c0      	addlt	r0, r0, r3
 8004024:	4770      	bx	lr
	...

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr
